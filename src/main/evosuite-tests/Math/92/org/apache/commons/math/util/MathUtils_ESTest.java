/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:40:58 GMT 2023
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2089L, 2089L);
      assertEquals(4363921L, long0);
      
      double double0 = MathUtils.cosh(4363921L);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.cosh(2089L);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = MathUtils.factorialDouble(604);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 604;
      doubleArray0[1] = (double) 2089L;
      doubleArray0[2] = (double) 4363921L;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 2089L;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 190.0389;
      doubleArray1[2] = 695.981;
      doubleArray1[3] = (double) 2089L;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {604.0, 2089.0, 4363921.0, Double.POSITIVE_INFINITY, 2089.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 190.0389, 695.981, 2089.0, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int int0 = MathUtils.lcm(421, (-37));
      assertEquals(15577, int0);
      
      byte byte0 = MathUtils.sign((byte)12);
      assertEquals((byte)1, byte0);
      
      double double3 = MathUtils.cosh(421);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(3.4430781919940715E182, double3, 0.01);
      
      long long1 = MathUtils.sign(5040L);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1083.8, 1083.8);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round(1733.431F, 3, 3);
      assertEquals(1733.43F, float0, 0.01F);
      
      float float1 = MathUtils.indicator(1733.43F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      long long0 = MathUtils.addAndCheck((-1967L), (-2288L));
      assertEquals((-4255L), long0);
      
      double double0 = MathUtils.factorialLog(3);
      assertEquals(1.791759469228055, double0, 0.01);
      
      double double1 = MathUtils.log(1.0F, (-1266.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = MathUtils.subAndCheck(3, 839);
      assertEquals((-836), int0);
      
      double double2 = MathUtils.SAFE_MIN;
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2.2250738585072014E-308, double2, 0.01);
      
      double double3 = MathUtils.nextAfter((-1.0), (-1143.160924592116));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.0000000000000002), double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble(1773, 11);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1.3217262270999258E28, double4, 0.01);
      
      double double5 = MathUtils.sign(711.0);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-42));
      assertEquals((byte) (-1), byte0);
      
      double double6 = MathUtils.scalb((-2134.7508), 11);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals((-4371969.6384), double6, 0.01);
      
      int int1 = MathUtils.lcm((-2547), (-1705));
      assertFalse(int1 == int0);
      assertEquals(4342635, int1);
      
      int int2 = MathUtils.gcd((-2718), (-2147483647));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9218868437227405312L, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1083.8, 1083.8);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round(1733.431F, 3, 3);
      assertEquals(1733.43F, float0, 0.01F);
      
      float float1 = MathUtils.indicator(1733.43F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      long long0 = MathUtils.addAndCheck((-1967L), (-2288L));
      assertEquals((-4255L), long0);
      
      double double0 = MathUtils.factorialLog(3);
      assertEquals(1.791759469228055, double0, 0.01);
      
      double double1 = MathUtils.log(1.0F, (-1266.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = MathUtils.subAndCheck(3, 839);
      assertEquals((-836), int0);
      
      double double2 = MathUtils.SAFE_MIN;
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.2250738585072014E-308, double2, 0.01);
      
      double double3 = MathUtils.nextAfter((-1.0), (-1143.160924592116));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-1.0000000000000002), double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble(1773, 11);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.3217262270999258E28, double4, 0.01);
      
      double double5 = MathUtils.sign(711.0);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-42));
      assertEquals((byte) (-1), byte0);
      
      double double6 = MathUtils.scalb((-2134.7508), 11);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals((-4371969.6384), double6, 0.01);
      
      int int1 = MathUtils.lcm((-2547), (-1705));
      assertFalse(int1 == int0);
      assertEquals(4342635, int1);
      
      int int2 = MathUtils.gcd((-2718), (-2147483647));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      double double7 = MathUtils.scalb(Double.NaN, 11);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      int int3 = MathUtils.indicator(3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      
      int int4 = MathUtils.subAndCheck(4, 4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      int int0 = MathUtils.indicator(395);
      assertEquals(1, int0);
      
      int int1 = MathUtils.addAndCheck(395, 1);
      assertFalse(int1 == int0);
      assertEquals(396, int1);
      
      float float1 = MathUtils.sign((float) 396);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      byte byte0 = (byte)31;
      byte byte1 = MathUtils.sign((byte)31);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      float float2 = MathUtils.sign((-1.0F));
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      long long0 = MathUtils.mulAndCheck((long) 1, (long) (byte)1);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.subAndCheck(0L, (long) 396);
      assertFalse(long1 == long0);
      assertEquals((-396L), long1);
      
      int int2 = MathUtils.sign(1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      short short0 = MathUtils.sign((short) (-2));
      assertEquals((short) (-1), short0);
      
      int int3 = MathUtils.lcm((short) (-1), 731);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(731, int3);
      
      int int4 = MathUtils.sign(731);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (long) 396);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1083.8, 1083.8);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round((-2676.102F), 3, 3);
      assertEquals((-2676.103F), float0, 0.01F);
      
      float float1 = MathUtils.sign((-2676.103F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      long long0 = MathUtils.addAndCheck((-1967L), (-2288L));
      assertEquals((-4255L), long0);
      
      double double0 = MathUtils.factorialLog(3);
      assertEquals(1.791759469228055, double0, 0.01);
      
      double double1 = MathUtils.log((-1.0F), (-1266.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = MathUtils.subAndCheck(3, 839);
      assertEquals((-836), int0);
      
      double double2 = MathUtils.round(Double.NaN, 839, 11);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = MathUtils.nextAfter((-1.0), (-1143.160924592116));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-1.0000000000000002), double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble(1773, 11);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1.3217262270999258E28, double4, 0.01);
      
      double double5 = MathUtils.sign(710.8250323433559);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1.0, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      assertEquals(0L, long0);
      
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L);
      assertTrue(boolean0);
      
      double double0 = MathUtils.nextAfter(0L, 2746.4256);
      assertEquals(4.9E-324, double0, 0.01);
      
      long long1 = MathUtils.subAndCheck(0L, 0L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      double double1 = MathUtils.indicator((double) 0L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.5;
      doubleArray0[2] = 2746.4256;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1887152865, int0);
      assertArrayEquals(new double[] {0.5, 0.0, 2746.4256}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int1 = MathUtils.hash(0.0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double2 = MathUtils.sinh(2746.4256);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      long long2 = MathUtils.addAndCheck((long) 0, 2855L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(2855L, long2);
      
      int int2 = MathUtils.gcd(0, 945);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(945, int2);
      
      float float0 = MathUtils.indicator(0.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.5, 0.0, 2746.4256}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int3 = MathUtils.hash(0.0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      float float1 = MathUtils.sign(0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.round((double) 945, 2143886522, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = (-17);
      float float0 = MathUtils.round(24.377636F, (-17), 1);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = MathUtils.sign((float) (-17));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      int int1 = 0;
      double double0 = MathUtils.EPSILON;
      assertEquals(1.1102230246251565E-16, double0, 0.01);
      
      double double1 = MathUtils.cosh(1.1102230246251565E-16);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[3] = (double) (-17);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) (-1.0F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = MathUtils.round((-7.7064877F), 6, 6);
      assertEquals((-7.706488F), float0, 0.01F);
      
      int int0 = MathUtils.lcm(6, 6);
      assertEquals(6, int0);
      
      boolean boolean0 = MathUtils.equals((-1.0), (double) 6);
      assertFalse(boolean0);
      
      short short0 = MathUtils.sign((short)2190);
      assertEquals((short)1, short0);
      
      int int1 = MathUtils.mulAndCheck(2312, 6);
      assertFalse(int1 == int0);
      assertEquals(13872, int1);
      
      double double0 = MathUtils.factorialLog(6);
      assertEquals(6.579251212010101, double0, 0.01);
      
      int int2 = MathUtils.sign(1506);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(14L, 14L);
      assertEquals(196L, long0);
      
      long long1 = MathUtils.sign(196L);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      double double0 = MathUtils.SAFE_MIN;
      assertEquals(2.2250738585072014E-308, double0, 0.01);
      
      int int0 = MathUtils.gcd(577, 577);
      assertEquals(577, int0);
      
      byte byte0 = MathUtils.indicator((byte) (-2));
      assertEquals((byte) (-1), byte0);
      
      double double1 = MathUtils.indicator((-2227.27605637095));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      long long2 = MathUtils.indicator(0L);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(1L, long2);
      
      double double2 = MathUtils.normalizeAngle((-1928.76), 2.2250738585072014E-308);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.17788930413303206, double2, 0.01);
      
      float float0 = MathUtils.sign((float) 14L);
      assertEquals(1.0F, float0, 0.01F);
      
      int int1 = MathUtils.mulAndCheck(1, 577);
      assertTrue(int1 == int0);
      assertEquals(577, int1);
      
      long long3 = MathUtils.mulAndCheck(1L, (long) 1);
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      assertEquals(1L, long3);
      
      long long4 = MathUtils.mulAndCheck((-775L), (-775L));
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals(600625L, long4);
      
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      short short0 = MathUtils.indicator((short) (byte) (-1));
      assertEquals((short) (-1), short0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2227.27605637095);
      doubleArray0[1] = (double) 14L;
      doubleArray0[2] = 0.17788930413303206;
      doubleArray0[3] = 2466.336921;
      doubleArray0[4] = (double) 14L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 14L;
      doubleArray0[7] = (-1928.76);
      boolean boolean1 = MathUtils.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2227.27605637095), 14.0, 0.17788930413303206, 2466.336921, 14.0, 1.0, 14.0, (-1928.76)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int2 = MathUtils.addAndCheck((-994), (int) (byte) (-2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-996), int2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = MathUtils.round((-2.2022798F), 6, 6);
      assertEquals((-2.20228F), float0, 0.01F);
      
      int int0 = MathUtils.lcm(6, 6);
      assertEquals(6, int0);
      
      boolean boolean0 = MathUtils.equals((-1.0), (double) 6);
      assertFalse(boolean0);
      
      short short0 = MathUtils.sign((short)2201);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1083.8, 1083.8);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round(Float.NaN, 3, 3);
      assertEquals(Float.NaN, float0, 0.01F);
      
      float float1 = MathUtils.sign(Float.NaN);
      assertEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      long long0 = MathUtils.addAndCheck((-1967L), (-2288L));
      assertEquals((-4255L), long0);
      
      double double0 = MathUtils.SAFE_MIN;
      assertEquals(2.2250738585072014E-308, double0, 0.01);
      
      double double1 = MathUtils.log(Float.NaN, (-1266.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = MathUtils.subAndCheck(3, 852);
      assertEquals((-849), int0);
      
      int int1 = 11;
      // Undeclared exception!
      try { 
        MathUtils.round((-1094.1), 852, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2881L), (-1789L));
      assertEquals((-1092L), long0);
      
      double double0 = MathUtils.cosh((-3551.926));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      int int0 = MathUtils.addAndCheck((-150), (-150));
      assertEquals((-300), int0);
      
      int int1 = MathUtils.subAndCheck(4, 5);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long long1 = MathUtils.indicator(5040L);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 279.7153151202;
      doubleArray0[1] = (double) (-1789L);
      doubleArray0[2] = (double) (-1092L);
      doubleArray0[3] = (double) 5040L;
      doubleArray0[4] = (-3551.926);
      doubleArray0[5] = (double) 1L;
      doubleArray0[7] = (double) (-1092L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {279.7153151202, (-1789.0), (-1092.0), 5040.0, (-3551.926), 1.0, 0.0, (-1092.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = MathUtils.equals((double) (-1789L), (double) 1L);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = MathUtils.indicator(4772.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      float float1 = MathUtils.sign((float) (-150));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1L;
      long long2 = MathUtils.factorial(0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(1L, long2);
      
      doubleArray1[1] = (double) (-1789L);
      doubleArray1[2] = (double) 1L;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1.0, (-1789.0), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {279.7153151202, (-1789.0), (-1092.0), 5040.0, (-3551.926), 1.0, 0.0, (-1092.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      short short0 = MathUtils.sign((short)1891);
      assertEquals((short)1, short0);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-300), (-150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1231L, (-1L));
      assertEquals((-1231L), long0);
      
      int int0 = MathUtils.subAndCheck(5029, (-1));
      assertEquals(5030, int0);
      
      int int1 = MathUtils.subAndCheck(1, 108);
      assertFalse(int1 == int0);
      assertEquals((-107), int1);
      
      double double0 = MathUtils.indicator((-5437.0992));
      assertEquals((-1.0), double0, 0.01);
      
      int int2 = MathUtils.subAndCheck(5029, 5030);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = MathUtils.indicator(123);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      float float0 = MathUtils.indicator(1534.8F);
      assertEquals(1.0F, float0, 0.01F);
      
      double double1 = MathUtils.factorialDouble(1327);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      short short0 = MathUtils.indicator((short) (-413));
      assertEquals((short) (-1), short0);
      
      long long1 = MathUtils.indicator((long) 5029);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      byte byte0 = MathUtils.indicator((byte)86);
      assertEquals((byte)1, byte0);
      
      double double2 = MathUtils.scalb(Double.POSITIVE_INFINITY, 0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 6, 6);
      assertEquals((-1.0F), float0, 0.01F);
      
      int int0 = MathUtils.lcm(6, 6);
      assertEquals(6, int0);
      
      boolean boolean0 = MathUtils.equals((-1.0), (double) 6);
      assertFalse(boolean0);
      
      short short0 = MathUtils.sign((short)2190);
      assertEquals((short)1, short0);
      
      float float1 = MathUtils.indicator(24.377636F);
      assertEquals(1.0F, float1, 0.01F);
      
      int int1 = MathUtils.subAndCheck(931, (int) (short)1);
      assertEquals(930, int1);
      
      double double0 = MathUtils.factorialDouble(931);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = MathUtils.sign((-680.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      int int0 = MathUtils.gcd(100, 742);
      assertEquals(2, int0);
      
      int int1 = MathUtils.gcd((-1276), 2);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1276);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 742;
      doubleArray0[4] = (double) 100;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.0, (-1276.0), 2.0, 742.0, 100.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long long0 = MathUtils.subAndCheck((-127L), 4060L);
      assertEquals((-4187L), long0);
      
      int int2 = MathUtils.sign((-1276));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float float1 = MathUtils.round((float) (-127L), 0, 2);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-126.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 346.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {346.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = MathUtils.lcm((-379), 685);
      assertEquals(259615, int0);
      
      int int1 = MathUtils.indicator(685);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = MathUtils.mulAndCheck((long) 259615, (long) 685);
      assertEquals(177836275L, long0);
      
      double double0 = MathUtils.binomialCoefficientDouble(680, (-379));
      assertEquals(Double.NaN, double0, 0.01);
      
      long long1 = MathUtils.indicator((long) 1);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      float float0 = MathUtils.sign(1416.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      double double1 = MathUtils.sign(1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      int int2 = (-962);
      int int3 = MathUtils.lcm(680, (-962));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(327080, int3);
      
      // Undeclared exception!
      MathUtils.binomialCoefficientDouble(327080, (-962));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.sign(720);
      assertEquals(1, int0);
      
      int int1 = MathUtils.indicator((-2970));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = MathUtils.sign((double) 1);
      assertEquals(1.0, double0, 0.01);
      
      long long0 = MathUtils.indicator((long) (-1));
      assertEquals((-1L), long0);
      
      int int2 = MathUtils.subAndCheck(95, 95);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      double double1 = MathUtils.binomialCoefficientLog(95, 1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.553876891600541, double1, 0.01);
      
      short short0 = MathUtils.indicator((short)292);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1083.8, 1083.8);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round(1733.431F, 3, 3);
      assertEquals(1733.43F, float0, 0.01F);
      
      float float1 = MathUtils.indicator(1733.43F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      long long0 = MathUtils.addAndCheck((-1967L), (-2288L));
      assertEquals((-4255L), long0);
      
      double double0 = MathUtils.factorialLog(3);
      assertEquals(1.791759469228055, double0, 0.01);
      
      double double1 = MathUtils.log(1.0F, (-1266.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = MathUtils.subAndCheck(3, 839);
      assertEquals((-836), int0);
      
      double double2 = MathUtils.SAFE_MIN;
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.2250738585072014E-308, double2, 0.01);
      
      double double3 = MathUtils.nextAfter((-1.0), (-1143.160924592116));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.0000000000000002), double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble(1773, 11);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.3217262270999258E28, double4, 0.01);
      
      double double5 = MathUtils.sign(710.8250323433559);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-42));
      assertEquals((byte) (-1), byte0);
      
      double double6 = MathUtils.scalb((-2134.7508), 11);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals((-4371969.6384), double6, 0.01);
      
      int int1 = MathUtils.lcm((-2547), (-1705));
      assertFalse(int1 == int0);
      assertEquals(4342635, int1);
      
      int int2 = MathUtils.gcd((-2718), (-2147483647));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = 712.0F;
      float float1 = MathUtils.indicator(712.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = MathUtils.nextAfter(0.0, 0.0);
      assertEquals(4.9E-324, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(31, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = MathUtils.hash(doubleArray0);
      assertTrue(int1 == int0);
      assertEquals(31, int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathUtils.factorialDouble(31);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8.22283865417801E33, double1, 0.01);
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int2 = MathUtils.gcd(30, 31);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int3 = MathUtils.addAndCheck(31, 30);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(61, int3);
      
      int int4 = MathUtils.indicator(1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(1, int4);
      
      int int5 = MathUtils.lcm(30, 1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(30, int5);
      
      int int6 = MathUtils.hash(doubleArray0);
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertTrue(int6 == int1);
      assertEquals(31, int6);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int7 = (-1299);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1299), (-1299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-2946), (-2946));
      assertEquals(8678916, int0);
      
      short short0 = MathUtils.sign((short) (-1));
      assertEquals((short) (-1), short0);
      
      short short1 = MathUtils.indicator((short) (-31500));
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      float float0 = MathUtils.round((-276.81F), 1, 1);
      assertEquals((-276.8F), float0, 0.01F);
      
      long long0 = MathUtils.mulAndCheck(9223372036854775807L, (long) (short) (-1));
      assertEquals((-9223372036854775807L), long0);
      
      long long1 = MathUtils.mulAndCheck((long) 8678916, (long) (short) (-1));
      assertFalse(long1 == long0);
      assertEquals((-8678916L), long1);
      
      long long2 = MathUtils.indicator((long) (short) (-1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1L), long2);
      
      int int1 = 671;
      // Undeclared exception!
      try { 
        MathUtils.round(129.658F, 671, (-3631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-2));
      assertEquals((byte) (-1), byte0);
      
      double double0 = MathUtils.indicator((double) (byte) (-2));
      assertEquals((-1.0), double0, 0.01);
      
      int int0 = MathUtils.sign((int) (byte) (-2));
      assertEquals((-1), int0);
      
      float float0 = MathUtils.indicator((-2394.2869F));
      assertEquals((-1.0F), float0, 0.01F);
      
      long long0 = MathUtils.sign((long) (byte) (-1));
      assertEquals((-1L), long0);
      
      short short0 = MathUtils.indicator((short) (byte) (-2));
      assertEquals((short) (-1), short0);
      
      float float1 = MathUtils.indicator((-2394.2869F));
      assertEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      int int1 = MathUtils.sign(697);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = MathUtils.hash((double[]) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      short short1 = MathUtils.indicator((short)701);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.indicator((-1111));
      assertEquals((-1), int0);
      
      double double0 = MathUtils.sign((double) (-1));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientDouble(2145566251, 2145566251);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.lcm(2145566251, 8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 31;
      int int1 = MathUtils.lcm(31, (-3163));
      assertFalse(int1 == int0);
      assertEquals(98053, int1);
      
      byte byte0 = MathUtils.sign((byte) (-119));
      assertEquals((byte) (-1), byte0);
      
      int int2 = MathUtils.lcm((-3163), 1272);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4023336, int2);
      
      double double0 = MathUtils.indicator(1534.5429913);
      assertEquals(1.0, double0, 0.01);
      
      int int3 = MathUtils.addAndCheck((int) (byte) (-1), (-698));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-699), int3);
      
      int int4 = 132;
      int int5 = MathUtils.subAndCheck(132, (-1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(133, int5);
      
      byte byte1 = MathUtils.sign((byte) (-66));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      short short0 = MathUtils.indicator((short) (byte) (-1));
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      MathUtils.binomialCoefficient(2146768058, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1);
      assertEquals((short)1, short0);
      
      int int0 = MathUtils.mulAndCheck((int) (short)1, (int) (short)1);
      assertEquals(1, int0);
      
      float float0 = MathUtils.sign((-1916.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      long long0 = MathUtils.indicator((-4161L));
      assertEquals((-1L), long0);
      
      long long1 = MathUtils.subAndCheck((-4161L), (long) (short)1);
      assertFalse(long1 == long0);
      assertEquals((-4162L), long1);
      
      double double0 = MathUtils.round(0.0, 1, 1);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = MathUtils.addAndCheck(1, (int) (short)1);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      long long2 = MathUtils.subAndCheck(90L, (-4161L));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(4251L, long2);
      
      int int2 = MathUtils.mulAndCheck((int) (short)1, 1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      double double1 = MathUtils.factorialDouble(2);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.0, double1, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-50));
      assertEquals((byte) (-1), byte0);
      
      double double2 = MathUtils.sign((double) (-1L));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      double double3 = MathUtils.binomialCoefficientDouble(3881, (byte) (-1));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = MathUtils.cosh((-1.0));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.543080634815244, double4, 0.01);
      
      int int3 = MathUtils.sign(1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      double double5 = MathUtils.indicator((double) (-1L));
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-1.0), double5, 0.01);
      
      int int4 = MathUtils.sign(647);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(1, int4);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)1;
      doubleArray1[1] = 1.543080634815244;
      doubleArray1[2] = 96.11755606705664;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = 1529.48932821156;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.543080634815244, 96.11755606705664, 1.0, 1529.48932821156}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.sign(720);
      assertEquals(1, int0);
      
      int int1 = MathUtils.indicator((-2970));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = MathUtils.sign((double) 1);
      assertEquals(1.0, double0, 0.01);
      
      long long0 = MathUtils.indicator((long) (-1));
      assertEquals((-1L), long0);
      
      int int2 = MathUtils.subAndCheck(95, 95);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      double double1 = MathUtils.cosh((-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.543080634815244, double1, 0.01);
      
      double double2 = MathUtils.binomialCoefficientLog(0, (-1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.indicator((-2970));
      assertEquals((-1), int0);
      
      long long0 = MathUtils.indicator((long) (-1));
      assertEquals((-1L), long0);
      
      int int1 = MathUtils.subAndCheck((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.cosh(720);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientLog(0, (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.factorial(9);
      assertEquals(362880L, long0);
      
      int int0 = MathUtils.sign(9);
      assertEquals(1, int0);
      
      float float0 = MathUtils.round((float) 362880L, 9);
      assertEquals(362880.0F, float0, 0.01F);
      
      byte byte0 = MathUtils.indicator((byte) (-121));
      assertEquals((byte) (-1), byte0);
      
      int int1 = MathUtils.sign((int) (byte) (-1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = MathUtils.sinh(362880L);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      long long1 = MathUtils.mulAndCheck(24L, (long) (byte) (-121));
      assertFalse(long1 == long0);
      assertEquals((-2904L), long1);
      
      long long2 = MathUtils.binomialCoefficient(9, (-1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
      
      byte byte1 = MathUtils.indicator((byte) (-1));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      double double1 = MathUtils.round((-173.71888041122838), (int) (byte) (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-170.0), double1, 0.01);
      
      long long3 = MathUtils.subAndCheck((long) (byte) (-1), 0L);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals((-1L), long3);
      
      long long4 = MathUtils.factorial(9);
      assertFalse(long4 == long2);
      assertTrue(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertEquals(362880L, long4);
      
      double double2 = MathUtils.cosh(Double.POSITIVE_INFINITY);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      int int2 = MathUtils.mulAndCheck((-1330), (-1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1330, int2);
      
      float float1 = MathUtils.indicator(21.6F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      byte byte2 = MathUtils.sign((byte)1);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)1, byte2);
      
      long long5 = MathUtils.sign((long) (byte) (-1));
      assertFalse(long5 == long2);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertEquals((-1L), long5);
      
      long long6 = MathUtils.binomialCoefficient(156, (byte)1);
      assertFalse(long6 == long0);
      assertFalse(long6 == long1);
      assertFalse(long6 == long3);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
      assertFalse(long6 == long5);
      assertEquals(156L, long6);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.sign(87178291200L);
      assertEquals(1L, long0);
      
      int int0 = 3353;
      int int1 = MathUtils.addAndCheck(21, 3353);
      assertFalse(int1 == int0);
      assertEquals(3374, int1);
      
      int int2 = 2325;
      int int3 = MathUtils.sign(2325);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      long long1 = MathUtils.binomialCoefficient(21, 1);
      assertFalse(long1 == long0);
      assertEquals(21L, long1);
      
      int int4 = MathUtils.subAndCheck(1, 3374);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-3373), int4);
      
      float float0 = MathUtils.sign(1212.4266F);
      assertEquals(1.0F, float0, 0.01F);
      
      long long2 = MathUtils.indicator((long) 2325);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(1L, long2);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 4;
      double double0 = MathUtils.factorialLog(4);
      assertEquals(3.1780538303479458, double0, 0.01);
      
      int int1 = (-1);
      int int2 = MathUtils.mulAndCheck(4, (-1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-4), int2);
      
      float float0 = MathUtils.indicator((float) (-1));
      assertEquals((-1.0F), float0, 0.01F);
      
      double double1 = MathUtils.scalb(3.1780538303479458, (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.5890269151739729, double1, 0.01);
      
      double double2 = 2.0;
      double double3 = MathUtils.cosh(2.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(3.7621956910836314, double3, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-27));
      assertEquals((byte) (-1), byte0);
      
      int int3 = 0;
      double double4 = MathUtils.scalb((byte) (-27), 0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-27.0), double4, 0.01);
      
      double double5 = (-2792.62217185);
      int int4 = 20;
      double double6 = MathUtils.round((-2792.62217185), 20, 0);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals((-2792.62217185), double6, 0.01);
      
      short short0 = MathUtils.sign((short) (byte) (-27));
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      MathUtils.factorialDouble(2052462249);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-1.0), (-1.0));
      assertEquals((-1.0000000000000002), double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientLog(153, 153);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathUtils.factorialLog(153);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(620.0917041284775, double2, 0.01);
      
      double double3 = MathUtils.cosh((-1.0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1.543080634815244, double3, 0.01);
      
      int int0 = MathUtils.mulAndCheck(1912, 7);
      assertEquals(13384, int0);
      
      int int1 = MathUtils.gcd(6233, 6233);
      assertFalse(int1 == int0);
      assertEquals(6233, int1);
      
      long long0 = MathUtils.mulAndCheck((long) 13384, (long) 6233);
      assertEquals(83422472L, long0);
      
      int int2 = MathUtils.addAndCheck(6, (-2670));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-2664), int2);
      
      byte byte0 = (byte)108;
      byte byte1 = MathUtils.indicator((byte)108);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      int int3 = MathUtils.sign((int) (byte)108);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6233;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (-342.9260628477);
      doubleArray0[3] = 1505.3583771433632;
      int int4 = MathUtils.hash(doubleArray0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals((-517929918), int4);
      assertArrayEquals(new double[] {6233.0, 6.0, (-342.9260628477), 1505.3583771433632}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int5 = MathUtils.indicator(9);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(1, int5);
      
      // Undeclared exception!
      MathUtils.factorialLog(13384);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(703.0, 2.2250738585072014E-308);
      assertFalse(boolean0);
      
      int int0 = MathUtils.hash((double) (-2147483646));
      assertEquals(1046478847, int0);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1046478847, (-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = (-1853.67);
      double double1 = MathUtils.log(1470.7, (-1853.67));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
      
      int int0 = MathUtils.indicator((int) (short)0);
      assertEquals(1, int0);
      
      double double2 = MathUtils.indicator(Double.NaN);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      int int1 = (-621);
      int int2 = MathUtils.sign((-621));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775807L), (-9223372036854775807L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = 1941.92F;
      int int0 = 1;
      int int1 = 1921;
      float float1 = MathUtils.indicator((float) 1);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = MathUtils.SAFE_MIN;
      assertEquals(2.2250738585072014E-308, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(1921, (-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1083.8, 1083.8);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round(1733.431F, 3, 3);
      assertEquals(1733.43F, float0, 0.01F);
      
      float float1 = MathUtils.indicator(1733.43F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      long long0 = MathUtils.addAndCheck((-1967L), (-2288L));
      assertEquals((-4255L), long0);
      
      double double0 = MathUtils.factorialLog(3);
      assertEquals(1.791759469228055, double0, 0.01);
      
      double double1 = MathUtils.log(1.0F, (-1266.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = MathUtils.subAndCheck(3, 839);
      assertEquals((-836), int0);
      
      double double2 = MathUtils.SAFE_MIN;
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.2250738585072014E-308, double2, 0.01);
      
      double double3 = MathUtils.nextAfter((-1.0), 839);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-0.9999999999999999), double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble(1773, 11);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.3217262270999258E28, double4, 0.01);
      
      double double5 = MathUtils.sign(711.0);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      byte byte0 = MathUtils.sign((byte) (-42));
      assertEquals((byte) (-1), byte0);
      
      double double6 = MathUtils.scalb((-2134.7508), 11);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals((-4371969.6384), double6, 0.01);
      
      int int1 = MathUtils.addAndCheck(3, 11);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = MathUtils.gcd((-2718), (-2147483647));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(1231, (-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.cosh(3152.8469);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      int int0 = MathUtils.subAndCheck(1758, 2046);
      assertEquals((-288), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1758;
      doubleArray0[1] = 3152.8469;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (-288);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-288);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) 2046;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = (double) 2046;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = (double) (-288);
      doubleArray1[8] = 3152.8469;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1758.0, 3152.8469, Double.POSITIVE_INFINITY, (-288.0), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-288.0), 1.0, 2046.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2046.0, Double.POSITIVE_INFINITY, (-288.0), 3152.8469}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1318.2541919388168);
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-1972315741), int0);
      assertArrayEquals(new double[] {(-1318.2541919388168)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathUtils.log(2.0, (-1318.2541919388168));
      assertEquals(Double.NaN, double0, 0.01);
      
      byte byte0 = MathUtils.indicator((byte)118);
      assertEquals((byte)1, byte0);
      
      int int1 = MathUtils.hash(doubleArray0);
      assertTrue(int1 == int0);
      assertEquals((-1972315741), int1);
      assertArrayEquals(new double[] {(-1318.2541919388168)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int2 = MathUtils.indicator(0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      byte byte1 = MathUtils.sign((byte)0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      double double1 = MathUtils.factorialLog(1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = MathUtils.equals(Double.NaN, (-152.818995062));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathUtils.round(1264.0429303674, 1, (-1972315741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.scalb((-498.0295), 2147483646);
      assertEquals((-124.507375), double0, 0.01);
      
      byte byte0 = (byte)8;
      byte byte1 = MathUtils.sign((byte)8);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      long long0 = MathUtils.indicator((-3761L));
      assertEquals((-1L), long0);
      
      int int0 = 404;
      double double1 = MathUtils.factorialLog(404);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2024.4914629390767, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(404, 2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.cosh(380.37382463685);
      assertEquals(7.820294434089652E164, double0, 0.01);
      
      int int0 = MathUtils.mulAndCheck(1251, 0);
      assertEquals(0, int0);
      
      long long0 = MathUtils.indicator(1991L);
      assertEquals(1L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2147483645), 14);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = (byte) (-41);
      byte byte1 = MathUtils.sign((byte) (-41));
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      long long0 = MathUtils.indicator((long) (byte) (-41));
      assertEquals((-1L), long0);
      
      int int0 = 0;
      float float0 = MathUtils.round((float) (-1L), 0);
      assertEquals((-1.0F), float0, 0.01F);
      
      long long1 = MathUtils.sign((-1L));
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-1L);
      int int1 = MathUtils.hash(doubleArray0);
      assertFalse(int1 == int0);
      assertEquals(744059167, int1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), (-1.0), 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2432902008176640000L, (long) 744059167);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.sign(2944);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int1 = MathUtils.addAndCheck(2944, 15);
      assertFalse(int1 == int0);
      assertEquals(2959, int1);
      
      double double0 = MathUtils.factorialLog(786);
      assertEquals(4458.480561800826, double0, 0.01);
      
      long long0 = MathUtils.binomialCoefficient(2944, (-1));
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.round((-963.2F), (-1424), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 673.4874;
      doubleArray0[1] = 710.875217;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 668.55190197244;
      doubleArray0[5] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-598858227), int0);
      assertArrayEquals(new double[] {673.4874, 710.875217, 1.0, 0.0, 668.55190197244, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float float0 = MathUtils.round(2806.8F, (-598858227));
      assertEquals(Float.NaN, float0, 0.01F);
      
      long long0 = MathUtils.binomialCoefficient(2396, 2396);
      assertEquals(1L, long0);
      
      double double0 = MathUtils.nextAfter(1.0, 0.0);
      assertEquals(0.9999999999999999, double0, 0.01);
      
      int int1 = MathUtils.gcd((-3528), 1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float float1 = MathUtils.sign(0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      double double1 = MathUtils.nextAfter(2301.7436132235284, 2806.8F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2301.743613223529, double1, 0.01);
      
      int int2 = 0;
      double double2 = MathUtils.factorialLog(0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = MathUtils.nextAfter((-432.568136593), 1.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-432.56813659299996), double3, 0.01);
      
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.indicator((byte) (-1));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, (-598858227));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 1354;
      double double0 = MathUtils.factorialLog(1354);
      assertEquals(8413.972595307363, double0, 0.01);
      
      float float0 = MathUtils.round((float) 1354, 1354);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double1 = MathUtils.round(0.0, 1354);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int1 = 12;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 1354, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = (-1853.67);
      double double1 = MathUtils.log(1470.7, (-1853.67));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
      
      int int0 = MathUtils.indicator(1);
      assertEquals(1, int0);
      
      double double2 = MathUtils.indicator(Double.NaN);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.lcm((short)0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      assertEquals(1.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1186.58;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1186.58, 0.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long long0 = MathUtils.indicator((-455L));
      assertEquals((-1L), long0);
      
      double double1 = MathUtils.cosh(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = MathUtils.indicator((double) 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      int int0 = MathUtils.gcd(0, 0);
      assertEquals(0, int0);
      
      long long1 = MathUtils.binomialCoefficient(2804, 0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      int int1 = MathUtils.subAndCheck(0, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double3 = MathUtils.nextAfter(1.0, 0.0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.9999999999999999, double3, 0.01);
      
      double double4 = MathUtils.factorialDouble(2804);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      
      double double5 = MathUtils.nextAfter(0.0, 1186.58);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(4.9E-324, double5, 0.01);
      
      double double6 = MathUtils.binomialCoefficientLog(351, (-1));
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double6, 0.01);
      
      long long2 = MathUtils.mulAndCheck((-455L), (-1630L));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(741650L, long2);
      
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double7 = MathUtils.log(0.9999999999999999, 1.0);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(-0.0, double7, 0.01);
      
      double double8 = MathUtils.scalb(1186.58, 0);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(1186.58, double8, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-1));
      assertEquals((byte) (-1), byte0);
      
      int int2 = MathUtils.hash(0.0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      float float0 = MathUtils.indicator((float) (-1630L));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.sign((-2077.338));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = MathUtils.sign(232.69517900020807);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      long long0 = MathUtils.sign(0L);
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = MathUtils.addAndCheck(2, 2);
      assertEquals(4, int0);
      
      float float0 = MathUtils.indicator(712.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean1 = MathUtils.equals(0.0, (double) 0L);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short short0 = MathUtils.sign((short)14);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(379.65915000474, 0.0);
      assertFalse(boolean0);
      
      long long0 = MathUtils.binomialCoefficient(18, 0);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.mulAndCheck((long) 18, (long) 18);
      assertFalse(long1 == long0);
      assertEquals(324L, long1);
      
      long long2 = MathUtils.indicator((long) 18);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(1L, long2);
      
      long long3 = MathUtils.sign(324L);
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertEquals(1L, long3);
      
      double double0 = MathUtils.binomialCoefficientLog(1535, 14);
      assertEquals(77.45732010773247, double0, 0.01);
      
      long long4 = MathUtils.addAndCheck(0L, (long) 0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals(0L, long4);
      
      short short0 = MathUtils.sign((short)1143);
      assertEquals((short)1, short0);
      
      int int0 = MathUtils.sign(18);
      assertEquals(1, int0);
      
      double double1 = MathUtils.binomialCoefficientLog((short)1143, (-1386));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int1 = MathUtils.indicator((-872));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double2 = MathUtils.nextAfter(0L, (-1386));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-4.9E-324), double2, 0.01);
      
      double double3 = MathUtils.factorialLog(1535);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(9730.785623784715, double3, 0.01);
      
      double double4 = MathUtils.cosh((-1.0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.543080634815244, double4, 0.01);
      
      int int2 = MathUtils.lcm(0, (-1477));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2237.0);
      doubleArray0[3] = (-5515.636800492);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-2617.34607633);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 0.0, (-2237.0), (-5515.636800492), Double.NaN, (-1.0), (-2617.34607633)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short short0 = MathUtils.sign((short)899);
      assertEquals((short)1, short0);
      
      short short1 = MathUtils.indicator((short)899);
      assertTrue(short1 == short0);
      assertEquals((short)1, short1);
      
      int int0 = MathUtils.hash((-1.0));
      assertEquals((-1074790400), int0);
      
      double double0 = MathUtils.log(1.0, 0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      float float0 = MathUtils.round(784.95306F, (int) (short)1);
      assertEquals(785.0F, float0, 0.01F);
      
      double double1 = MathUtils.indicator(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      int int1 = MathUtils.lcm(0, (short)899);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = MathUtils.hash((-354.11686));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1759593088, int2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, (int) (byte)1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float float0 = MathUtils.sign((-2087.4907F));
      assertEquals((-1.0F), float0, 0.01F);
      
      int int2 = (-3156);
      int int3 = MathUtils.lcm((-3156), (-3156));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(3156, int3);
      
      double double0 = MathUtils.binomialCoefficientDouble(3156, (byte)1);
      assertEquals(3156.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1518), (-3156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1069.1507236483772, (-850.954521));
      assertEquals((-853.5039803485763), double0, 0.01);
      
      int int0 = 6;
      int int1 = MathUtils.addAndCheck(1052, 6);
      assertFalse(int1 == int0);
      assertEquals(1058, int1);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial(1058);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-322.307296);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 244.86671;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-322.307296), (-1.0), 0.0, 244.86671, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.log(244.86671, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.indicator((-2896));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1068.465473248801;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 89.03;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1068.465473248801, 0.0, 89.03}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float float0 = MathUtils.round((-717.957F), 10);
      assertEquals((-717.957F), float0, 0.01F);
      
      float float1 = MathUtils.sign(0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = MathUtils.indicator(0.0F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      int int0 = MathUtils.hash(89.03);
      assertEquals((-985073223), int0);
      
      double double0 = MathUtils.binomialCoefficientDouble(10, 10);
      assertEquals(1.0, double0, 0.01);
      
      int int1 = MathUtils.addAndCheck(10, (-985073223));
      assertFalse(int1 == int0);
      assertEquals((-985073213), int1);
      
      // Undeclared exception!
      MathUtils.binomialCoefficientLog(0, (-985073223));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathUtils.equals(0.0, 1026.0403267349266);
      assertFalse(boolean0);
      
      double double1 = MathUtils.sign(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathUtils.log(0.0, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = MathUtils.normalizeAngle(0.0, 0.0);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      assertEquals(0L, long0);
      
      float float0 = MathUtils.indicator((float) 0);
      assertEquals(1.0F, float0, 0.01F);
      
      short short0 = MathUtils.indicator((short) (-2405));
      assertEquals((short) (-1), short0);
      
      double double4 = MathUtils.binomialCoefficientLog(1763, (short) (-2405));
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = MathUtils.nextAfter(1439.112445203, 1.0F);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1439.1124452029999, double5, 0.01);
      
      int int0 = MathUtils.mulAndCheck(0, (int) (short) (-2405));
      assertEquals(0, int0);
      
      int int1 = MathUtils.subAndCheck(3537, (-319));
      assertFalse(int1 == int0);
      assertEquals(3856, int1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = MathUtils.sign((byte)0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.lcm(840, 840);
      assertEquals(840, int0);
      
      int int1 = MathUtils.sign(840);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      short short0 = MathUtils.sign((short) (-1));
      assertEquals((short) (-1), short0);
      
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      float float0 = MathUtils.sign(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = MathUtils.normalizeAngle(0.0, 1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.normalizeAngle(840, 0.0F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.9468311620645409), double1, 0.01);
      
      long long0 = MathUtils.subAndCheck((long) 1, 517L);
      assertEquals((-516L), long0);
      
      int int2 = MathUtils.indicator((int) (byte)0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      long long1 = MathUtils.indicator(517L);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      long long2 = MathUtils.subAndCheck(0L, (long) (byte)1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1L), long2);
      
      short short1 = MathUtils.sign((short) (-1));
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      int int3 = MathUtils.addAndCheck((int) (short) (-1), 974);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(973, int3);
      
      short short2 = MathUtils.indicator((short) (-1));
      assertTrue(short2 == short1);
      assertTrue(short2 == short0);
      assertEquals((short) (-1), short2);
      
      float float1 = MathUtils.indicator((-1.0F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      int int4 = MathUtils.gcd(973, 516);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(974, 840);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.log((-2068.68559642425), (-2068.68559642425));
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = MathUtils.indicator(2979);
      assertEquals(1, int0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.lcm(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2593L), 899L);
      assertEquals((-2331107L), long0);
      
      short short0 = MathUtils.sign((short) (-615));
      assertEquals((short) (-1), short0);
      
      float float0 = MathUtils.indicator((-860.92F));
      assertEquals((-1.0F), float0, 0.01F);
      
      int int0 = MathUtils.lcm(12, 0);
      assertEquals(0, int0);
      
      short short1 = MathUtils.indicator((short) (-1));
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      long long1 = MathUtils.sign((-364L));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-364L);
      doubleArray0[1] = (double) (-2331107L);
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-364.0), (-2331107.0), 12.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.round(0.0, 0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float0 = MathUtils.sign(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = MathUtils.round((-1617.9F), 0);
      assertEquals((-1618.0F), float0, 0.01F);
      
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.nextAfter(0, (-1618.0F));
      assertEquals(double1, double0, 0.01);
      assertEquals((-4.9E-324), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3628800L, 3628800L);
      assertEquals(0L, long0);
      
      short short0 = MathUtils.indicator((short) (-1086));
      assertEquals((short) (-1), short0);
      
      double double0 = MathUtils.sinh((-622.099893));
      assertEquals((-7.473443005796568E269), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3628800L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 880.103847545;
      doubleArray0[3] = (double) (short) (-1086);
      doubleArray0[4] = (double) (short) (-1086);
      doubleArray0[5] = (-622.099893);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (-622.099893);
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-155200953), int0);
      assertArrayEquals(new double[] {3628800.0, 0.0, 880.103847545, (-1086.0), (-1086.0), (-622.099893), (-1.0), (-622.099893)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 1253);
      assertEquals(0, int0);
      
      int int1 = MathUtils.sign(2);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = MathUtils.gcd(1, 22);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      double double0 = MathUtils.log(22, 1);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      int int3 = MathUtils.hash(doubleArray0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, (-2067L));
      assertEquals((-2067L), long0);
      
      int int0 = MathUtils.lcm(1359, (-1614));
      assertEquals(731142, int0);
      
      int int1 = MathUtils.addAndCheck((-243), 3);
      assertEquals((-240), int1);
      assertFalse(int1 == int0);
      
      int int2 = MathUtils.mulAndCheck(731142, 1359);
      assertEquals(993621978, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double0 = MathUtils.factorialLog(1359);
      assertEquals(8450.037750891279, double0, 0.01);
      
      float float0 = MathUtils.indicator(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double1 = MathUtils.scalb((-1.0), (-1614));
      assertEquals((-4.436271510593304E130), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int3 = MathUtils.lcm((-422), 853);
      assertEquals(359966, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = MathUtils.gcd(3, 0);
      assertEquals(3, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      short short0 = MathUtils.indicator((short)0);
      assertEquals((short)1, short0);
      
      double double2 = MathUtils.SAFE_MIN;
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2317.8935063303857), (-2317.8935063303857));
      assertTrue(boolean0);
      
      int int0 = MathUtils.addAndCheck(52, 52);
      assertEquals(104, int0);
      
      float float0 = MathUtils.sign(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = MathUtils.equals((double) 52, 321.5);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = MathUtils.sign(1445L);
      assertEquals(1L, long0);
      
      int int1 = MathUtils.indicator(1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      double double0 = MathUtils.factorialDouble(8);
      assertEquals(40320.0, double0, 0.01);
      
      boolean boolean2 = MathUtils.equals((double) 1L, 4.9E-324);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = MathUtils.gcd(4, 1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.scalb((-1266.3840522569), 0);
      assertEquals((-1266.3840522569), double0, 0.01);
      
      long long0 = MathUtils.sign((long) 0);
      assertEquals(0L, long0);
      
      byte byte0 = MathUtils.sign((byte)4);
      assertEquals((byte)1, byte0);
      
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = MathUtils.nextAfter((byte)4, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3.9999999999999996, double2, 0.01);
      
      byte byte1 = MathUtils.indicator((byte) (-63));
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      long long1 = MathUtils.mulAndCheck((long) (byte)4, 1006L);
      assertFalse(long1 == long0);
      assertEquals(4024L, long1);
      
      long long2 = MathUtils.addAndCheck((long) (byte) (-63), 0L);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-63L), long2);
      
      double double3 = MathUtils.cosh(1006L);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      long long3 = MathUtils.sign(0L);
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(0L, long3);
      
      double double4 = MathUtils.binomialCoefficientDouble((byte)4, 0);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((-974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1L, 1L);
      assertEquals(1L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.hash((-2516.59897));
      assertEquals(1821477792, int0);
      
      int int1 = 1682;
      // Undeclared exception!
      try { 
        MathUtils.round(602.0F, 1821477792, 1682);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-1934.03970552), (-1934.03970552));
      assertEquals((-1934.0397055200003), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1109), (-1109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathUtils.sinh(1935.38446014);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.nextAfter(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      float float0 = MathUtils.indicator(0.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      int int0 = (-3142);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3142));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 0.0);
      assertEquals(4.9E-324, double0, 0.01);
      
      int int0 = MathUtils.hash((-2574.0));
      assertEquals((-1062986752), int0);
      
      double double1 = MathUtils.indicator(1070.411672413604);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1062986752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      assertEquals(0, int0);
      
      double double0 = MathUtils.sinh(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.round((-1.0), 0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      long long0 = MathUtils.addAndCheck((long) 0, 1999L);
      assertEquals(1999L, long0);
      
      float float0 = MathUtils.round(1748.0F, 1119);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double2 = MathUtils.factorialDouble(1801);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = MathUtils.round((-1.0), 8, 0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals((-1.0), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1083.8, 1083.8);
      assertTrue(boolean0);
      
      float float0 = MathUtils.round((-2676.102F), 3, 3);
      assertEquals((-2676.103F), float0, 0.01F);
      
      float float1 = MathUtils.sign((-2676.103F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      long long0 = MathUtils.addAndCheck((-1967L), (-2288L));
      assertEquals((-4255L), long0);
      
      double double0 = MathUtils.factorialLog(3);
      assertEquals(1.791759469228055, double0, 0.01);
      
      double double1 = MathUtils.log((-1.0F), (-1266.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = MathUtils.subAndCheck(3, 839);
      assertEquals((-836), int0);
      
      // Undeclared exception!
      try { 
        MathUtils.round((-1094.1), 839, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sinh(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = (-1424);
      double double2 = MathUtils.round((-795.0), (-1424));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      float float0 = MathUtils.sign(1.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1424), (-1424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
      
      int int0 = 712;
      double double0 = MathUtils.factorialDouble(712);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (int) (short)0, (-1634));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-127));
      assertEquals((byte) (-1), byte0);
      
      int int1 = MathUtils.mulAndCheck(0, (int) (short)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      float float0 = MathUtils.sign((-1025.8123F));
      assertEquals((-1.0F), float0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.sign((-110L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      assertEquals(0L, long0);
      
      long long1 = MathUtils.sign(0L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      double double0 = MathUtils.indicator((double) 0L);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = MathUtils.gcd(577, 577);
      assertEquals(577, int0);
      
      byte byte0 = MathUtils.sign((byte) (-2));
      assertEquals((byte) (-1), byte0);
      
      double double1 = MathUtils.indicator((-2227.27605637095));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      long long2 = MathUtils.indicator(0L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(1L, long2);
      
      double double2 = MathUtils.normalizeAngle((-1928.761468), 1.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.17642130413310042, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(474, 1465);
      assertEquals((-991), int0);
      
      float float0 = MathUtils.round(1.0F, 38);
      assertEquals(1.0F, float0, 0.01F);
      
      long long0 = MathUtils.subAndCheck(0L, 797L);
      assertEquals((-797L), long0);
      
      float float1 = MathUtils.sign(1.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      boolean boolean0 = MathUtils.equals((-187547.76093213333), (-203.1671231));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-797L), 380, 3867);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      float float0 = MathUtils.round(0.0F, 0);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
      
      double double0 = MathUtils.factorialDouble(732);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (int) (short)0, 732);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      int int0 = MathUtils.mulAndCheck(14, (int) (short)0);
      assertEquals(0, int0);
      
      float float0 = MathUtils.sign((-1025.8123F));
      assertEquals((-1.0F), float0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(15, 732);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = (-850.8327063);
      double double2 = MathUtils.round((-850.8327063), 0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-851.0), double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.scalb((-3868.132), 0);
      assertEquals((-3868.132), double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      byte byte0 = MathUtils.sign((byte)95);
      assertEquals((byte)1, byte0);
      
      int int0 = MathUtils.mulAndCheck(0, 0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.indicator(544);
      assertEquals(1, int0);
      
      double double0 = MathUtils.log(544, 544);
      assertEquals(1.0, double0, 0.01);
      
      int int1 = MathUtils.indicator(544);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      double double1 = MathUtils.normalizeAngle(113.58579447, 1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.488458940767444, double1, 0.01);
      
      float float0 = MathUtils.round(325.309F, 1, 1);
      assertEquals(325.3F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      assertEquals(1L, long0);
      
      int int0 = MathUtils.sign(0);
      assertEquals(0, int0);
      
      float float0 = MathUtils.round((float) 1L, 0);
      assertEquals(1.0F, float0, 0.01F);
      
      byte byte0 = MathUtils.indicator((byte) (-121));
      assertEquals((byte) (-1), byte0);
      
      int int1 = MathUtils.sign((int) (byte) (-1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = MathUtils.sinh(1L);
      assertEquals(1.1752011936438016, double0, 0.01);
      
      long long1 = MathUtils.mulAndCheck(24L, (long) (byte) (-121));
      assertFalse(long1 == long0);
      assertEquals((-2904L), long1);
      
      long long2 = MathUtils.binomialCoefficient(0, (-1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      
      byte byte1 = MathUtils.indicator((byte) (-1));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
      
      double double1 = MathUtils.round((-180.6522257959), (int) (byte) (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-180.0), double1, 0.01);
      
      long long3 = MathUtils.subAndCheck((long) (byte) (-1), 0L);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals((-1L), long3);
      
      long long4 = MathUtils.factorial(0);
      assertTrue(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertEquals(1L, long4);
      
      double double2 = MathUtils.cosh(1.1752011936438016);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.7737756783403533, double2, 0.01);
      
      int int2 = MathUtils.mulAndCheck((-1330), (-1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1330, int2);
      
      float float1 = MathUtils.indicator(21.6F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2421, (-3779));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathUtils.sign(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      byte byte0 = MathUtils.indicator((byte) (-36));
      assertEquals((byte) (-1), byte0);
      
      double double2 = MathUtils.normalizeAngle(Double.NaN, (byte) (-36));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      int int0 = MathUtils.mulAndCheck(2421, 13);
      assertEquals(31473, int0);
      
      int int1 = 18;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1851, 18);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1, 4489);
      assertEquals((-4488), int0);
      
      float float0 = MathUtils.round((float) 4489, 1);
      assertEquals(4489.0F, float0, 0.01F);
      
      int int1 = MathUtils.subAndCheck(4489, (-2010));
      assertFalse(int1 == int0);
      assertEquals(6499, int1);
      
      byte byte0 = MathUtils.sign((byte)86);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = (-1956);
      int int1 = MathUtils.gcd((-1956), (-1956));
      assertFalse(int1 == int0);
      assertEquals(1956, int1);
      
      int int2 = 3585;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(663, 3585);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.gcd(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      assertEquals(1L, long0);
      
      int int0 = MathUtils.sign(11);
      assertEquals(1, int0);
      
      double double0 = MathUtils.binomialCoefficientLog(1, 0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.sinh(1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.1752011936438016, double1, 0.01);
      
      long long1 = MathUtils.sign(0L);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1), 0);
      assertEquals((-1), int0);
      
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(0, 819);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-819), int2);
      
      int int3 = 3677;
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1), 0, 3677);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      assertEquals((short)1, short0);
      
      short short1 = MathUtils.sign((short) (-1));
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      double double0 = MathUtils.cosh(1.0);
      assertEquals(1.543080634815244, double0, 0.01);
      
      double double1 = MathUtils.log(0.0, (short) (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short short0 = (short)2846;
      short short1 = MathUtils.sign((short)2846);
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = 19;
      double double0 = MathUtils.scalb((short)1, 19);
      assertEquals(524288.0, double0, 0.01);
      
      int int3 = (-176);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-176), (-1207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.hash(1276.5594546284);
      assertEquals((-1589682064), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.lcm((-479), (-1));
      assertEquals(479, int0);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)13);
      assertEquals((byte)1, byte0);
      
      float float0 = MathUtils.indicator((-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      short short0 = MathUtils.sign((short) (byte)1);
      assertEquals((short)1, short0);
      
      float float1 = MathUtils.sign(0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      byte byte1 = MathUtils.indicator((byte)13);
      assertTrue(byte1 == byte0);
      assertEquals((byte)1, byte1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = MathUtils.sign((-3029.091F));
      assertEquals((-1.0F), float0, 0.01F);
      
      double double0 = MathUtils.nextAfter((-3029.091F), (-1.0F));
      assertEquals((-3029.0910644531245), double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientDouble(15, 15);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      long long0 = MathUtils.indicator((-1L));
      assertEquals((-1L), long0);
      
      int int0 = MathUtils.lcm(15, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(4718, 4718);
      assertEquals(0, int0);
      
      int int1 = MathUtils.mulAndCheck(4718, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = MathUtils.subAndCheck(207L, 207L);
      assertEquals(0L, long0);
      
      double double0 = MathUtils.sign(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.sign(201L);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.sign(0L);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      double double0 = MathUtils.binomialCoefficientDouble(928, (-1413));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean0 = MathUtils.equals(2.0, 2.0);
      assertTrue(boolean0);
      
      double double0 = MathUtils.round(2.0, 0);
      assertEquals(2.0, double0, 0.01);
      
      double double1 = MathUtils.scalb((-503.9778030393684), 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-503.9778030393684), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1626L, 0L);
      assertEquals(1626L, long0);
      
      int int0 = 0;
      long long1 = MathUtils.binomialCoefficient(0, 0);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      int int1 = MathUtils.mulAndCheck(5, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.sinh(5);
      assertEquals(74.20321057778875, double0, 0.01);
      
      float float0 = MathUtils.indicator((float) 1626L);
      assertEquals(1.0F, float0, 0.01F);
      
      double double1 = MathUtils.round((double) 0, 5);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      long long2 = MathUtils.mulAndCheck((-1L), (long) 0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1626L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1626.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      short short0 = MathUtils.indicator((short)451);
      assertEquals((short)1, short0);
      
      double double2 = MathUtils.normalizeAngle(0L, 2.2909552562);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int2 = MathUtils.mulAndCheck(1639, (-1057));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1732423), int2);
      
      long long3 = MathUtils.factorial(0);
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals(1L, long3);
      
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 2068, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      int int1 = 1800;
      int int2 = MathUtils.subAndCheck(0, 1800);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1800), int2);
      
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1800), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-1.0), (-1.0));
      assertEquals((-1.0000000000000002), double0, 0.01);
      
      double double1 = MathUtils.round((-1.0000000000000002), 0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      float float0 = MathUtils.indicator((-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      assertEquals(0L, long0);
      
      double double2 = MathUtils.cosh((-1.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.543080634815244, double2, 0.01);
      
      double double3 = MathUtils.indicator((-1.0));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      double double4 = MathUtils.sinh((-1.0));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-1.1752011936438016), double4, 0.01);
      
      float float1 = MathUtils.round(507.0F, 805);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(941);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathUtils.indicator(1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      long long0 = MathUtils.sign(2976L);
      assertEquals(1L, long0);
      
      double double2 = MathUtils.sinh(1.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.1752011936438016, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-2144), 0);
      assertEquals(0, int0);
      
      int int1 = MathUtils.addAndCheck(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.factorialDouble(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.sign((-759.6439791));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = MathUtils.log(0.0, (-583.3606628057408));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.indicator(14);
      assertEquals(1, int0);
      
      float float0 = MathUtils.sign((-620.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      byte byte0 = MathUtils.indicator((byte)0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.indicator((-846L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(5455.157F, 0, (-2016));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      assertEquals((byte)1, byte0);
      
      double double0 = MathUtils.normalizeAngle((byte)0, (byte)1);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = MathUtils.mulAndCheck((-2323L), (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.sinh(3018.52846);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6402373705728000L, (-2831L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, (-1));
      assertEquals(0, int0);
      
      short short0 = MathUtils.indicator((short) (-204));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2696L), (-2696L));
      assertEquals(7268416L, long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 7268416L;
      doubleArray0[1] = (double) (-2696L);
      doubleArray0[2] = (double) (-2696L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {7268416.0, (-2696.0), (-2696.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathUtils.log((-2696.0), (-2696.0));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.scalb(0, (-1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      assertEquals(0, int0);
      
      double double0 = MathUtils.round(1.0, 0);
      assertEquals(1.0, double0, 0.01);
      
      long long0 = MathUtils.binomialCoefficient(9, 0);
      assertEquals(1L, long0);
      
      long long1 = MathUtils.mulAndCheck(1L, 0L);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      int int1 = MathUtils.mulAndCheck((-1175), 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double1 = MathUtils.sinh(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-1505.4677638);
      double double1 = MathUtils.nextAfter((-1505.4677638), 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1505.4677637999998), double1, 0.01);
      
      int int0 = (-367);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-367), (-367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 2;
      double double0 = MathUtils.binomialCoefficientLog(2, 0);
      assertEquals(0.0, double0, 0.01);
      
      float float0 = MathUtils.indicator((-2427.127F));
      assertEquals((-1.0F), float0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 1926);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.lcm(3517, 0);
      assertEquals(0, int0);
      
      float float0 = MathUtils.round((float) 0, 0, 0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = MathUtils.normalizeAngle(1.0F, 1637.4906461181);
      assertEquals(1634.6281798666923, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 822);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.scalb(822, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(822.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 13);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      assertTrue(boolean0);
      
      int int0 = MathUtils.subAndCheck(13, (-1));
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)107);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-330), 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.round(4666.0, 0);
      assertEquals(4666.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-516.0), (-516.0));
      assertEquals((-516.0000000000001), double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-516.0000000000001);
      doubleArray0[1] = (-516.0);
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(268698592, int0);
      assertArrayEquals(new double[] {(-516.0000000000001), (-516.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathUtils.cosh(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      long long0 = MathUtils.subAndCheck(3438L, 9218868437227405312L);
      assertEquals((-9218868437227401874L), long0);
      
      double double2 = MathUtils.nextAfter(Double.NaN, 0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = MathUtils.binomialCoefficientLog(356, 356);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      int int0 = MathUtils.sign(356);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.sinh((-1754.10975657812));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      float float0 = MathUtils.round(0.0F, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(53, 0);
      assertEquals(53, int0);
      
      int int1 = MathUtils.gcd(0, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.indicator((double) 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 19);
      assertEquals(19, int0);
      
      long long0 = MathUtils.factorial(19);
      assertEquals(121645100408832000L, long0);
      
      double double0 = MathUtils.cosh(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      assertEquals(0L, long0);
      
      double double0 = MathUtils.normalizeAngle(1.0, 10.0);
      assertEquals(7.283185307179586, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-294L), (-294L));
      assertEquals((-588L), long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.sign((-481L));
      assertEquals((-1L), long0);
      
      double double0 = MathUtils.binomialCoefficientDouble(1231, 1231);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = MathUtils.binomialCoefficientLog(18, (-711));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-711);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 1.0, Double.NaN, (-711.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long long1 = MathUtils.mulAndCheck((long) 1231, (-1L));
      assertFalse(long1 == long0);
      assertEquals((-1231L), long1);
      
      float float0 = MathUtils.sign((-1605.919F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-2106185884);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2106185884), (-2106185884));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1350);
      assertEquals(8385.133756631158, double0, 0.01);
      
      double double1 = MathUtils.nextAfter(8385.133756631158, (-1789.0));
      assertEquals(double1, double0, 0.01);
      assertEquals(8385.133756631156, double1, 0.01);
      
      int int0 = (-1589);
      int int1 = MathUtils.gcd(1350, (-1589));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = MathUtils.subAndCheck((-1257L), (-9223372036854775807L));
      assertEquals(9223372036854774550L, long0);
      
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 2198;
      int int1 = MathUtils.indicator(2198);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long0 = MathUtils.sign(2173L);
      assertEquals(1L, long0);
      
      int int2 = MathUtils.lcm(1, 1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      double double0 = MathUtils.factorialDouble(1);
      assertEquals(1.0, double0, 0.01);
      
      byte byte0 = MathUtils.sign((byte)54);
      assertEquals((byte)1, byte0);
      
      double double1 = MathUtils.scalb(251.0, 2185);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-4.3730367537743644E43), double1, 0.01);
      
      float float0 = MathUtils.sign((float) (byte)54);
      assertEquals(1.0F, float0, 0.01F);
      
      double double2 = MathUtils.factorialDouble(2198);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = MathUtils.nextAfter((-1.0939563491531147E7), 1.0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.0939563491531145E7), double3, 0.01);
      
      double double4 = MathUtils.binomialCoefficientDouble((byte)54, (byte)1);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(54.0, double4, 0.01);
      
      long long1 = MathUtils.indicator((long) (byte)1);
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
      
      long long2 = MathUtils.mulAndCheck(228L, 578L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(131784L, long2);
      
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte)54);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.sign((-4.9E-324));
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean0 = MathUtils.equals((-1.0), (-1.0));
      assertTrue(boolean0);
      
      byte byte0 = MathUtils.sign((byte) (-88));
      assertEquals((byte) (-1), byte0);
      
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((byte) (-88), (byte) (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathUtils.indicator(Double.NaN);
      MathUtils.sign((-1342L));
      MathUtils.nextAfter(Double.NaN, (-1L));
      MathUtils.subAndCheck((-263L), (-1342L));
      MathUtils.indicator((short)2723);
      MathUtils.scalb((short)2723, (short)1);
      MathUtils.gcd(2486, 2952);
      MathUtils.mulAndCheck(2, 298);
      MathUtils.cosh((-2427.9821664175));
      MathUtils.indicator((-1.0F));
      MathUtils.sign((float) 596);
      MathUtils.indicator(1342L);
      MathUtils.cosh((-88.7485));
      MathUtils.binomialCoefficient(2020, (-421));
      MathUtils.sign((byte)1);
      MathUtils.subAndCheck(973L, (-578L));
      MathUtils.addAndCheck(2486, (-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1483, 2486);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = (-1789L);
      MathUtils.subAndCheck((-2881L), (-1789L));
      MathUtils.cosh((-3551.926));
      int int0 = (-150);
      MathUtils.addAndCheck((-150), (-150));
      MathUtils.subAndCheck((-709), 5);
      MathUtils.indicator(5040L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 279.7153151202;
      doubleArray0[1] = (double) (-1789L);
      doubleArray0[2] = (double) (-1092L);
      doubleArray0[3] = (double) 5040L;
      doubleArray0[4] = (-3551.926);
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 5040L;
      doubleArray0[1] = (double) (-1092L);
      MathUtils.equals(doubleArray0, doubleArray0);
      MathUtils.equals((double) (-1789L), (double) 1L);
      MathUtils.nextAfter(1118.711868373, 5040L);
      MathUtils.indicator(4772.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-714), (-709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathUtils.scalb((-1704.9992), 2597);
      long long0 = 612L;
      MathUtils.subAndCheck(612L, 612L);
      MathUtils.mulAndCheck((-256L), (long) 2597);
      MathUtils.factorialDouble(2597);
      MathUtils.indicator((float) 612L);
      MathUtils.sign((short) (-2288));
      MathUtils.gcd((short) (-2288), (short) (-2288));
      MathUtils.indicator((-4194.0F));
      MathUtils.gcd(2288, 2288);
      MathUtils.lcm((short) (-1), (short) (-1));
      MathUtils.subAndCheck((int) (short) (-2288), 2288);
      MathUtils.lcm(2288, (short) (-2288));
      MathUtils.gcd((-4576), (-4576));
      MathUtils.cosh((-2847.206142365853));
      MathUtils.binomialCoefficientLog(2288, 85);
      MathUtils.sign((short)77);
      MathUtils.cosh((-1386.0));
      int int0 = 403;
      MathUtils.gcd(4576, 403);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1042), (-3295));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.indicator((-2970));
      assertEquals((-1), int0);
      
      long long0 = MathUtils.indicator((long) (-1));
      assertEquals((-1L), long0);
      
      int int1 = MathUtils.subAndCheck((-2970), (-2970));
      assertEquals(0, int1);
      
      double double0 = MathUtils.nextAfter((-1.0), 5883.202895);
      assertEquals((-0.9999999999999999), double0, 0.01);
      
      float float0 = MathUtils.indicator((float) (-2970));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.sign(720);
      assertEquals(1, int0);
      
      int int1 = MathUtils.indicator((-2970));
      assertEquals((-1), int1);
      
      double double0 = MathUtils.sign((double) 1);
      long long0 = MathUtils.indicator((long) (-1));
      assertEquals((-1L), long0);
      
      MathUtils.subAndCheck(95, 95);
      float float0 = MathUtils.sign((float) (-1));
      assertEquals((-1.0F), float0, 0.01F);
      
      MathUtils.indicator((-146L));
      int int2 = MathUtils.subAndCheck(95, 95);
      assertEquals(0, int2);
      
      long long1 = MathUtils.mulAndCheck((-1L), (long) 0);
      assertEquals(0L, long1);
      
      double double1 = MathUtils.indicator(28.7);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathUtils.sign((short)0);
      int int0 = 712;
      MathUtils.factorialDouble(712);
      MathUtils.round(Double.POSITIVE_INFINITY, (int) (short)0, (-1634));
      MathUtils.indicator((byte) (-127));
      int int1 = 0;
      MathUtils.mulAndCheck(0, (int) (short)0);
      MathUtils.sign((-1025.8123F));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, (-7));
      MathUtils.sign((byte)95);
      MathUtils.mulAndCheck(0, (int) (byte)95);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathUtils.sign((-642L));
      MathUtils.addAndCheck(4503599627370495L, 0L);
      MathUtils.round((float) (-642L), 1, 1);
      MathUtils.round((-1.0), 0);
      MathUtils.binomialCoefficient(0, 0);
      MathUtils.sign((-1L));
      MathUtils.equals((double) 1L, 200.88708505484);
      MathUtils.factorialLog(1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.factorial(9);
      assertEquals(362880L, long0);
      
      int int0 = MathUtils.sign(9);
      assertEquals(1, int0);
      
      float float0 = MathUtils.round((float) 362880L, 9);
      assertEquals(362880.0F, float0, 0.01F);
      
      MathUtils.indicator((byte) (-121));
      MathUtils.sign((int) (byte) (-1));
      double double0 = MathUtils.sinh(362880L);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      long long1 = MathUtils.mulAndCheck((long) (byte) (-1), (long) (byte) (-121));
      assertEquals(121L, long1);
      
      long long2 = MathUtils.binomialCoefficient(9, (-1));
      assertEquals(0L, long2);
      
      MathUtils.indicator((byte) (-1));
      MathUtils.round((double) 1, (int) (byte) (-1));
      long long3 = MathUtils.subAndCheck((long) (byte) (-1), 69L);
      assertEquals((-70L), long3);
      
      int int1 = MathUtils.mulAndCheck((-1330), (-1));
      assertEquals(1330, int1);
      
      float float1 = MathUtils.round((float) (byte) (-1), (int) (byte) (-1));
      assertEquals(-0.0F, float1, 0.01F);
      
      MathUtils.sign((byte) (-103));
      MathUtils.sign((long) (byte) (-1));
      double double1 = MathUtils.scalb(0.0, 9);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.mulAndCheck(14L, 14L);
      MathUtils.sign(196L);
      double double0 = MathUtils.SAFE_MIN;
      MathUtils.gcd(577, 577);
      MathUtils.indicator((-2227.27605637095));
      MathUtils.indicator(0L);
      MathUtils.sign((float) 14L);
      MathUtils.mulAndCheck(1, 577);
      MathUtils.mulAndCheck(1L, (long) 1);
      MathUtils.mulAndCheck((-775L), (-775L));
      MathUtils.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2227.27605637095);
      doubleArray0[1] = (double) 14L;
      doubleArray0[3] = 2466.336921;
      doubleArray0[4] = (double) 14L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 14L;
      doubleArray0[7] = (-1902.5328096194544);
      MathUtils.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-994));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.lcm(840, 840);
      MathUtils.sign(840);
      MathUtils.sign((short) (-1));
      byte byte0 = (byte)0;
      MathUtils.indicator((byte)0);
      MathUtils.sign(0.0F);
      double double0 = MathUtils.EPSILON;
      MathUtils.normalizeAngle(840, 0.0F);
      MathUtils.subAndCheck((long) 1, 517L);
      MathUtils.indicator((int) (byte)0);
      MathUtils.indicator(517L);
      MathUtils.binomialCoefficient((byte)0, (short) (-1));
      MathUtils.sign((short) (-1));
      MathUtils.addAndCheck((int) (short) (-1), 974);
      MathUtils.indicator((short) (-1));
      MathUtils.indicator((-1.0F));
      MathUtils.gcd(973, 516);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(974, 840);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.equals(1083.8, 1083.8);
      MathUtils.round((-2676.102F), 3, 3);
      MathUtils.sign((-2676.103F));
      MathUtils.addAndCheck((-1967L), (-2288L));
      MathUtils.factorialLog(3);
      MathUtils.log((-1.0F), (-1266.6));
      MathUtils.subAndCheck(3, 839);
      int int0 = 11;
      // Undeclared exception!
      try { 
        MathUtils.round((-1094.1), 839, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.lcm(3000, 3000);
      MathUtils.subAndCheck((long) 3000, (long) 3000);
      MathUtils.sign(0L);
      MathUtils.cosh((-4.9E-324));
      MathUtils.cosh(3000);
      MathUtils.mulAndCheck(0L, 0L);
      MathUtils.scalb(351.045668838, 3000);
      MathUtils.sign((double) 0L);
      MathUtils.cosh((-2093.952733));
      // Undeclared exception!
      try { 
        MathUtils.factorial(3000);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
