/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 15:39:38 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cosh;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1265);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1265, openMapRealVector0.getDimension());
      
      int int0 = 0;
      RealVector realVector0 = null;
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3286));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector0.getDimension());
      
      int int0 = 0;
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
      assertTrue(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector0.getDimension());
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double double0 = openMapRealVector1.getNorm();
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector0.getDimension());
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector0.iterator();
      assertNotNull(iterator0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      
      Iterator<RealVector.Entry> iterator1 = openMapRealVector1.iterator();
      assertNotNull(iterator1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector0.getDimension());
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(iterator1, iterator0);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(0, (RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3789.412766332);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1584.540815));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-3789.412766332)}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 582.32912692;
      doubleArray0[1] = (-686.69734);
      doubleArray0[2] = (-569.76932222);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-796.637);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 662.28406602;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0.0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector0.sparseIterator();
      assertNotNull(iterator0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-686.69734);
      doubleArray1[1] = 662.28406602;
      doubleArray1[2] = (-796.637);
      doubleArray1[3] = (-569.76932222);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-796.637);
      doubleArray1[6] = 662.28406602;
      doubleArray1[7] = (-569.76932222);
      double double0 = openMapRealVector0.getL1Distance(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-686.69734), 662.28406602, (-796.637), (-569.76932222), 0.0, (-796.637), 662.28406602, (-569.76932222)}, doubleArray1, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      openMapRealVector0.hashCode();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAddToSelf(0.0);
      assertNotNull(openMapRealVector2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct(doubleArray0);
      assertNotNull(openMapRealMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.11111095942313305;
      double double0 = (-3735.55428);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-3735.55428));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.11111095942313305}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.11111095942313305}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, doubleArray0.length);
      
      int int0 = (-1699);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1699));
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-1699), openMapRealVector1.getDimension());
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.11111095942313305;
      doubleArray1[1] = 1.0E-12;
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.11111095942313305}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-1699), openMapRealVector1.getDimension());
      assertEquals((-5.889281507656066E-4), openMapRealVector2.getSparsity(), 0.01);
      assertEquals((-1698), openMapRealVector2.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector2.projection(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,698 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-4169), 1128);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-4169), openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-4169), openMapRealVector0.getDimension());
      assertEquals((-4169), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-4169), openMapRealVector0.getDimension());
      assertEquals((-4169), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(-0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals((-4169), openMapRealVector2.getDimension());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) 1128;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = (-2098.3);
      doubleArray0[5] = (double) 1128;
      doubleArray0[6] = 1014.145372366241;
      doubleArray0[7] = 0.07490822288864472;
      doubleArray0[8] = 1.0E-12;
      RealVector realVector0 = openMapRealVector0.add(doubleArray0);
      assertNotNull(realVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12, 1128.0, 1.0E-12, (-2098.3), 1128.0, 1014.145372366241, 0.07490822288864472, 1.0E-12}, doubleArray0, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-4169), openMapRealVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      openMapRealVector2.append(openMapRealVector1);
      // Undeclared exception!
      openMapRealVector0.isNaN();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-167.3272565), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      double double3 = Double.min((double) doubleArray0[2], 0.096999999999);
      assertEquals((-167.3272565), double3, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Double double4 = new Double((double) doubleArray0[2]);
      assertEquals((-167.3272565), (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double4;
      double double5 = Double.max(0.096999999999, (-3631.0));
      assertEquals(0.096999999999, double5, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      Double double6 = new Double(0.7937005259840998);
      assertEquals(0.7937005259840998, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[4] = double6;
      Double double7 = new Double(0.0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      
      doubleArray0[5] = double7;
      Double double8 = new Double((-4491.420361456));
      assertEquals((-4491.420361456), (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      
      doubleArray0[6] = double8;
      Double double9 = new Double((-1.0));
      assertEquals((-1.0), (double)double9, 0.01);
      assertNotNull(double9);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      
      doubleArray0[7] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      double double10 = openMapRealVector2.getNorm();
      assertEquals(4503.870794808988, double10, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector2.equals(doubleArray0[0]);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.add(openMapRealVector2);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.subtract(openMapRealVector2);
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(8, openMapRealVector4.getDimension());
      assertEquals(0.0, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      double double11 = openMapRealVector4.getLInfDistance((RealVector) openMapRealVector3);
      assertEquals(1.5874010519681996, double11, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(8, openMapRealVector4.getDimension());
      assertEquals(0.0, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      int int0 = openMapRealVector4.getDimension();
      assertEquals(8, int0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(8, openMapRealVector4.getDimension());
      assertEquals(0.0, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 1834;
      doubleArray0[6] = (double) 1834;
      doubleArray0[8] = (double) 1834;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(180);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(180, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(180, openMapRealVector0.getDimension());
      assertEquals(180, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(180, openMapRealVector0.getDimension());
      assertEquals(180, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(180, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(180, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(180, openMapRealVector2.getDimension());
      
      boolean boolean0 = openMapRealVector2.isNaN();
      assertFalse(boolean0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(180, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(180, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(1, 1834, 1834);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      
      boolean boolean1 = openMapRealVector3.isNaN();
      assertFalse(boolean1);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      
      openMapRealVector2.getL1Distance(openMapRealVector3);
      // Undeclared exception!
      openMapRealVector3.toArray();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1573.641202048));
      assertEquals((-1573.641202048), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3890.953653449);
      assertEquals(3890.953653449, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-728.642262188));
      assertEquals((-728.642262188), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(3890.953653449, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      assertEquals((-1573.641202048), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(202.943097);
      assertEquals(202.943097, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = Double.valueOf((-728.642262188));
      assertEquals((-728.642262188), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[3]);
      assertEquals(3890.953653449, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 57.2957763671875);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.add((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      
      openMapRealVector0.checkVectorDimensions(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.mapSubtract(1.0E-12);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      // Undeclared exception!
      try { 
        openMapRealVector2.getL1Distance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 2145572097;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(2143915086, 2145572097);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-3286), 0, 1.0E-12);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1, 0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(-0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector2.getDimension());
      
      double double0 = openMapRealVector2.getNorm();
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(-0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector1.iterator();
      assertNotNull(iterator0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      
      Iterator<RealVector.Entry> iterator1 = openMapRealVector2.iterator();
      assertNotNull(iterator1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-3286), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(-0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals((-3286), openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(iterator1, iterator0);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(0, (RealVector) openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 1631.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1631.0;
      doubleArray0[1] = 0.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-7), (-2288.7));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-7), openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-7), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-7), openMapRealVector1.getDimension());
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-7), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-7), openMapRealVector1.getDimension());
      assertEquals((-7), openMapRealVector2.getDimension());
      assertEquals(-0.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((-7), 484, (-7));
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals((-7), openMapRealVector3.getDimension());
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray1, 1776, (-755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,021 is larger than the maximum (1)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(9.669798024988253);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(15, doubleArray0.length);
      
      int int0 = openMapRealVector2.getMaxIndex();
      assertEquals(0, int0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector2.add((RealVector) openMapRealVector2);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(15, doubleArray0.length);
      
      openMapRealVector3.set((-106.38458714550268));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.projection(doubleArray0);
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector4.getDimension());
      assertEquals(0.06666666666666667, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector2.getSubVector(0, 3);
      assertNotNull(openMapRealVector5);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector5.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector5.getSparsity(), 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector5);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector6 = (OpenMapRealVector)openMapRealVector2.combine((-7.9181565659), 1.5707963267948966, doubleArray0);
      assertNotNull(openMapRealVector6);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector6.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector6.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector6);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector5);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector6, openMapRealVector4);
      assertNotSame(openMapRealVector6, openMapRealVector5);
      assertNotSame(openMapRealVector6, openMapRealVector3);
      assertNotSame(openMapRealVector6, openMapRealVector1);
      assertNotSame(openMapRealVector6, openMapRealVector2);
      assertNotSame(openMapRealVector6, openMapRealVector0);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector7 = openMapRealVector2.getSubVector(3, 3);
      assertNotNull(openMapRealVector7);
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, openMapRealVector7.getDimension());
      assertEquals(0.0, openMapRealVector7.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector7, openMapRealVector1);
      assertNotSame(openMapRealVector7, openMapRealVector6);
      assertNotSame(openMapRealVector7, openMapRealVector4);
      assertNotSame(openMapRealVector7, openMapRealVector3);
      assertNotSame(openMapRealVector7, openMapRealVector2);
      assertNotSame(openMapRealVector7, openMapRealVector0);
      assertNotSame(openMapRealVector7, openMapRealVector5);
      assertNotSame(openMapRealVector2, openMapRealVector6);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector5);
      assertNotSame(openMapRealVector2, openMapRealVector7);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector8 = (OpenMapRealVector)openMapRealVector2.projection((RealVector) openMapRealVector4);
      assertNotNull(openMapRealVector8);
      assertFalse(openMapRealVector8.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector8.equals((Object)openMapRealVector7));
      assertTrue(openMapRealVector8.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector8.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector8.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector8.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector8.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector8.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.06666666666666667, openMapRealVector8.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector8.getDimension());
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector4.getDimension());
      assertEquals(0.06666666666666667, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector8, openMapRealVector6);
      assertNotSame(openMapRealVector8, openMapRealVector7);
      assertNotSame(openMapRealVector8, openMapRealVector5);
      assertNotSame(openMapRealVector8, openMapRealVector4);
      assertNotSame(openMapRealVector8, openMapRealVector2);
      assertNotSame(openMapRealVector8, openMapRealVector0);
      assertNotSame(openMapRealVector8, openMapRealVector1);
      assertNotSame(openMapRealVector8, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector6);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector8);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector5);
      assertNotSame(openMapRealVector2, openMapRealVector7);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector8);
      assertNotSame(openMapRealVector4, openMapRealVector7);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector6);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-167.3272565), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = doubleArray0[1];
      Double double3 = new Double(0.7937005259840998);
      assertEquals(0.7937005259840998, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[4] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[5] = double4;
      Double double5 = new Double((-4491.420361456));
      assertEquals((-4491.420361456), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[6] = double5;
      Double double6 = new Double((-1.0));
      assertEquals((-1.0), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      double double7 = Double.min(3059.425202, (-1.0));
      assertEquals((-1.0), double7, 0.01);
      
      double double8 = Double.sum((double) doubleArray0[0], (double) doubleArray0[4]);
      assertEquals((-166.5335559740159), double8, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[7] = double6;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      double double9 = 1841.37433218;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1841.37433218);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 2101792506;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2101792506, 2101792506);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2101792506, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      // Undeclared exception!
      openMapRealVector0.mapAdd(2101792506);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 1834;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1834, 1834);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1834, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1834);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1834, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1834, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = (-1.0);
      // Undeclared exception!
      openMapRealVector1.isNaN();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2146932014;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2146932014);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2146932014, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(725, 725, 140.25);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(725, 0.7937005259840998);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector1.getNorm();
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.mapDivideToSelf(3890.953653449);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector2.getDimension());
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.subtract(openMapRealVector1);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 140.25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-203.238168);
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 3890.953653449;
      doubleArray0[6] = 1.0E-12;
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      
      double double1 = OpenMapRealVector.DEFAULT_ZERO_TOLERANCE;
      assertEquals(1.0E-12, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      openMapRealVector1.checkVectorDimensions(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      
      openMapRealVector3.getDistance((RealVector) openMapRealVector1);
      // Undeclared exception!
      openMapRealVector0.getDistance((RealVector) openMapRealVector3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.projection((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.append(openMapRealVector0);
      assertNotNull(openMapRealVector3);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      
      // Undeclared exception!
      try { 
        openMapRealVector1.mapToSelf((UnivariateRealFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 33;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(33, 33);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(33, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(33, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(33);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(33, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(33, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(33, 33);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(33, arrayRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(33, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(33, arrayRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(33, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      double double0 = 582.32912692;
      double double1 = 1636.562782486687;
      int int1 = (-766);
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector((-766));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 2574;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2574);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2574, openMapRealVector0.getDimension());
      
      int int1 = 2181;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 2181);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2574, openMapRealVector0.getDimension());
      assertEquals(4755, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = 1631.0;
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      OpenMapRealVector openMapRealVector1 = null;
      try {
        openMapRealVector1 = new OpenMapRealVector((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2088.843);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-46.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3872.581);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 140.25);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      assertEquals(46.0, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = openMapRealVector1.getMinValue();
      assertEquals((-3872.581), double1, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.add((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapAdd(-0.0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector3.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      double double2 = openMapRealVector3.getDistance(openMapRealVector1);
      assertEquals(0.0, double2, 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector3.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      double double3 = openMapRealVector1.getL1Distance(doubleArray0);
      assertEquals(46.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector3.sparseIterator();
      assertNotNull(iterator0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector3.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      openMapRealVector1.setEntry(0, 0.0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector1.isDefaultValue((-2088.843));
      assertFalse(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(306783379).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector3.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      assertNotNull(openMapRealVector_OpenMapEntry0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector3.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      openMapRealVector_OpenMapEntry0.setValue((-3754.7815095898386));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector3.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.append(doubleArray0);
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(18, openMapRealVector4.getDimension());
      assertEquals(0.2777777777777778, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector3.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector3.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (306,783,379)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-1122.2584351997);
      doubleArray0[2] = (-0.16666666666666666);
      doubleArray0[3] = 1201.55702121117;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.16666666666666666));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf((-426.76));
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector2.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = openMapRealVector0.getMinValue();
      assertEquals((-2.815533370538874), double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector0.setSubVector(0, (RealVector) openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(4, doubleArray0.length);
      
      double double1 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(1647.994807765601, double1, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(260).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn(1.0E-12).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      assertNotNull(openMapRealVector_OpenMapEntry0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double2 = openMapRealVector_OpenMapEntry0.getValue();
      assertEquals(1.0E-12, double2, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector0.setSubVector(0, doubleArray0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.append((-1.0));
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(5, openMapRealVector4.getDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector3.unitize();
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector_OpenMapEntry0.setValue(0.07842259109020233);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.25, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 260
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(15, doubleArray0.length);
      
      int int0 = openMapRealVector1.getMaxIndex();
      assertEquals(0, int0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.add((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(15, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.projection(doubleArray0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector3.getDimension());
      assertEquals(0.06666666666666667, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(15, doubleArray0.length);
      
      double double0 = openMapRealVector3.getLInfDistance((RealVector) openMapRealVector2);
      assertEquals(1.0E-12, double0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(15, openMapRealVector2.getDimension());
      assertEquals(15, openMapRealVector3.getDimension());
      assertEquals(0.06666666666666667, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-4722.9671895);
      doubleArray0[1] = 108.28674223919;
      doubleArray0[2] = 0.041666663879186654;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 3891.953653449;
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-4722.9671895), 108.28674223919, 0.041666663879186654, 1.0, (-1.0), 3891.953653449, 0.0}, doubleArray0, 0.01);
      assertEquals(0.8571428571428571, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-4722.9671895), 108.28674223919, 0.041666663879186654, 1.0, (-1.0), 3891.953653449, 0.0}, doubleArray0, 0.01);
      assertEquals(0.8571428571428571, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2145572097);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2145572097, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) 2145572097;
      doubleArray0[3] = (double) 2145572097;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(2145572097, 764, 2.145572097E9);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2145572097, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2145572097, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2145572097, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(2145572097, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      
      openMapRealVector0.dotProduct((RealVector) openMapRealVector2);
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = (double) 2145572097;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = (double) 2145572097;
      // Undeclared exception!
      try { 
        openMapRealVector1.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.add(openMapRealVector2);
      assertNotNull(openMapRealVector3);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.append(1.0);
      assertNotNull(openMapRealVector4);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1, openMapRealVector4.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(0, doubleArray0.length);
      
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = 1.0E-12;
      doubleArray1[2] = 0.0;
      // Undeclared exception!
      try { 
        openMapRealVector2.getEntry(772);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (772)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(174, 174, 174);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(174, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(174, 155, 853.52);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      
      double double0 = openMapRealVector1.dotProduct((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(174, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(174, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertEquals(174, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector2.mapMultiplyToSelf(155);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertEquals(174, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector3.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector4 = (OpenMapRealVector)openMapRealVector2.combineToSelf(0.0, 1.0, (RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(174, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertEquals(174, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector4.getDimension());
      assertEquals(0.0, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector4);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      
      double double1 = openMapRealVector1.getDistance(openMapRealVector2);
      assertEquals(0.0, double1, 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertEquals(174, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector4);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      
      double double2 = openMapRealVector1.getL1Norm();
      assertEquals(0.0, double2, 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector1.sparseIterator();
      assertNotNull(iterator0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      
      openMapRealVector1.hashCode();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector1.getSubVector(155, 1);
      assertNotNull(openMapRealVector5);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertEquals(1, openMapRealVector5.getDimension());
      assertEquals(0.0, openMapRealVector5.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      
      double double3 = openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(0.0, double3, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(174, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(174, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 582.32912692;
      doubleArray0[1] = (-686.69734);
      doubleArray0[2] = (-569.76932222);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-796.637);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 662.28406602;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(1.0E-12);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector0.sparseIterator();
      assertNotNull(iterator0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-686.69734);
      doubleArray1[1] = 662.28406602;
      doubleArray1[2] = (-796.637);
      doubleArray1[3] = (-569.76932222);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-796.637);
      doubleArray1[6] = 662.28406602;
      doubleArray1[7] = (-569.76932222);
      double double0 = openMapRealVector0.getL1Distance(doubleArray1);
      assertEquals(3.29771685516315E15, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-686.69734), 662.28406602, (-796.637), (-569.76932222), 0.0, (-796.637), 662.28406602, (-569.76932222)}, doubleArray1, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      openMapRealVector0.hashCode();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(582.32912692);
      assertNotNull(openMapRealVector2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAddToSelf(0.0);
      assertNotNull(openMapRealVector3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector3, openMapRealVector0);
      assertSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector2.outerProduct(doubleArray0);
      assertNotNull(openMapRealMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 302.873909;
      doubleArray2[1] = (-686.69734);
      doubleArray2[2] = (-686.69734);
      doubleArray2[3] = (-796.637);
      doubleArray2[4] = (-569.76932222);
      doubleArray2[5] = 662.28406602;
      doubleArray2[6] = (-686.69734);
      doubleArray2[7] = 3.29771685516315E15;
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.subtract(doubleArray2);
      assertNotNull(openMapRealVector4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {302.873909, (-686.69734), (-686.69734), (-796.637), (-569.76932222), 662.28406602, (-686.69734), 3.29771685516315E15}, doubleArray2, 0.01);
      assertEquals(8, openMapRealVector4.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-167.3272565), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((-167.3272565), (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.7937005259840998);
      assertEquals(0.7937005259840998, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-4491.420361456));
      assertEquals((-4491.420361456), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1.0));
      assertEquals((-1.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1841.37433218);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      double double8 = openMapRealVector2.getNorm();
      assertEquals(4491.420361456, double8, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector2.equals(doubleArray0[0]);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      double double9 = openMapRealVector2.dotProduct(openMapRealVector1);
      assertEquals(2.0172856863301545E7, double9, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotEquals(double9, double8, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      
      // Undeclared exception!
      try { 
        openMapRealVector2.add((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 582.32912692;
      doubleArray0[1] = (-686.69734);
      doubleArray0[2] = (-569.76932222);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-796.637);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 662.28406602;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(1.0E-12);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector0.sparseIterator();
      assertNotNull(iterator0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-686.69734);
      doubleArray1[1] = 662.28406602;
      doubleArray1[2] = (-796.637);
      doubleArray1[3] = (-569.76932222);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-796.637);
      doubleArray1[6] = 662.28406602;
      doubleArray1[7] = (-569.76932222);
      double double0 = openMapRealVector0.getL1Distance(doubleArray1);
      assertEquals(3.29771685516315E15, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-686.69734), 662.28406602, (-796.637), (-569.76932222), 0.0, (-796.637), 662.28406602, (-569.76932222)}, doubleArray1, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      openMapRealVector0.hashCode();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(582.32912692);
      assertNotNull(openMapRealVector2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAddToSelf(0.0);
      assertNotNull(openMapRealVector3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertSame(openMapRealVector3, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector2.outerProduct(doubleArray0);
      assertNotNull(openMapRealMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector1);
      assertNotNull(arrayRealVector0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, doubleArray0.length);
      
      double double1 = arrayRealVector0.cosine(doubleArray1);
      assertEquals((-0.2896663511487914), double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-686.69734), 662.28406602, (-796.637), (-569.76932222), 0.0, (-796.637), 662.28406602, (-569.76932222)}, doubleArray1, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {582.32912692, (-686.69734), (-569.76932222), 0.0, (-796.637), 0.0, 1.0E-12, 662.28406602}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(8, arrayRealVector1.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-167.3272565), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((-167.3272565), (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.7937005259840998);
      assertEquals(0.7937005259840998, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-4491.420361456));
      assertEquals((-4491.420361456), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1.0));
      assertEquals((-1.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = Double.isFinite(692.9748);
      assertTrue(boolean0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1841.37433218);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      double double8 = Double.max(498.920157778892, (double) doubleArray0[2]);
      assertEquals(498.920157778892, double8, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector1.getEntry(415);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (415)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 2574;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2574);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2574, openMapRealVector0.getDimension());
      
      int int1 = 2181;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 2181);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2574, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(4755, openMapRealVector1.getDimension());
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2574, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(4755, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(4755, openMapRealVector2.getDimension());
      
      double double0 = 1631.0;
      double double1 = openMapRealVector1.getNorm();
      assertEquals(0.0, double1, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2574, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(4755, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      
      // Undeclared exception!
      try { 
        openMapRealVector1.setSubVector(2574, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-167.3272565));
      assertEquals((-167.3272565), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-167.3272565), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((-167.3272565), (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.7937005259840998);
      assertEquals(0.7937005259840998, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals((-167.3272565), (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1.0));
      assertEquals((-1.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1841.37433218);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      double double8 = openMapRealVector0.dotProduct(openMapRealVector2);
      assertEquals(Double.NaN, double8, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 1797;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1797, (-1486));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1797, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1797, openMapRealVector0.getDimension());
      assertEquals(1797, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1797, openMapRealVector0.getDimension());
      assertEquals(1797, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(3594, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        openMapRealVector2.combineToSelf((double) 1797, 1521.4848743943, (RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,594 != 1,797
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 160;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 2389);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 160);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 160;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 160;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-665));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-665), openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-665), openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = (double) (-665);
      doubleArray0[6] = (double) (-665);
      doubleArray0[7] = (double) (-665);
      double double1 = openMapRealVector0.getMinValue();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-665), openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -665 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1640), 240);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-1640), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 2574;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 2181);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(2181, openMapRealVector1.getDimension());
      
      double double0 = 1631.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2574);
      assertNotNull(arrayRealVector0);
      assertEquals(2574, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      double double1 = openMapRealVector1.getNorm();
      assertEquals(0.0, double1, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(2181, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double double2 = openMapRealVector1.getEntry(0);
      assertEquals(0.0, double2, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(2181, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getEntry(2181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (2,181)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(173, 173);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(173, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(725, 725, 140.25);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(725, 0.7937005259840998);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector1.getNorm();
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.mapDivideToSelf(13.0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      
      openMapRealVector1.checkVectorDimensions(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      
      double double1 = openMapRealVector2.getDistance((RealVector) openMapRealVector1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      double double2 = openMapRealVector0.getDistance((RealVector) openMapRealVector2);
      assertEquals(0.0, double2, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      // Undeclared exception!
      try { 
        openMapRealVector1.getSubVector(725, 725);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (725)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1161.16562913648));
      assertEquals((-1161.16562913648), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1161.16562913648));
      assertEquals((-1161.16562913648), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1161.16562913648));
      assertEquals((-1161.16562913648), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2361.29);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(3, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1, 254);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(257, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0E-12;
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.append(doubleArray1);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12}, doubleArray1, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(257, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(258, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1874.254243798903;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1874.254243798903;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-46.0);
      doubleArray0[6] = (-3872.581);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 140.25);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      assertEquals(46.0, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = openMapRealVector1.getMinValue();
      assertEquals((-3872.581), double1, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd(-0.0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      double double2 = openMapRealVector2.getDistance(openMapRealVector1);
      assertEquals(0.0, double2, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      double double3 = openMapRealVector1.getL1Distance(doubleArray0);
      assertEquals(46.0, double3, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector2.sparseIterator();
      assertNotNull(iterator0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      openMapRealVector1.setEntry(0, 0.0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector1.isDefaultValue(1874.254243798903);
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(709).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      assertNotNull(openMapRealVector_OpenMapEntry0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      openMapRealVector_OpenMapEntry0.setValue((-3754.7815095898386));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.4444444444444444, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.append(doubleArray0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, 1874.254243798903, 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.3888888888888889, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(18, openMapRealVector3.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.4444444444444444, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector2.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (709)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(17);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 17;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 1.0E-12);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(arrayRealVector0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(17, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(17, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 17.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector2.getDimension());
      assertEquals(2, doubleArray0.length);
      
      double double1 = openMapRealVector2.getNorm();
      assertEquals(17.0, double1, 0.01);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 17.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      
      double double2 = openMapRealVector2.getL1Norm();
      assertEquals(17.000000000001, double2, 0.01);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 17.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.mapMultiply(1874.254243798903);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(17, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      
      double double3 = openMapRealVector0.getDistance(openMapRealVector2);
      assertEquals(17.0, double3, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 17.0}, doubleArray0, 0.01);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = openMapRealVector0.getData();
      assertNotNull(doubleArray1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(17, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getSubVector(3, 4753);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (4,755)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(725, 725, 140.25);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(725, 0.7937005259840998);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector1.getNorm();
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double double1 = 13.0;
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.mapDivideToSelf(13.0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.subtract(openMapRealVector1);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(725, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(725, openMapRealVector3.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 140.25;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = (-203.238168);
      doubleArray0[4] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector3.combineToSelf((-203.238168), (-2459.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 725 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3890.953653449;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector0.isDefaultValue((-20.0));
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.combineToSelf(1.0, (-5036.30774087392), doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      Cosh cosh0 = new Cosh();
      assertNotNull(cosh0);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.mapToSelf(cosh0);
      assertNotNull(openMapRealVector2);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector0, 0);
      assertNotNull(openMapRealVector3);
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = openMapRealVector3.getMaxIndex();
      assertEquals(0, int1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertTrue(int1 == int0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      double double1 = openMapRealVector3.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double1, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      openMapRealVector3.setSubVector(0, (RealVector) openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      openMapRealVector3.unitize();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.unitVector();
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector4.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector4.sparseIterator();
      assertNotNull(iterator0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector4.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      double double2 = openMapRealVector3.dotProduct((RealVector) openMapRealVector0);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      double double3 = openMapRealVector3.getLInfDistance(doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.unitVector();
      assertNotNull(openMapRealVector5);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector5.getDimension());
      assertEquals(1.0, openMapRealVector5.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector4.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.cosine((RealVector) openMapRealVector3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      int int0 = openMapRealVector0.getDimension();
      assertEquals(0, int0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray1 = openMapRealVector0.getData();
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4732);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4732, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      openMapRealVector0.mapAddToSelf(4732);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2761.08827216051;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.5707963267948966);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1543.289897274249);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-469.47723089199957);
      doubleArray0[7] = (-2906.469767645384);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {2761.08827216051, 0.0, (-1.5707963267948966), 1.0, (-1543.289897274249), 1.0, (-469.47723089199957), (-2906.469767645384)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      openMapRealVector0.set(0.0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {2761.08827216051, 0.0, (-1.5707963267948966), 1.0, (-1543.289897274249), 1.0, (-469.47723089199957), (-2906.469767645384)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      
      double double0 = openMapRealVector1.getL1Distance(openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {2761.08827216051, 0.0, (-1.5707963267948966), 1.0, (-1543.289897274249), 1.0, (-469.47723089199957), (-2906.469767645384)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2332);
      doubleArray0[2] = 688.32824277761;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) (-2332);
      doubleArray0[6] = (double) (-2332);
      doubleArray0[7] = (double) (-2332);
      doubleArray0[8] = (double) 32;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(2145697883, 2145697883, 32.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 1009;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1009, (-1040.308009353209));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1009, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1009;
      doubleArray0[1] = 549.0;
      doubleArray0[2] = 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1009, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1009, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1009, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1009, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      doubleArray0[3] = (-1040.308009353209);
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(1009, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,009)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.176342548272881E-8);
      assertEquals(1.176342548272881E-8, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(977.0274823825);
      assertEquals(977.0274823825, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(977.0274823825);
      assertEquals(977.0274823825, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double double3 = Double.min(977.0274823825, 0.0);
      assertEquals(0.0, double3, 0.01);
      
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(32, (-1852));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(32, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0E-12;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(32, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(64, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-96.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1894.7692630942486);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 539.677341390682;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-913.9716930161);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.6666666666666666, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(743.48175);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector2.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.subtract((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector4.getDimension());
      assertEquals(0.0, openMapRealVector4.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector4.setEntry(4064, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (4,064)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(3827.0);
      assertEquals(3827.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 3827.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, doubleArray0.length);
      
      double double1 = Double.max(2879.82277667133, 712.7);
      assertEquals(2879.82277667133, double1, 0.01);
      
      boolean boolean0 = openMapRealVector0.isDefaultValue(2852.0402477603);
      assertTrue(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = openMapRealVector0.isNaN();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = 1747;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 1747, 1.0E-12);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      // Undeclared exception!
      openMapRealVector1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1834;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1834, 1834);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1834, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1834);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1834, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1834, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = (-1.0);
      // Undeclared exception!
      openMapRealVector1.hashCode();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(228, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(228, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(228, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(228, doubleArray0.length);
      
      double[] doubleArray1 = openMapRealVector0.getData();
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(228, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(228, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.checkVectorDimensions((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2075.5051519285);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2075.5051519285));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-2075.5051519285)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-2075.5051519285)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 84;
      // Undeclared exception!
      try { 
        openMapRealVector0.setEntry(84, 84);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (84)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.503599627370496E15;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2768.2328;
      doubleArray0[5] = (-1360.8);
      doubleArray0[6] = (-1.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.mapMultiply(0.15);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.5714285714285714, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector1.combine(278.4235, 2768.2328, doubleArray0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector3.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(7, doubleArray0.length);
      
      double double0 = openMapRealVector1.dotProduct((RealVector) openMapRealVector0);
      assertEquals(2.028240960365167E31, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.mapAdd(0.0);
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.5714285714285714, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector4.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(7, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector0.sparseIterator();
      assertNotNull(iterator0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.add(openMapRealVector0);
      assertNotNull(openMapRealVector5);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.5714285714285714, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector4.getDimension());
      assertEquals(7, openMapRealVector5.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector5.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector6 = (OpenMapRealVector)openMapRealVector5.projection((RealVector) openMapRealVector4);
      assertNotNull(openMapRealVector6);
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector6.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector6.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector6.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.5714285714285714, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector4.getDimension());
      assertEquals(7, openMapRealVector5.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector5.getSparsity(), 0.01);
      assertNotSame(openMapRealVector6, openMapRealVector5);
      assertNotSame(openMapRealVector6, openMapRealVector4);
      assertNotSame(openMapRealVector6, openMapRealVector1);
      assertNotSame(openMapRealVector6, openMapRealVector0);
      assertNotSame(openMapRealVector6, openMapRealVector2);
      assertNotSame(openMapRealVector6, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector6);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector6);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector6);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector6);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector7 = openMapRealVector4.projection(doubleArray0);
      assertNotNull(openMapRealVector7);
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector7.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector7.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector7.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector6));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector7.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector7.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.5714285714285714, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector4.getDimension());
      assertNotSame(openMapRealVector7, openMapRealVector4);
      assertNotSame(openMapRealVector7, openMapRealVector5);
      assertNotSame(openMapRealVector7, openMapRealVector0);
      assertNotSame(openMapRealVector7, openMapRealVector2);
      assertNotSame(openMapRealVector7, openMapRealVector3);
      assertNotSame(openMapRealVector7, openMapRealVector6);
      assertNotSame(openMapRealVector7, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector6);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector7);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector6);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector7);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector6);
      assertNotSame(openMapRealVector4, openMapRealVector7);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(7, doubleArray0.length);
      
      double double1 = openMapRealVector7.getLInfDistance((RealVector) openMapRealVector2);
      assertEquals(3.8280596832649215E15, double1, 0.01);
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector7.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector7.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector7.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector6));
      assertNotEquals(double1, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector7));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector7.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector7.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.5714285714285714, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector2.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector4.getDimension());
      assertNotSame(openMapRealVector7, openMapRealVector4);
      assertNotSame(openMapRealVector7, openMapRealVector5);
      assertNotSame(openMapRealVector7, openMapRealVector0);
      assertNotSame(openMapRealVector7, openMapRealVector2);
      assertNotSame(openMapRealVector7, openMapRealVector3);
      assertNotSame(openMapRealVector7, openMapRealVector6);
      assertNotSame(openMapRealVector7, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector6);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector7);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector6);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector7);
      assertNotSame(openMapRealVector2, openMapRealVector7);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector5);
      assertNotSame(openMapRealVector2, openMapRealVector6);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector6);
      assertNotSame(openMapRealVector4, openMapRealVector7);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertFalse(openMapRealVector_OpenMapSparseIterator0.equals((Object)iterator0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector7));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector6));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      openMapRealVector_OpenMapSparseIterator0.forEachRemaining(consumer0);
      assertFalse(openMapRealVector_OpenMapSparseIterator0.equals((Object)iterator0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector7));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector6));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {4.503599627370496E15, 0.0, 0.0, 0.0, 2768.2328, (-1360.8), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.5714285714285714, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector_OpenMapSparseIterator0, iterator0);
      assertNotSame(openMapRealVector0, openMapRealVector6);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector7);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector6);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector7);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-2.6033824355191673E-8);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2.6033824355191673E-8));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, doubleArray0.length);
      
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.map(identity0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      double double1 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(0.0, double1, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAddToSelf((-2.6033824355191673E-8));
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.mapMultiply((-2.6033824355191673E-8));
      assertNotNull(openMapRealVector3);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotNull(openMapRealVector4);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector4.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector0.equals(identity0);
      assertFalse(boolean0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector0.append((RealVector) openMapRealVector3);
      assertNotNull(openMapRealVector5);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector5.getDimension());
      assertEquals(Double.NaN, openMapRealVector5.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector5.getL1Distance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RealVector realVector0 = null;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = null;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3890.953653449;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector0.isDefaultValue((-20.0));
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.combineToSelf(1.0, (-5036.30774087392), doubleArray0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0, 0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1, doubleArray0.length);
      
      int int1 = openMapRealVector2.getMaxIndex();
      assertEquals(0, int1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(int1 == int0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      double double1 = openMapRealVector2.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double1, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      openMapRealVector2.setSubVector(0, (RealVector) openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      openMapRealVector2.unitize();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.unitVector();
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector3.sparseIterator();
      assertNotNull(iterator0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      double double2 = openMapRealVector2.dotProduct((RealVector) openMapRealVector0);
      assertEquals(1.959214905059341E7, double2, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      double double3 = openMapRealVector2.getLInfDistance(doubleArray0);
      assertEquals(3891.953653449, double3, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.unitVector();
      assertNotNull(openMapRealVector4);
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {3890.953653449}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector4.getDimension());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.cosine((RealVector) openMapRealVector2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double double0 = 0.0;
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-12;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0E-12}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, doubleArray0.length);
      
      double double1 = arrayRealVector0.cosine(doubleArray0);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0E-12}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 31 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2252, 2252, (-394.48363495));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2252, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-394.48363495);
      doubleArray0[1] = (-394.48363495);
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 2852.0402477603;
      doubleArray0[4] = (double) 2252;
      doubleArray0[5] = (double) 2252;
      doubleArray0[6] = (double) 2252;
      doubleArray0[7] = 1.0E-12;
      doubleArray0[8] = (double) 2252;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-394.48363495), (-394.48363495), 1.0E-12, 2852.0402477603, 2252.0, 2252.0, 2252.0, 1.0E-12, 2252.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, doubleArray0.length);
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector1);
      assertEquals(5360.166438771409, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-394.48363495), (-394.48363495), 1.0E-12, 2852.0402477603, 2252.0, 2252.0, 2252.0, 1.0E-12, 2252.0}, doubleArray0, 0.01);
      assertEquals(2252, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      openMapRealVector0.getNorm();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-813.2));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1632.36);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.1921056801463227E-8;
      doubleArray0[3] = 1.3245471311735498E-8;
      doubleArray0[4] = (-454.8290217597249);
      doubleArray0[5] = (-977.1165886251307);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 891.7388580453871);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-1632.36), 0.0, 1.1921056801463227E-8, 1.3245471311735498E-8, (-454.8290217597249), (-977.1165886251307), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(439.54477);
      assertEquals(439.54477, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(439.54477, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-307.048776987498));
      assertEquals((-307.048776987498), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals(439.54477, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = double3;
      double double4 = Double.max((double) doubleArray0[2], 2376.5);
      assertEquals(2376.5, double4, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[4] = double5;
      Double double6 = new Double((double) doubleArray0[1]);
      assertEquals(439.54477, (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[5] = double6;
      Double double7 = new Double(0.0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      
      doubleArray0[6] = double7;
      Double double8 = new Double(439.54477);
      assertEquals(439.54477, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      
      doubleArray0[7] = double8;
      double double9 = Double.max(466.14568, (-1095.698974));
      assertEquals(466.14568, double9, 0.01);
      assertNotEquals(double9, double4, 0.01);
      
      Double double10 = new Double((double) doubleArray0[0]);
      assertEquals(439.54477, (double)double10, 0.01);
      assertNotNull(double10);
      assertNotEquals((double)double10, (double)double7, 0.01);
      assertNotEquals((double)double10, (double)double4, 0.01);
      assertEquals((double)double10, (double)double3, 0.01);
      assertEquals((double)double10, (double)double8, 0.01);
      assertEquals((double)double10, (double)double0, 0.01);
      assertNotEquals((double)double10, (double)double5, 0.01);
      assertNotEquals((double)double10, (double)double9, 0.01);
      assertNotEquals((double)double10, (double)double2, 0.01);
      assertEquals((double)double10, (double)double1, 0.01);
      assertEquals((double)double10, (double)double6, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double11 = Double.max((double) doubleArray0[3], 765.21099);
      assertEquals(765.21099, double11, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[8] = double10;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.7777777777777778, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.7777777777777778, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      
      RealVector.Entry realVector_Entry0 = openMapRealVector_OpenMapSparseIterator0.next();
      assertNotNull(realVector_Entry0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.7777777777777778, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) doubleArray0[1]);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.7777777777777778, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 1845;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1845, 1845);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1845, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double double0 = openMapRealVector0.getL1Norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1845, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double double1 = (-825.6152);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(1845, (-825.6152));
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1845, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.combine((double) 1845, (-825.6152), (RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1845, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1845, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1845, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      
      boolean boolean0 = openMapRealVector0.equals("points {0} and {1} are not decreasing ({2} < {3})");
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1845, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1845, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(1845, openMapRealVector3.getDimension());
      
      // Undeclared exception!
      openMapRealVector3.getLInfDistance((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 1024.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1024.0;
      doubleArray0[3] = 1.0E-12;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12, 1024.0, 1.0E-12}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      RealVector realVector0 = arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotNull(realVector0);
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0, realVector0.getDimension());
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      double double0 = openMapRealVector0.dotProduct((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotSame(arrayRealVector0, realVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 176);
      assertNotNull(openMapRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(176, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 28;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      String string0 = arrayRealVector0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = (double) 176;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      openMapRealVector1.setSubVector(28, doubleArray0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {28.0, 1.0E-12, 1.0E-12, 0.0, 1.0E-12, 1.0E-12, 176.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(176, openMapRealVector1.getDimension());
      assertEquals(0.03409090909090909, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector1.isNaN();
      assertFalse(boolean0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(176, openMapRealVector1.getDimension());
      assertEquals(0.03409090909090909, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 176
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-1122.2584351997);
      doubleArray0[2] = (-0.16666666666666666);
      doubleArray0[3] = 1201.55702121117;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.16666666666666666));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(2.0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf((-426.76));
      assertNotNull(openMapRealVector2);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector3.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.copy();
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(4, doubleArray0.length);
      
      double double0 = openMapRealVector0.getMinValue();
      assertEquals((-1.407766685269437), double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector0.setSubVector(0, (RealVector) openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector2.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertEquals(4, doubleArray0.length);
      
      double double1 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(1646.0685000138647, double1, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      assertNotNull(openMapRealVector_OpenMapEntry0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, doubleArray0.length);
      
      double double2 = openMapRealVector_OpenMapEntry0.getValue();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector4.setSubVector(0, doubleArray0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.append((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector5);
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector5.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector5.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector5.unitize();
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector5.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector5.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertEquals(4, doubleArray0.length);
      
      openMapRealVector_OpenMapEntry0.setValue(0.07842259109020233);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector6 = openMapRealVector4.ebeDivide(doubleArray0);
      assertNotNull(openMapRealVector6);
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector6.getDimension());
      assertEquals(1.0, openMapRealVector6.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertNotSame(openMapRealVector6, openMapRealVector3);
      assertNotSame(openMapRealVector6, openMapRealVector4);
      assertNotSame(openMapRealVector6, openMapRealVector0);
      assertNotSame(openMapRealVector6, openMapRealVector5);
      assertNotSame(openMapRealVector6, openMapRealVector2);
      assertNotSame(openMapRealVector6, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector0, openMapRealVector6);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector6);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector6);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector7 = openMapRealVector4.ebeDivide((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector7);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector7.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector6));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealVector7.getDimension());
      assertEquals(1.0, openMapRealVector7.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector0, openMapRealVector7);
      assertNotSame(openMapRealVector0, openMapRealVector6);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector7, openMapRealVector5);
      assertNotSame(openMapRealVector7, openMapRealVector2);
      assertNotSame(openMapRealVector7, openMapRealVector4);
      assertNotSame(openMapRealVector7, openMapRealVector0);
      assertNotSame(openMapRealVector7, openMapRealVector6);
      assertNotSame(openMapRealVector7, openMapRealVector1);
      assertNotSame(openMapRealVector7, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector6);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector7);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector7);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector6);
      assertEquals(4, doubleArray0.length);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector5.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector6));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector5.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector5.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = openMapRealVector_OpenMapSparseIterator0.hasNext();
      assertTrue(boolean1);
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(boolean1 == boolean0);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector6));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector7));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector6));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.5, (-1122.2584351997), (-0.16666666666666666), 1201.55702121117}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector5.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector5.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector4.getDimension());
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector7);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertNotSame(openMapRealVector5, openMapRealVector6);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector0, openMapRealVector7);
      assertNotSame(openMapRealVector0, openMapRealVector6);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector6);
      assertNotSame(openMapRealVector1, openMapRealVector7);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector6);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector7);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector7);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector6);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 1130.261497);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double[] doubleArray0 = new double[0];
      double double0 = openMapRealVector1.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(1130.261497);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.projection(doubleArray0);
      assertNotNull(openMapRealVector3);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 880;
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(880, 0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(880, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(0.0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(880, openMapRealVector0.getDimension());
      assertEquals(880, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 880;
      doubleArray0[1] = (double) 880;
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(doubleArray0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {880.0, 880.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(880, openMapRealVector0.getDimension());
      assertEquals(880, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(882, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector1.add((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(880, openMapRealVector0.getDimension());
      assertEquals(880, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(880, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(880, openMapRealVector0.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(880, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.01745329052209854;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.141592653589793);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.01745329052209854, 0.0, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.01745329052209854, 0.0, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.01745329052209854;
      doubleArray1[1] = 1.0E-12;
      doubleArray1[2] = 0.01745329052209854;
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray1);
      assertNotNull(openMapRealVector2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.01745329052209854, 0.0, (-3.141592653589793)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.01745329052209854, 1.0E-12, 0.01745329052209854}, doubleArray1, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector2.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1384.8));
      assertEquals((-1384.8), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum((-1384.8), 1.997844754509471E-9);
      assertEquals((-1384.799999998002), double1, 0.01);
      
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = Double.min(1.997844754509471E-9, (-3664.1646112059507));
      assertEquals((-3664.1646112059507), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Double.min((-3664.1646112059507), 0.0);
      assertEquals((-3664.1646112059507), double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      openMapRealVector0.set(579.118830018356);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      assertNotNull(openMapRealVector_OpenMapEntry0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double4 = openMapRealVector_OpenMapEntry0.getValue();
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double5 = Double.max(0.0, 0.0);
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double6 = openMapRealVector0.dotProduct((RealVector) openMapRealVector1);
      assertEquals((-801963.7558094193), double6, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      double double7 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(1963.918830018356, double7, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = openMapRealVector0.getData();
      assertNotNull(doubleArray1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {579.118830018356}, doubleArray1, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double8 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      assertEquals(1963.918830018356, double8, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double7, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      double double9 = openMapRealVector0.getLInfDistance(doubleArray1);
      assertEquals(0.0, double9, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double5, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {579.118830018356}, doubleArray1, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-49);
      double double0 = (-563.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-49), (-563.0));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-49), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-49);
      doubleArray0[1] = (double) (-49);
      doubleArray0[2] = (double) (-49);
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = (-563.0);
      doubleArray0[5] = (double) (-49);
      doubleArray0[6] = (double) (-49);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -49 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      double double0 = 5.669184079525E-24;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 5.669184079525E-24);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 5.669184079525E-24;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 0.0, 5.669184079525E-24, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(272, 0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(272, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 272;
      doubleArray0[1] = (double) 272;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 8.0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 272 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-2960.27621841886);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1503, 1503, (-2960.27621841886));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1503, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[5];
      RealVector realVector0 = null;
      double double1 = openMapRealVector0.getL1Norm();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1503, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.append((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-457);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-457), (-457));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-457), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      int int1 = openMapRealVector0.hashCode();
      assertFalse(int1 == int0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-457), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      int int2 = 535;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 535);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-457), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(78, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector1.getDistance(openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-457), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(78, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-457), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(78, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 88;
      int int1 = 22;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(88, 22);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(88, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(88, openMapRealVector0.getDimension());
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      doubleArray0[2] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 88 != 3
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      Logistic logistic0 = new Logistic(1.0E-12, 1.0E-12, 0.0, (-489.2535), (-489.2535), 3499.38170120298);
      assertNotNull(logistic0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapToSelf(logistic0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.add((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-96.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1894.7692630942486);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 539.677341390682;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-913.9716930161);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(0.6666666666666666, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(743.48175);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector2.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.subtract((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {(-96.0), 0.0, 0.0, (-1894.7692630942486), (-1.0), 1.0, 539.677341390682, 0.0, (-913.9716930161)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector3.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector3.setEntry(4064, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (4,064)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1522), 1.1921056801463227E-8);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-1522), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-1522), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-1522), openMapRealVector1.getDimension());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.1921056801463227E-8;
      doubleArray0[4] = 312.0907;
      doubleArray0[5] = 1.1921056801463227E-8;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector1.append(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,522)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.16666666666666666;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1470.7;
      doubleArray0[3] = (-1853.6679210364);
      doubleArray0[4] = 0.031;
      doubleArray0[5] = 0.375;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.16666666666666666, 0.0, 1470.7, (-1853.6679210364), 0.031, 0.375}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.8333333333333334, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(6, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.16666666666666666, 0.0, 1470.7, (-1853.6679210364), 0.031, 0.375}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.8333333333333334, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.8333333333333334, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(6, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.16666666666666666, 0.0, 1470.7, (-1853.6679210364), 0.031, 0.375}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.8333333333333334, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.8333333333333334, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(6, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(6, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector();
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      
      boolean boolean0 = openMapRealVector_OpenMapSparseIterator0.hasNext();
      assertFalse(boolean0);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, openMapRealVector3.getSparsity(), 0.01);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      
      // Undeclared exception!
      try { 
        openMapRealVector2.setEntry(1398, (-3035.1662017743324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,398)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-380);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-380));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-380), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      openMapRealVector0.set((-380));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-380), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((-380));
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-380), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-380), openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-380), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-380), openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        openMapRealVector0.getEntry((-380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-380)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 186.68505287;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(Double.NaN, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 1.0E-12;
      double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2848), 0, 0.3333333333332802);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-2848), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-2848));
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals((-2848), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-5696), openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      
      // Undeclared exception!
      try { 
        openMapRealVector1.subtract((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,696 != -2,848
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 831.66465713753;
      doubleArray0[8] = 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 350.174455);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12, 1.0E-12, 1.0E-12, 0.0, 1.0E-12, 1.0E-12, 831.66465713753, 1.0E-12}, doubleArray0, 0.01);
      assertEquals(0.1111111111111111, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.add(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(689, 689);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(689, openMapRealVector0.getDimension());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(689, openMapRealVector0.getDimension());
      
      int int0 = openMapRealVector0.getDimension();
      assertEquals(689, int0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(689, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 689 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2675.038369;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3522.071689011294);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4195.938659;
      doubleArray0[6] = (-1405.8170018);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {2675.038369, 0.0, (-3522.071689011294), 0.0, 0.0, 4195.938659, (-1405.8170018)}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(222);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(222, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 222;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = (double) 222;
      doubleArray0[4] = 1.0E-12;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(222);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      
      double double0 = arrayRealVector0.getMaxValue();
      assertEquals(0.0, double0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {222.0, 1.0E-12, 1.0E-12, 222.0, 1.0E-12}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertEquals(227, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(5, doubleArray0.length);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {222.0, 1.0E-12, 1.0E-12, 222.0, 1.0E-12}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertEquals(227, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(454, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(5, doubleArray0.length);
      
      double double1 = arrayRealVector0.getMinValue();
      assertEquals(0.0, double1, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertEquals(double1, double0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 222 != 454
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1952);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1952, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) 1952;
      doubleArray0[2] = 1.0E-12;
      boolean boolean0 = openMapRealVector0.equals(arrayRealVector0);
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1952, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      doubleArray0[3] = (double) 31;
      doubleArray0[4] = (double) 1952;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {31.0, 1952.0, 1.0E-12, 31.0, 1952.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1952, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1957, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(5, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector1);
      assertNotNull(openMapRealVector1);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {31.0, 1952.0, 1.0E-12, 31.0, 1952.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1952, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1957, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0025150905432595573, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1988, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3638);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3638, openMapRealVector0.getDimension());
      
      openMapRealVector0.setEntry(429, 0.0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3638, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try { 
        openMapRealVector0.checkVectorDimensions(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,638 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1874.254243798903;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2088.843);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-46.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3872.581);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 140.25);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      assertEquals(46.0, double0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = openMapRealVector1.getMinValue();
      assertEquals((-3872.581), double1, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd(-0.0);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(9, doubleArray0.length);
      
      double double2 = openMapRealVector2.getDistance(openMapRealVector1);
      assertEquals(0.0, double2, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(9, doubleArray0.length);
      
      double double3 = openMapRealVector1.getL1Distance(doubleArray0);
      assertEquals(46.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      Iterator<RealVector.Entry> iterator0 = openMapRealVector2.sparseIterator();
      assertNotNull(iterator0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(9, doubleArray0.length);
      
      openMapRealVector1.setEntry(0, 0.0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector1.isDefaultValue((-2088.843));
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      assertNotNull(openMapRealVector_OpenMapEntry0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(9, doubleArray0.length);
      
      openMapRealVector_OpenMapEntry0.setValue((-3754.7815095898386));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.append(doubleArray0);
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, openMapRealVector3.getSparsity(), 0.01);
      assertEquals(18, openMapRealVector3.getDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = openMapRealVector2.outerProduct(doubleArray0);
      assertNotNull(realMatrix0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {1874.254243798903, 0.0, (-2088.843), 0.0, (-46.0), 0.0, (-3872.581), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        openMapRealVector2.getDistance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[0];
      double double0 = openMapRealVector0.getL1Distance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = openMapRealVector0.isDefaultValue(1.0);
      assertFalse(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      int int0 = (-1815);
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector((-1815), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,815)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1587.0707777220687);
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(1587.0707777220687);
      doubleArray0[2] = double2;
      Double double3 = new Double(1587.0707777220687);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      Double.min((double) doubleArray0[1], (double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      doubleArray0[5] = double5;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      
      openMapRealVector0.getSparsity();
      openMapRealVector0.hashCode();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd(0.0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.mapAdd((double) doubleArray0[5]);
      double double6 = openMapRealVector4.getDistance((RealVector) openMapRealVector1);
      assertEquals(3887.513591101128, double6, 0.01);
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0E-12;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = (double) doubleArray0[3];
      doubleArray1[7] = (double) doubleArray0[1];
      OpenMapRealVector openMapRealVector5 = openMapRealVector1.append(doubleArray1);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertEquals(0.8571428571428571, openMapRealVector5.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(3997.1);
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(782.1);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(3997.1);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.75);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 782.1;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) doubleArray0[4];
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-3620.03256));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3620.03256);
      doubleArray1[1] = (-3620.03256);
      doubleArray1[2] = (-3620.03256);
      doubleArray1[3] = 1.0E-12;
      doubleArray1[4] = 1.0E-12;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = (-3620.03256);
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0E-12);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
      Double.sum(0.0, 432.3679825812);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.mapMultiply(432.3679825812);
      double[] doubleArray1 = openMapRealVector1.getData();
      Double.min(1.0E-12, 1.1921056801463227E-8);
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(114, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (114)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-200.0);
      doubleArray0[3] = 2334.504737405929;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 3.0;
      doubleArray0[7] = 13.07;
      doubleArray0[8] = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.mapDivide(0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      openMapRealVector1.getLInfNorm();
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0, 0);
      openMapRealVector1.getL1Distance(openMapRealVector2);
      // Undeclared exception!
      try { 
        openMapRealVector2.getSubVector(0, (-139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-140)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4033, 3208.762656868017);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1324, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-194.402457904);
      doubleArray0[1] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,324 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) 31);
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 32 != 31
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      openMapRealVector0.set(0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector1 = null;
      try {
        openMapRealVector1 = new OpenMapRealVector((Double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-736);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-736));
      // Undeclared exception!
      try { 
        openMapRealVector0.getSubVector((-686), (-686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-686)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(5552.38596);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-100.5324));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = openMapRealVector0.getData();
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01);
      assertArrayEquals(new double[] {5552.38596, 0.0, (-100.5324), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.030589580535888672);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 1.0E-12);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      openMapRealVector0.set((-1));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1), (-1), 1.0E-12);
      openMapRealVector1.set(0.6931470632553101);
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector((-1), (RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector0.getSubVector(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double.max((double) doubleArray0[2], 1.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract((RealVector) openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(170, 1.2675934823758863E-8);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1172.99682196);
      doubleArray0[0] = double0;
      doubleArray0[1] = (Double) 1.0E-12;
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.add((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 170 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-866);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-866), (-866), (-866));
      double[] doubleArray0 = new double[3];
      double double0 = (-2055.67);
      doubleArray0[0] = (-2055.67);
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -866 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 1.0E-12;
      doubleArray0[8] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(2296, (-1173), (-1173));
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,296
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-512.7529803);
      doubleArray0[3] = (-4316.4);
      doubleArray0[4] = (-84.101036048);
      doubleArray0[5] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-512.7529803));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      double double0 = openMapRealVector1.getL1Distance(openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(31, 0.1538461446762085);
      openMapRealVector0.dotProduct((RealVector) openMapRealVector1);
      openMapRealVector0.isNaN();
      // Undeclared exception!
      try { 
        openMapRealVector0.append((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1, (-1));
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.mapAdd((-494.279605));
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-494.279605);
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 30 != 3
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[6];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0, 0);
      openMapRealVector0.dotProduct(openMapRealVector1);
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(679, 679);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 679;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = (double) 679;
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 679 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 8.251545029714408E-9;
      doubleArray0[1] = (-1946.4458902);
      doubleArray0[2] = 1.225743062930824E-8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 5005);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      boolean boolean0 = openMapRealVector_OpenMapSparseIterator0.hasNext();
      assertEquals(5.990415335463259E-4, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(1391.908745214);
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      doubleArray0[1] = double1;
      Double.isFinite(0.0);
      Double double2 = new Double(4018.26);
      doubleArray0[2] = double2;
      Double double3 = new Double(4018.26);
      doubleArray0[3] = double3;
      Double double4 = new Double(4018.26);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[2]);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[0]);
      doubleArray0[6] = double6;
      Double.sum((-1.0), (double) doubleArray0[0]);
      Double.max((double) doubleArray0[2], (-3119.48044236562));
      Double double7 = Double.valueOf(1134.9);
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      openMapRealVector0.mapAddToSelf(1134.9);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = 1391.908745214;
      doubleArray1[2] = (double) doubleArray0[2];
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = 1.0E-12;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (double) doubleArray0[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector1.getMinIndex();
      openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);
      double[] doubleArray0 = openMapRealVector0.toArray();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      openMapRealVector2.equals(openMapRealVector0);
      openMapRealVector2.append(1.2675934823758863E-8);
      openMapRealVector2.combine(0.0, 2300.6, doubleArray0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((double) 0);
      openMapRealVector1.mapSubtractToSelf(0.0);
      openMapRealVector3.setEntry(0, 1.0E-12);
      openMapRealVector_OpenMapEntry0.setIndex((-3343));
      openMapRealVector_OpenMapEntry0.getValue();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-3343), 0.0, 0.0);
      openMapRealVector2.map(harmonicOscillator0);
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector1.isInfinite();
      openMapRealVector2.append(doubleArray0);
      openMapRealVector1.getDistance(openMapRealVector2);
      // Undeclared exception!
      try { 
        openMapRealVector1.setEntry(0, (-1611.122880462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-3312.906));
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-250.5218712744883));
      doubleArray0[2] = double2;
      Double double3 = new Double((-0.3058015757857271));
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      doubleArray0[4] = double4;
      Double double5 = new Double(1.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      doubleArray0[6] = double6;
      Double double7 = Double.valueOf(1.0);
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[6]);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      assertEquals(16, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1848);
      openMapRealVector0.getLInfNorm();
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(1848, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,848)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0E-12);
      doubleArray0[2] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 31);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3348.5006;
      doubleArray0[2] = 1236.85;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(2.0);
      double double0 = openMapRealVector1.getMaxValue();
      assertEquals(3348.5006, double0, 0.01);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.append(doubleArray0);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      
      openMapRealVector1.isDefaultValue(1236.85);
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1552), 2714, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.append(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,552)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.06666666666666667;
      doubleArray0[1] = (-1895.244);
      doubleArray0[2] = 1.9699272335463627E-8;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2092.11361457391;
      doubleArray0[5] = 2469.7218967049;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue((-1895.244));
      assertEquals(0.8333333333333334, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
      openMapRealVector1.getL1Norm();
      openMapRealVector1.getMaxIndex();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = 1.0E-12;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        openMapRealVector2.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.058823529411764705;
      doubleArray0[1] = 335.8354693;
      doubleArray0[2] = 788.4329324622;
      doubleArray0[3] = (-291.7586582819);
      doubleArray0[4] = 1.1921056801463227E-8;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
      openMapRealVector0.mapDivideToSelf(0.0);
      openMapRealVector0.isDefaultValue((-1828.21191833543));
      openMapRealVector0.hashCode();
      openMapRealVector0.isInfinite();
      openMapRealVector0.getSparsity();
      openMapRealVector0.getDistance(doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = 1.1921056801463227E-8;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2521.4371627);
      // Undeclared exception!
      try { 
        openMapRealVector0.projection(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 660.5449;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 1.0E-12;
      doubleArray0[8] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2793.33;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1183.415911860297;
      doubleArray0[4] = (-147.4609);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-2632), 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 91;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1145), 91, 91);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector1.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      int int1 = (-1546);
      openMapRealVector_OpenMapEntry0.setIndex((-1546));
      openMapRealVector2.mapSubtract(1593.2449);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.mapAddToSelf(1066.8853866);
      double[] doubleArray0 = new double[2];
      openMapRealVector3.copy();
      openMapRealVector_OpenMapEntry0.getValue();
      doubleArray0[0] = (double) (-1546);
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        openMapRealVector3.getL1Distance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,145 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 1265;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1265);
      int int1 = 0;
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-609));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-609);
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      openMapRealVector1.unitize();
      openMapRealVector0.getDistance(openMapRealVector1);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -609 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4680.448963;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector0.isDefaultValue((-2083.4498464256653));
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 1161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,161 is larger than the maximum (1)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 544.35112838;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.mapDivide(2562.783207060769);
      openMapRealVector0.isDefaultValue((-7.44321345601866E-11));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      openMapRealVector1.add((RealVector) openMapRealVector0);
      openMapRealVector1.mapAddToSelf(2562.783207060769);
      openMapRealVector0.isNaN();
      openMapRealVector1.projection((RealVector) openMapRealVector0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      int int0 = 36;
      openMapRealVector_OpenMapEntry0.setIndex(36);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 1558, 0);
      openMapRealVector0.isDefaultValue(1558);
      openMapRealVector0.isNaN();
      openMapRealVector0.mapSubtract(0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(204, 204);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      openMapRealVector_OpenMapSparseIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.subtract(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-3239), 0.0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1859.722851;
      doubleArray0[1] = (-876.2960603174865);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3437.9;
      doubleArray0[4] = 0.003;
      doubleArray0[5] = 2323.954517890665;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertEquals(0.8333333333333334, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1235.2941803184;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3466.8441823316);
      doubleArray0[5] = (-1282.44645554);
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((-1.0));
      assertEquals(0.7142857142857143, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.8571428571428571, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = (double) (-577);
      doubleArray1[2] = (double) (-577);
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector((-577), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-577)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.875);
      Double.min(0.875, (double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double.isFinite(0.875);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.875);
      Double.max(0.0, 3185.036047118);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3185.036047118;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) doubleArray0[1];
      doubleArray1[5] = 1.0E-6;
      doubleArray1[6] = (-1489.3835956164155);
      openMapRealVector0.add(doubleArray1);
      Double.sum((-1489.3835956164155), (-880.47743695));
      openMapRealVector0.sparseIterator();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 243);
      // Undeclared exception!
      try { 
        openMapRealVector1.subtract(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 246 != 3
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) 0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      openMapRealVector0.getDimension();
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      // Undeclared exception!
      try { 
        openMapRealVector0.checkVectorDimensions((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1610), (-1610));
      boolean boolean0 = openMapRealVector0.isDefaultValue((-1610));
      assertFalse(boolean0);
      assertEquals((-1610), openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1324, 1324);
      Double[] doubleArray0 = new Double[5];
      openMapRealVector0.set((-1.0));
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1324);
      openMapRealVector1.mapAddToSelf(1.0E-12);
      // Undeclared exception!
      try { 
        openMapRealVector0.add(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,324 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3555.32201;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-805.0772708968);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-284.5248018489);
      doubleArray0[6] = (-119.7110016892);
      doubleArray0[7] = (-2769.0);
      doubleArray0[8] = (-2477.17835013547);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 3555.32201);
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-284.5248018489);
      doubleArray1[1] = (Double) 3555.32201;
      doubleArray1[2] = (Double) 3555.32201;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1, (-3631.0));
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(10950.4908318489, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3286));
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-3286), 0, 1.0E-12);
      openMapRealVector0.equals(openMapRealVector1);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract((RealVector) openMapRealVector1);
      openMapRealVector2.getNorm();
      openMapRealVector0.iterator();
      openMapRealVector2.iterator();
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(0, (RealVector) openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1265);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-1.0);
      doubleArray0[6] = (double) 1834;
      doubleArray0[8] = (double) 1834;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(180);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertFalse(boolean0);
      assertEquals(180, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(180, 1834, 1834);
      assertEquals(180, openMapRealVector3.getDimension());
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 582.32912692;
      doubleArray0[1] = (-686.69734);
      doubleArray0[2] = (-569.76932222);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-796.637);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = 662.28406602;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector0.sparseIterator();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-686.69734);
      doubleArray1[1] = 662.28406602;
      doubleArray1[2] = (-796.637);
      doubleArray1[1] = (-569.76932222);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-796.637);
      doubleArray1[6] = 662.28406602;
      doubleArray1[7] = (-569.76932222);
      double double0 = openMapRealVector0.getL1Distance(doubleArray1);
      assertEquals(5100.43361674, double0, 0.01);
      
      openMapRealVector0.isNaN();
      openMapRealVector0.hashCode();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(582.32912692);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAddToSelf(0.0);
      RealMatrix realMatrix0 = openMapRealVector2.outerProduct(doubleArray0);
      assertEquals(8, realMatrix0.getRowDimension());
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.ebeMultiply(doubleArray1);
      double double1 = openMapRealVector2.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(582.32912692, double1, 0.01);
      
      boolean boolean0 = openMapRealVector3.isNaN();
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3890.953653449;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.getDistance(doubleArray0);
      openMapRealVector0.isDefaultValue((-20.0));
      openMapRealVector0.combineToSelf(1.0, (-5036.30774087392), doubleArray0);
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      openMapRealVector1.getMaxIndex();
      openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      openMapRealVector1.setSubVector(0, (RealVector) openMapRealVector0);
      openMapRealVector1.unitize();
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.unitVector();
      openMapRealVector2.sparseIterator();
      Double double0 = new Double(1.0E-12);
      openMapRealVector1.getLInfDistance(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      openMapRealVector2.unitVector();
      openMapRealVector2.subtract((RealVector) openMapRealVector0);
      // Undeclared exception!
      try { 
        arrayRealVector0.cosine((RealVector) openMapRealVector1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-1122.2584351997);
      doubleArray0[2] = (-0.16666666666666666);
      doubleArray0[3] = 1201.55702121117;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.16666666666666666));
      RealVector realVector0 = openMapRealVector0.mapDivideToSelf(2.0);
      RealVector realVector1 = openMapRealVector0.mapDivideToSelf((-426.76));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.isInfinite();
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.copy();
      openMapRealVector0.getMinValue();
      openMapRealVector0.setSubVector(0, realVector1);
      openMapRealVector0.getDistance(doubleArray0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(260).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn(1.0E-12).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.getValue();
      openMapRealVector2.setSubVector(0, doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.append(realVector0);
      openMapRealVector3.unitize();
      openMapRealVector_OpenMapEntry0.setValue(0.07842259109020233);
      assertEquals(1.25, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.ebeDivide(doubleArray0);
      OpenMapRealVector openMapRealVector5 = openMapRealVector2.ebeDivide((RealVector) openMapRealVector0);
      openMapRealVector0.getLInfNorm();
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.hasNext();
      openMapRealVector2.projection((RealVector) openMapRealVector0);
      openMapRealVector5.subtract(doubleArray0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector4.unitVector();
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector4));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      int int0 = (-1116);
      openMapRealVector0.getSparsity();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 65.5873866888055;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1116);
      // Undeclared exception!
      try { 
        openMapRealVector0.combine(0.0, 65.5873866888055, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 2574;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2574);
      int int1 = 2181;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 2181);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);
      double double0 = 1631.0;
      // Undeclared exception!
      try { 
        openMapRealVector0.combine(0.0, 1631.0, (RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,574 != 4,755
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 0;
      openMapRealVector0.append(9.669798024988253);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0.0);
      int int0 = openMapRealVector1.getMaxIndex();
      assertEquals(0, int0);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.add((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.projection(doubleArray0);
      assertEquals(0.06666666666666667, openMapRealVector3.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.getSubVector(0, 3);
      assertEquals(0.3333333333333333, openMapRealVector4.getSparsity(), 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector1, openMapRealVector2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-167.3272565));
      doubleArray0[0] = double0;
      Double double1 = new Double((-167.3272565));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double.min((double) doubleArray0[2], 0.096999999999);
      Double double3 = new Double((double) doubleArray0[2]);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.7937005259840998);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((-4491.420361456));
      doubleArray0[6] = double6;
      Double double7 = new Double((-1.0));
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double double8 = openMapRealVector2.getNorm();
      assertEquals(4503.870794808988, double8, 0.01);
      
      boolean boolean0 = openMapRealVector2.equals(doubleArray0[0]);
      assertFalse(boolean0);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.add(openMapRealVector2);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.subtract(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertEquals(0.0, openMapRealVector4.getSparsity(), 0.01);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(0.875, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1874.254243798903;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2088.843);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-46.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3872.581);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 140.25);
      openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      openMapRealVector1.getMinValue();
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd(-0.0);
      openMapRealVector2.getDistance(openMapRealVector1);
      openMapRealVector1.getL1Distance(doubleArray0);
      openMapRealVector2.sparseIterator();
      openMapRealVector1.setEntry(0, 0.0);
      openMapRealVector1.isDefaultValue((-2088.843));
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(216).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue((-3754.7815095898386));
      openMapRealVector2.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector2.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (216)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }
}
