/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 22:03:27 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue.unescape("X-kXc[-oD(+(y?l!");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompBalanced('#', '#');
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.addFirst("Queue did not match expected sequence");
      tokenQueue0.consumeWord();
      tokenQueue0.chompTo("Queue did not match expected sequence");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-^1");
      tokenQueue0.consume("-^1");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("p`DL^");
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.matchesStartTag();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue.unescape("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('/', '/');
      tokenQueue0.consumeWord();
      tokenQueue0.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.remainder();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
      tokenQueue0.chompBalanced('*', 'C');
      tokenQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("MunxBE4TmJ$O6brhQZ6");
      tokenQueue0.consumeWord();
      tokenQueue0.matchesCS("MunxBE4TmJ");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ET1.K7YMPRyV");
      tokenQueue0.matches("i`g%R6{fv:n");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consumeWord();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C-c}Cvo");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.consumeTo("C-c}Cvo");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeAttributeKey();
      assertEquals("[", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("xc?1>u8j]awS\"t\"PufP");
      tokenQueue0.consumeTagName();
      tokenQueue0.consume();
      char char0 = tokenQueue0.consume();
      assertEquals('>', tokenQueue0.peek());
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.chompToIgnoreCase("ZPENtVIS-1O4V");
      assertEquals('#', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C-c}Cvo");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesCS((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("zV}gOohc<nl");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1^=$YvJ?!Czi]S{%s");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("WPI");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7LS<jn2]+9v");
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("foma::+6g|fqwm}a");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_U\u0006");
      tokenQueue0.chompBalanced('_', 'c');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.addFirst("\"xiJ&`M[0Y_* x");
      tokenQueue0.consumeToIgnoreCase("*`l@X17Z[");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$t/2XW");
      tokenQueue0.consumeToIgnoreCase("$t/2XW");
      assertEquals('$', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
      tokenQueue0.consumeWord();
      tokenQueue0.consumeTo("PsQsP");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
      tokenQueue0.consumeTo("");
      assertEquals("8rVVhr[", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      boolean boolean0 = tokenQueue0.matchesWord();
      assertEquals("#f", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.chompToIgnoreCase("(@#fgg0X");
      boolean boolean0 = tokenQueue0.matchesWord();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
      boolean boolean0 = tokenQueue0.matchesWord();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consumeWord();
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals(" did not match expected sequence", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
      Character character0 = Character.valueOf('u');
      tokenQueue0.addFirst(character0);
      boolean boolean0 = tokenQueue0.matchChomp("PsQsP");
      assertEquals('u', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchChomp("");
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = new Character('!');
      tokenQueue0.addFirst(character0);
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("!", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = new Character('!');
      tokenQueue0.addFirst(character0);
      char[] charArray0 = new char[6];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("!", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("MKf2*BS>:okK]H<");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y9?Q{4";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s@zD6]");
      Character character0 = new Character('L');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('L', 'L');
      boolean boolean0 = tokenQueue0.isEmpty();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s@zD6]");
      String string0 = tokenQueue0.remainder();
      assertEquals("s@zD6]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s@zD6]");
      boolean boolean0 = tokenQueue0.matches("s@zD6]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('/', '/');
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.addFirst("0Z-T~R7~7 izo");
      tokenQueue0.consumeCssIdentifier();
      assertEquals('~', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consume();
      tokenQueue0.consumeToIgnoreCase("Queue did not match expected sequence");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
      tokenQueue0.consumeElementSelector();
      assertEquals('$', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('/', '/');
      tokenQueue0.consumeElementSelector();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("I:xt}ChItIVC=~!{");
      tokenQueue0.consumeTagName();
      assertEquals("}ChItIVC=~!{", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("xc?1>u8j]awS\"t\"PufP");
      tokenQueue0.consumeTagName();
      tokenQueue0.chompToIgnoreCase("X");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_U\u0006");
      tokenQueue0.chompBalanced('c', '_');
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
      tokenQueue0.advance();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "String must not be empty";
      stringArray0[1] = "String must not be empty";
      stringArray0[2] = "]NF";
      stringArray0[3] = "String must not be empty";
      stringArray0[4] = "String must not be empty";
      stringArray0[5] = "String must not be empty";
      stringArray0[6] = "String must not be empty";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompBalanced('\"', '\"');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(".Rw %Y-cF[9:Oy");
      Character character0 = Character.valueOf('#');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.consume(".Rw %Y-cF[9:Oy");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consume("");
      assertEquals('Z', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.consume();
      tokenQueue0.consumeToIgnoreCase("Queue did not match expected sequence");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
      tokenQueue0.consumeTagName();
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("must not be empty", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('/', '/');
      tokenQueue0.consumeWord();
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.chompTo("");
      assertEquals('Z', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<]CY\"1}kOU&tb3>#)*");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("FL<x48V1,UNy`}6o");
      tokenQueue0.consumeTagName();
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("<x48V1,UNy`}6o", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('/', '/');
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('f', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "";
      tokenQueue0.consumeToAny(stringArray0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
      tokenQueue0.advance();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "String must not be empty";
      stringArray0[1] = "String must not be empty";
      stringArray0[2] = "]NF";
      stringArray0[3] = "String must not be empty";
      stringArray0[4] = "String must not be empty";
      stringArray0[5] = "String must not be empty";
      stringArray0[6] = "String must not be empty";
      tokenQueue0.consumeToAny(stringArray0);
      char[] charArray0 = new char[3];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('/', '/');
      tokenQueue0.consumeWord();
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      char char0 = tokenQueue0.peek();
      assertEquals('Z', char0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      String string0 = tokenQueue0.toString();
      assertEquals("ZPENtVIS-1O4V#f", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesCS("");
      assertTrue(boolean0);
  }
}
