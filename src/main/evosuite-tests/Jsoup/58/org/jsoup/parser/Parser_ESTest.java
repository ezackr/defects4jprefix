/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 05:59:49 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertFalse(parser1.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Parser.unescapeEntities("meta[name=charset]", true);
      assertEquals("meta[name=charset]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser1.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parser.parseXmlFragment("t7dxUnYB+j", "t7dxUnYB+j");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2f-J<xgD(UpF-F*>KB", "2f-J<xgD(UpF-F*>KB");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("", document0.location());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(1156);
      Document document0 = parser1.parseInput("", "abs:");
      assertTrue(parser0.isTrackErrors());
      assertEquals("abs:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.getTreeBuilder();
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.settings();
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.parseInput("", "");
      assertFalse(parser0.isTrackErrors());
  }
}
