/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 01:46:25 GMT 2023
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.JapaneseDate;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cachedDateTimeZone0.equals(localDateTime0);
      Duration duration0 = Duration.standardHours((-1L));
      cachedDateTimeZone0.getNameKey((-1L));
      localDateTime0.yearOfEra();
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, (-2050));
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration1);
      duration1.plus((-1L));
      localDateTime1.minuteOfHour();
      LocalDateTime localDateTime2 = localDateTime1.plusHours((-2050));
      cachedDateTimeZone0.isLocalDateTimeGap(localDateTime2);
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      cachedDateTimeZone0.toString();
      cachedDateTimeZone0.getNameKey((-1L));
      DateTimeZone.getProvider();
      ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      cachedDateTimeZone0.adjustOffset((-1L), true);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("America/Los_Angeles");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'America/Los_Angeles' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(60);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      fixedDateTimeZone0.toTimeZone();
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?IXi");
      Locale locale0 = Locale.ROOT;
      String string0 = fixedDateTimeZone0.getName((long) 60, locale0);
      assertEquals("+00:00:00.060", string0);
      
      Instant instant0 = new Instant((-74L));
      Instant instant1 = instant0.withMillis((-391L));
      DateTime dateTime0 = instant1.toDateTime();
      fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals("+00:00:00.060", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-America/Denver");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-America/Denver\" is malformed at \"America/Denver\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone.getAvailableIDs();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getAvailableIDs();
      uTCProvider0.getAvailableIDs();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));
      long long0 = dateTimeZone0.adjustOffset(0L, false);
      assertEquals(0L, long0);
      
      DateTimeZone.getProvider();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2253));
      assertEquals("-00:00:02.253", dateTimeZone1.getID());
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(2000);
      assertEquals("+00:00:02", dateTimeZone2.toString());
      
      boolean boolean0 = dateTimeZone0.isStandardOffset(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals(1392364800000L, dateMidnight0.getMillis());
      
      dateTimeZone0.getNameKey(408L);
      dateTimeZone0.UTC.previousTransition(366L);
      dateTimeZone0.toString();
      dateTimeZone0.getStandardOffset(408L);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone.getAvailableIDs();
      String string0 = dateTimeZone1.getShortName(0L);
      assertNotNull(string0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      dateTimeZone0.toTimeZone();
      long long0 = (-918L);
      dateTimeZone0.convertLocalToUTC((-918L), true, (-1651L));
      DateTimeZone.forOffsetHours(1);
      DateTimeZone.forID("America/Denver");
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("America/Denver");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: America/Denver
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = 1796L;
      DateTimeUtils.setCurrentMillisFixed(1796L);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 204;
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 204
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-462));
      dateTimeZone0.isStandardOffset(1);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone1);
      localDateTime0.minusDays((-462));
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(58);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      assertFalse(boolean0);
      
      dateTimeZone1.getID();
      dateTimeZone0.previousTransition(1);
      dateTimeZone0.isFixed();
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeZone1.getShortName(15L, locale0);
      assertEquals("-462:00", string0);
      
      int int0 = dateTimeZone1.getOffsetFromLocal((-1L));
      assertEquals((-1663200000), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeUtils.setCurrentMillisFixed((-1066L));
      dateTimeZone0.UTC.getName(2451L);
      dateTimeZone0.hashCode();
      fixedDateTimeZone0.previousTransition((-1066L));
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.FRENCH;
      String string0 = dateTimeZone1.UTC.getShortName(2451L, locale0);
      assertEquals("+00:00", string0);
      
      dateTimeZone1.UTC.getStandardOffset((-1L));
      DateTimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      dateTimeZone0.getOffsetFromLocal((-1066L));
      long long0 = dateTimeZone0.convertLocalToUTC((-354L), true);
      assertEquals((-354L), long0);
      
      String string1 = dateTimeZone0.getName((long) 0, locale0);
      assertNotNull(string1);
      assertEquals("+00:00", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 59;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);
      dateTimeZone0.UTC.convertUTCToLocal(59);
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeZone0.getOffsetFromLocal(59);
      DateTimeUtils.setCurrentMillisSystem();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(59);
      dateTimeZone0.UTC.getNameKey(59L);
      dateTimeZone1.UTC.isStandardOffset(0L);
      dateTimeZone1.UTC.isFixed();
      dateTimeZone1.UTC.getNameKey(59L);
      long long0 = 338L;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("UTC", classLoader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"UTC/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$ExtClassLoader@0000000005
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeUtils.setCurrentMillisFixed((-845L));
      dateTimeZone0.UTC.getStandardOffset(0L);
      dateTimeZone0.UTC.previousTransition(0L);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      dateTimeZone0.getShortName((-845L));
      dateTimeZone0.equals(japaneseDate0);
      dateTimeZone0.UTC.previousTransition((-845L));
      DateTimeZone.getDefault();
      DateTimeUtils.setCurrentMillisFixed((-2720L));
      dateTimeZone0.getNameKey((-128L));
      dateTimeZone0.getOffsetFromLocal(1687L);
      dateTimeZone0.convertLocalToUTC((long) (-28800000), false);
      dateTimeZone0.convertUTCToLocal((-28800000));
      Locale locale0 = Locale.UK;
      dateTimeZone0.getName((-2720L), locale0);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider((NameProvider) null);
      int int0 = 1139;
      try { 
        DateTimeZone.forOffsetHours(1139);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTimeZone.getDefault();
      dateTimeZone0.nextTransition(31557600000L);
      dateTimeZone0.hashCode();
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone((TimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone2);
      dateTimeZone1.getOffset((ReadableInstant) dateMidnight1);
      // Undeclared exception!
      try { 
        dateTimeZone2.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.UTC.getOffsetFromLocal(9223372036854775807L);
      fixedDateTimeZone0.UTC.getShortName(9223372036854775807L, (Locale) null);
      fixedDateTimeZone0.isStandardOffset(31083663600000L);
      fixedDateTimeZone0.getOffset(10000000000000L);
      fixedDateTimeZone0.getID();
      long long0 = fixedDateTimeZone0.nextTransition(245L);
      assertEquals(245L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      int int0 = dateTimeZone0.getOffset((-351L));
      assertEquals((-28800000), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("UTC");
      dateTimeZone0.nextTransition((-175L));
      long long0 = dateTimeZone0.adjustOffset(3386L, true);
      assertEquals(3386L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("(r");
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-657L));
      assertEquals((-657L), long0);
      
      dateTimeZone0.getOffset((-427L));
      dateTimeZone0.getNameKey((-427L));
      dateTimeZone0.getOffsetFromLocal((-28800000));
      dateTimeZone0.UTC.getStandardOffset(100000000000000000L);
      dateTimeZone0.getName((-3192L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+Y");
      dateTimeZone0.getOffsetFromLocal((-3192L));
      String string0 = dateTimeZone0.getName(45155216L);
      assertEquals("-08:00", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      long long0 = dateTimeZone0.adjustOffset((-1268L), true);
      assertEquals((-1268L), long0);
      
      dateTimeZone0.getName((long) 3);
      dateTimeZone0.UTC.getOffset(1157L);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("+03:00");
      dateTimeZone0.convertUTCToLocal(0L);
      dateTimeZone0.convertUTCToLocal(3);
      Locale locale0 = Locale.CHINA;
      String string0 = dateTimeZone0.getName(0L, locale0);
      assertEquals("+03:00", string0);
      
      long long1 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 1722L);
      assertEquals(1722L, long1);
      
      int int0 = dateTimeZone1.getOffset(0L);
      assertEquals(10800000, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone.getProvider();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      zonedChronology0.getDateTimeMillis(1, 1, 1, 1);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      long long0 = dateTimeZone1.convertLocalToUTC((long) 1, true);
      assertEquals(28800001L, long0);
      
      long long1 = dateTimeZone1.previousTransition(934L);
      assertEquals((-5756400001L), long1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      long long0 = 0L;
      Object object0 = new Object();
      dateTimeZone0.UTC.toTimeZone();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(object0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      boolean boolean0 = dateTimeZone0.isStandardOffset(30L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-884);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-884), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
      long long0 = dateTimeZone0.convertLocalToUTC(2790L, false, (-4390L));
      assertEquals(2747L, long0);
      
      String string0 = dateTimeZone0.getID();
      assertEquals("+00:00:00.043", string0);
      
      long long1 = dateTimeZone0.convertLocalToUTC(1L, false);
      assertEquals((-42L), long1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone.setProvider(provider0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Chronology chronology0 = iSOChronology0.withUTC();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      LocalTime.now((Chronology) iSOChronology0);
      dateTimeZone1.getName(605L);
      dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);
      DateTimeZone.forOffsetMillis((-970));
      dateTimeZone0.convertLocalToUTC(605L, true);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, fixedDateTimeZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(1);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.adjustOffset(100000L, true);
      assertEquals(100000L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);
      DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
      long long0 = dateTimeZone2.adjustOffset(0, false);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone2.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);
      dateTimeZone0.hashCode();
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      dateTimeZone0.getOffsetFromLocal(10);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(265);
      dateMidnight1.getMillisOfSecond();
      dateTimeZone0.getOffset((ReadableInstant) dateMidnight1);
      dateTimeZone0.adjustOffset(21600000L, true);
      dateTimeZone0.getOffset(21600000L);
      dateTimeZone0.convertLocalToUTC((long) 10, true);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("America/Denver");
      dateTimeZone0.toString();
      long long0 = 10800000L;
      dateTimeZone1.convertLocalToUTC(10800000L, true, 10800000L);
      dateTimeZone1.getStandardOffset(10);
      dateTimeZone0.UTC.previousTransition(36000000L);
      int int0 = (-167);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, (-167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -167
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTime dateTime0 = new DateTime(498L);
      DateTime dateTime1 = dateTime0.minusDays(1);
      DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      dateTimeZone0.hashCode();
      assertEquals((-86399502L), dateTime2.getMillis());
      assertSame(dateTime1, dateTime2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+&OxR7{L] |au,X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+&OxR7{L] |au,X\" is malformed at \"&OxR7{L] |au,X\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(4, 4);
      int int0 = dateTimeZone0.getStandardOffset(984L);
      assertEquals(14640000, int0);
      assertEquals("+04:04", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-1578);
      try { 
        DateTimeZone.forOffsetHours((-1578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.UTC.adjustOffset(1, true);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
      Locale locale0 = Locale.CANADA;
      dateTimeZone0.getName(0L, locale0);
      Locale locale1 = Locale.FRANCE;
      dateTimeZone0.getName(0L, locale1);
      long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);
      assertEquals((-1107L), long0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      dateTimeZone0.UTC.toTimeZone();
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
      dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);
      DateTimeZone.getAvailableIDs();
      String string0 = dateTimeZone0.getShortName(0L);
      assertNotNull(string0);
      
      dateTimeZone2.previousTransition(0L);
      DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));
      dateTimeZone3.UTC.getOffset((long) 1);
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      dateTimeZone3.nextTransition(1L);
      assertEquals("-00:00:01.858", dateTimeZone3.toString());
      
      DateTimeZone.getProvider();
      dateTimeZone2.getNameKey(1L);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      int int0 = dateTimeZone1.getOffsetFromLocal(0L);
      assertEquals((-216), int0);
      assertEquals("-00:00:00.216", dateTimeZone1.toString());
      
      DateTimeZone dateTimeZone4 = DateTimeZone.forTimeZone(timeZone0);
      String string1 = dateTimeZone4.getName((long) (-1858));
      assertEquals("+00:00", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);
      dateTimeZone0.hashCode();
      String string0 = dateTimeZone0.toString();
      assertEquals("+00:00:02.363", string0);
      
      dateTimeZone0.previousTransition(2596L);
      long long0 = dateTimeZone0.convertUTCToLocal(100000000000L);
      assertEquals(100000002363L, long0);
      
      int int0 = dateTimeZone0.getOffsetFromLocal(1660L);
      assertEquals(2363, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeZone0.UTC.convertLocalToUTC(946L, true);
      timeZone0.getDisplayName();
      long long0 = dateTimeZone0.adjustOffset((-3000L), false);
      assertEquals((-3000L), long0);
      
      dateTimeZone0.convertLocalToUTC(0L, false, 0L);
      timeZone0.clone();
      dateTimeZone0.nextTransition(0L);
      dateTimeZone0.equals(timeZone0);
      dateTimeZone0.previousTransition(10800000L);
      long long1 = dateTimeZone0.convertUTCToLocal(1540L);
      assertEquals(1540L, long1);
      
      long long2 = dateTimeZone0.convertLocalToUTC(1000L, false);
      assertEquals(1000L, long2);
      
      dateTimeZone0.isStandardOffset(1540L);
      DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(253);
      assertEquals("+00:00:00.253", dateTimeZone2.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeUtils.setCurrentMillisOffset(10800000L);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("4|rmN$}!tZmIy~tl$c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4|rmN$}!tZmIy~tl$c\" is malformed at \"|rmN$}!tZmIy~tl$c\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.convertUTCToLocal(0L);
      Hours hours0 = Hours.SIX;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);
      buddhistChronology0.get((ReadablePeriod) period0, (-1L));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "/y<.b,", 1, 1, 1, 0, 0, 1, 1, 1915, 1);
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '/y<.b,' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("America/Denver");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeZone0.UTC.getNameKey(0L);
      long long0 = dateTimeZone0.nextTransition(0L);
      assertEquals(9968400000L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.isFixed();
      dateTimeZone0.getID();
      dateTimeZone0.previousTransition(1);
      long long0 = dateTimeZone0.convertLocalToUTC(2153L, true);
      assertEquals(2153L, long0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
      long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 2153L);
      assertEquals("+00:00:00.001", dateTimeZone1.toString());
      assertEquals(2152L, long1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone.getProvider();
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2186);
      dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeZone.forTimeZone((TimeZone) null);
      dateTimeZone0.getStandardOffset((-257L));
      dateTimeZone0.convertLocalToUTC((-1682L), true, 1658L);
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-674));
      dateTimeZone0.UTC.nextTransition(0L);
      DateTimeUtils.setCurrentMillisFixed((-1328L));
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeZone0.getName((long) (-674), (Locale) null);
      int int0 = (-4253);
      int int1 = 57;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-674), "America/Los_Angeles", (-1319), (-4253), 928, 928, 11, 1, 0, 11, 0, 459, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1319
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.UTC.getStandardOffset((-1L));
      fixedDateTimeZone0.UTC.toTimeZone();
      Locale locale0 = Locale.CHINESE;
      fixedDateTimeZone0.getName(2075L, locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeUtils.setCurrentMillisFixed(13L);
      dateTimeZone0.UTC.nextTransition(0);
      fixedDateTimeZone0.convertLocalToUTC((long) 0, false);
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      timeZone0.getDisplayName();
      dateTimeZone0.adjustOffset((-3000L), false);
      dateTimeZone0.convertLocalToUTC(0L, false, 0L);
      timeZone0.clone();
      dateTimeZone0.nextTransition(0L);
      dateTimeZone0.equals(timeZone0);
      dateTimeZone0.previousTransition(10800000L);
      dateTimeZone0.convertUTCToLocal(1540L);
      dateTimeZone0.convertLocalToUTC(1000L, false);
      dateTimeZone0.isStandardOffset(1540L);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);
      assertEquals("+08:00", dateTimeZone1.toString());
      
      int int0 = dateTimeZone0.getOffset((long) 8);
      assertEquals(8, int0);
      assertEquals("+00:00:00.008", dateTimeZone0.toString());
      assertEquals("+00:00:00.008", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      Locale locale0 = Locale.KOREAN;
      String string0 = dateTimeZone1.getName(9223372036854775807L, locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 24;
      int int1 = 3600000;
      try { 
        DateTimeZone.forOffsetHoursMinutes(24, 3600000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 3600000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      DateTimeUtils.setCurrentMillisSystem();
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeZone0.getNameKey(2660L);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);
      assertEquals("+00:00", string0);
      
      dateTimeZone0.getName((-4462L));
      String string1 = dateTimeZone0.getName(10800000L);
      assertNotNull(string1);
      assertEquals("-08:00", string1);
      
      String string2 = dateTimeZone0.getShortName((-4462L));
      assertNotNull(string2);
      
      dateTimeZone0.isFixed();
      boolean boolean0 = dateTimeZone0.isStandardOffset(2660L);
      assertTrue(boolean0);
      
      int int0 = dateTimeZone0.getStandardOffset(2660L);
      assertEquals((-28800000), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((-455));
      DateTimeZone.getDefault();
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-338L));
      assertTrue(boolean0);
      
      DateTimeZone.setProvider(zoneInfoProvider0);
      fixedDateTimeZone0.convertUTCToLocal((-338L));
      DateTimeZone.setProvider(zoneInfoProvider0);
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      String string0 = fixedDateTimeZone0.getName((-338L));
      assertEquals("-455:00", string0);
      
      long long0 = fixedDateTimeZone0.convertUTCToLocal((-455));
      assertEquals((-1638000455L), long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-976);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-976), (-976));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -976
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.toTimeZone();
      DateTimeZone.getDefault();
      DateTimeZone.getDefault();
      try { 
        DateTimeZone.forOffsetHours((-4460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((-942));
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertEquals("-00:00:00.942", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "Adding time zone offset caused overflow";
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Adding time zone offset caused overflow");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Adding time zone offset caused overflow' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(43);
      assertEquals("+43:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-2208);
      try { 
        DateTimeZone.forOffsetHours((-2208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.getOffset(36600010L);
      TimeZone timeZone0 = TimeZone.getTimeZone("U=N<5e");
      DateTimeZone.forTimeZone(timeZone0);
      fixedDateTimeZone0.UTC.getStandardOffset(0);
      fixedDateTimeZone0.getOffsetFromLocal((-1204L));
      DateTimeZone.setDefault(fixedDateTimeZone0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        DateTimeZone.forOffsetHoursMinutes((-230), 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 60
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Ci.=p3yTl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Ci.=p3yTl' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((-982L), (DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(46);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jodatime.chrono.BasicChronology$YearInfo");
      Duration duration0 = Duration.millis(755L);
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded(duration0, 50);
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 46);
      LocalDateTime localDateTime4 = localDateTime3.minusHours(50);
      localDateTime3.withMillisOfDay(2316);
      fixedDateTimeZone0.isLocalDateTimeGap(localDateTime4);
      fixedDateTimeZone0.adjustOffset(9223372036854775807L, false);
      DateTimeZone.getAvailableIDs();
      fixedDateTimeZone0.isLocalDateTimeGap(localDateTime3);
      DateTimeZone.getNameProvider();
      fixedDateTimeZone0.toTimeZone();
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeUtils.setCurrentMillisFixed(0L);
      Locale locale0 = Locale.forLanguageTag("A_c*d}ih>cx");
      fixedDateTimeZone0.isFixed();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayCountry(locale1);
      fixedDateTimeZone0.getShortName(0L, locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      dateTimeZone0.equals("A_c*d}ih>cx");
      DateTimeUtils.setCurrentMillisSystem();
      fixedDateTimeZone0.getOffsetFromLocal(0L);
      dateTimeZone0.getStandardOffset(0);
      DateTimeUtils.setCurrentMillisOffset(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
      fixedDateTimeZone0.nextTransition((-1L));
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone2);
      
      long long0 = dateTimeZone2.adjustOffset(0, false);
      assertEquals(0L, long0);
      
      long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 365L);
      assertEquals(365L, long1);
      
      fixedDateTimeZone0.toString();
      DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetHours(0);
      dateTimeZone3.equals("");
      dateTimeZone3.toTimeZone();
      DateTimeZone.setDefault(dateTimeZone3);
      String string0 = dateTimeZone1.getShortName(2528L);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      Interval interval0 = new Interval((-272L), 10800000L);
      Duration duration0 = interval0.toDuration();
      dateTimeZone0.getNameKey((-352L));
      interval0.withEndMillis(1);
      DateTime dateTime0 = interval0.getEnd();
      dateTime0.withDayOfYear(1);
      dateTime0.getDayOfMonth();
      interval0.withDurationBeforeEnd(duration0);
      dateTime0.withZoneRetainFields(dateTimeZone0);
      dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      DateTimeZone.getAvailableIDs();
      dateTimeZone0.convertUTCToLocal((-352L));
      dateTimeZone0.isStandardOffset((-1611L));
      dateTimeZone0.previousTransition(0L);
      dateTimeZone0.isFixed();
      DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 3487;
      try { 
        DateTimeZone.forOffsetHours(3487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Los_Angeles");
      String string0 = dateTimeZone0.UTC.getName(3600000L);
      assertEquals("+00:00", string0);
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      dateTimeZone0.UTC.writeReplace();
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      dateTimeZone0.isStandardOffset(0L);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeUtils.setCurrentMillisOffset(604800000L);
      DateTimeZone.setNameProvider(defaultNameProvider0);
      dateTimeZone0.toString();
      dateTimeZone0.getShortName(0L);
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
      assertEquals(0L, long0);
      
      defaultNameProvider0.getName((Locale) null, (String) null, "America/Los_Angeles");
      String string1 = dateTimeZone0.getShortName(0L, (Locale) null);
      assertEquals("-08:00", string1);
      
      defaultNameProvider0.getName((Locale) null, (String) null, "America/Los_Angeles");
      dateTimeZone0.nextTransition(0L);
      DateTimeZone.setNameProvider(defaultNameProvider0);
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertSame(nameProvider0, defaultNameProvider0);
      
      long long1 = dateTimeZone0.convertUTCToLocal(0L);
      assertEquals((-28800000L), long1);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      dateTimeZone1.getStandardOffset(0);
      Locale locale0 = new Locale("f (V", " - ", " - ");
      dateTimeZone1.getName((long) 0, locale0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(910, 0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      int int0 = 7678125;
      dateTimeZone1.getOffsetFromLocal(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(7678125);
      Integer integer0 = new Integer(7678125);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      dateTimeZone0.getShortName((long) 7678125);
      DateTimeZone.forOffsetMillis(910);
      DateTime dateTime0 = dateTimeFormatter2.parseDateTime("America/Chicago");
      dateTime0.minusMillis(2774);
      String string0 = "^=Q+3q\\u==+CQ{fn<2";
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"^=Q+3q\\u==+CQ{fn<2\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);
      Integer integer0 = new Integer(60000);
      dateTimeZone1.UTC.previousTransition(100L);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getAvailableIDs();
      uTCProvider0.getAvailableIDs();
      DateTimeZone.setProvider(uTCProvider0);
      Locale locale0 = Locale.US;
      locale0.toLanguageTag();
      String string0 = dateTimeZone0.getShortName((-922L), locale0);
      assertNotNull(string0);
      assertEquals("-08:00", string0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(0L);
      assertEquals((-28800000L), long0);
      
      long long1 = dateTimeZone0.convertLocalToUTC(1L, true);
      assertEquals(28800001L, long1);
      
      int int0 = dateTimeZone1.getStandardOffset(0L);
      assertEquals(60000, int0);
      
      TimeZone timeZone0 = dateTimeZone1.toTimeZone();
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+00:01", dateTimeZone1.toString());
      assertSame(dateTimeZone2, dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeZone.getNameProvider();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = (-47L);
      dateTimeZone0.adjustOffset((-47L), false);
      Locale locale0 = Locale.ITALIAN;
      dateTimeZone0.getShortName((-47L), locale0);
      dateTimeZone0.convertLocalToUTC((-47L), false);
      UTCProvider uTCProvider0 = new UTCProvider();
      dateTimeZone0.equals(uTCProvider0);
      dateTimeZone0.getID();
      JulianChronology.getInstance(dateTimeZone0);
      try { 
        DateTimeZone.forOffsetHours(1822);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
}
