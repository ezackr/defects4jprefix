/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 22:45:30 GMT 2023
 */
package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        linkedList0.remove((Object) arrayList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MultiValueMap<ArrayList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<String>>();
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        Integer integer0 = new Integer((-1582));
        arrayList0.add(integer0);
        ArrayList<String> arrayList1 = new ArrayList<String>();
        multiValueMap0.replace(arrayList0, (Object) arrayList1, (Object) null);
        Integer integer1 = new Integer((-1582));
        multiValueMap0.iterator((Object) integer1);
        MultiValueMap<HashMap<String, LinkedList>, Collection<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, LinkedList>, ? super Collection<Collection<AbstractMap.SimpleEntry>>>) multiValueMap0);
        HashMap<Integer, Collection<Object>> hashMap0 = new HashMap<Integer, Collection<Object>>();
        MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
        ArrayList<Object> arrayList2 = new ArrayList<Object>();
        multiValueMap2.createCollection((-1582));
        arrayList2.add((Object) multiValueMap1);
        multiValueMap2.containsValue((Object) arrayList2, (Object) null);
        ArrayList<Collection<Object>> arrayList3 = new ArrayList<Collection<Object>>();
        ConstantFactory<Collection<Collection<Object>>> constantFactory0 = new ConstantFactory<Collection<Collection<Object>>>(arrayList3);
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) null, (Factory<Collection<Collection<Object>>>) constantFactory0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        Integer integer0 = new Integer(538);
        multiValueMap0.removeMapping(arrayList0, integer0);
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        multiValueMap0.putAll((Integer) null, (Collection<Object>) arrayList1);
        multiValueMap0.values();
        arrayList0.listIterator(538);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        arrayList0.retainAll(linkedList0);
        multiValueMap0.iterator((Object) arrayList0);
        Integer integer0 = new Integer(0);
        multiValueMap0.containsValue((Object) integer0);
        HashMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Object>();
        ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
        MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>>((Map<AbstractMap.SimpleEntry<Collection<Object>, Integer>, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) constantFactory0);
        Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
        MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>>((Map<AbstractMap.SimpleEntry<Collection<Object>, Integer>, ? super LinkedList<Object>>) multiValueMap1, factory0);
        multiValueMap2.putAll((Map<? extends AbstractMap.SimpleEntry<Collection<Object>, Integer>, ?>) multiValueMap1);
        MultiValueMap<ArrayList<Object>, String> multiValueMap3 = new MultiValueMap<ArrayList<Object>, String>();
        multiValueMap3.iterator((Object) multiValueMap2);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        arrayList0.retainAll(linkedList0);
        multiValueMap0.iterator((Object) arrayList0);
        Integer integer0 = new Integer(0);
        multiValueMap0.containsValue((Object) integer0);
        HashMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Object>();
        ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
        MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>>((Map<AbstractMap.SimpleEntry<Collection<Object>, Integer>, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) constantFactory0);
        Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
        MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>>((Map<AbstractMap.SimpleEntry<Collection<Object>, Integer>, ? super LinkedList<Object>>) multiValueMap1, factory0);
        multiValueMap2.putAll((Map<? extends AbstractMap.SimpleEntry<Collection<Object>, Integer>, ?>) multiValueMap1);
        HashMap<ArrayList<Object>, Object> hashMap1 = new HashMap<ArrayList<Object>, Object>();
        MultiValueMap<ArrayList<Object>, Integer> multiValueMap3 = new MultiValueMap<ArrayList<Object>, Integer>((Map<ArrayList<Object>, ? super LinkedList<Object>>) hashMap1, factory0);
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<String>>>) multiValueMap3);
        MultiValueMap<ArrayList<Object>, String> multiValueMap4 = new MultiValueMap<ArrayList<Object>, String>();
        multiValueMap4.iterator((Object) multiValueMap2);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        multiValueMap0.containsValue((Object) arrayList0);
        HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        ArrayList<String> arrayList1 = new ArrayList<String>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.poll();
        hashMap0.put(arrayList1, linkedList0);
        MultiValueMap<Object, HashMap<Integer, String>> multiValueMap1 = new MultiValueMap<Object, HashMap<Integer, String>>((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
        multiValueMap1.containsValue((Object) hashMap0);
        multiValueMap1.iterator();
        MultiValueMap<String, LinkedList<Object>> multiValueMap2 = new MultiValueMap<String, LinkedList<Object>>();
        MultiValueMap<Object, Collection<String>> multiValueMap3 = new MultiValueMap<Object, Collection<String>>();
        multiValueMap3.clear();
        MultiValueMap<Object, Object> multiValueMap4 = new MultiValueMap<Object, Object>();
        multiValueMap4.totalSize();
        HashMap<HashMap<Object, String>, Collection<Object>> hashMap1 = new HashMap<HashMap<Object, String>, Collection<Object>>();
        Factory<Collection<Object>> factory1 = ExceptionFactory.exceptionFactory();
        MultiValueMap<HashMap<Object, String>, String> multiValueMap5 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Object>>) hashMap1, factory1);
        HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
        multiValueMap5.putAll(hashMap2, (Collection<String>) arrayList1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Collection<Object>>>();
        multiValueMap0.values();
        MultiValueMap<HashMap<Integer, String>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<HashMap<Integer, String>, LinkedList<Object>>();
        HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
        LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
        multiValueMap1.putAll(hashMap0, (Collection<LinkedList<Object>>) linkedList0);
        multiValueMap1.values();
        Iterator<Map.Entry<HashMap<Integer, String>, LinkedList<Object>>> iterator0 = multiValueMap1.iterator();
        HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
        MultiValueMap<String, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) hashMap1);
        MultiValueMap<ArrayList<String>, Integer> multiValueMap3 = new MultiValueMap<ArrayList<String>, Integer>();
        Factory<ArrayList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
        multiValueMap1.putIfAbsent(hashMap0, hashMap0);
        MultiValueMap<ArrayList<String>, Integer> multiValueMap4 = new MultiValueMap<ArrayList<String>, Integer>((Map<ArrayList<String>, ? super ArrayList<Collection<Object>>>) multiValueMap3, factory0);
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) multiValueMap4);
        multiValueMap2.iterator((Object) iterator0);
        MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap5 = new MultiValueMap<ArrayList<Collection<Object>>, Object>();
        MultiValueMap<ArrayList<Collection<Object>>, Collection<ArrayList>> multiValueMap6 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<Collection<ArrayList>>>) multiValueMap5);
        Factory<LinkedList<Integer>> factory1 = ExceptionFactory.exceptionFactory();
        MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super LinkedList<Integer>>) multiValueMap6, factory1);
        HashMap<Integer, Collection<Object>> hashMap2 = new HashMap<Integer, Collection<Object>>();
        Factory<LinkedList<Object>> factory2 = ConstantFactory.constantFactory((LinkedList<Object>) null);
        MultiValueMap<Integer, Integer> multiValueMap7 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super LinkedList<Object>>) hashMap2, factory2);
        multiValueMap7.getCollection(hashMap1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        multiValueMap0.iterator((Object) arrayList0);
        multiValueMap0.size((Object) arrayList0);
        multiValueMap0.iterator();
        MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, HashMap<Object, Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, HashMap<Object, Integer>>();
        ArrayList<Object> arrayList1 = null;
        arrayList1 = new ArrayList<Object>((Collection<?>) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("HR:");
        LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        linkedList0.add(linkedList1);
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) linkedList0);
        arrayList0.listIterator(0);
        arrayList0.add("The comparator must not be null");
        multiValueMap0.createCollection(145);
        Collection<Object> collection0 = multiValueMap0.values();
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList1).when(biFunction0).apply(any(), any());
        multiValueMap0.compute(arrayList0, biFunction0);
        multiValueMap0.totalSize();
        MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
        multiValueMap1.size((Object) multiValueMap0);
        Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap2 = new MultiValueMap<LinkedList<String>, LinkedList<String>>((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap1, factory0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("The comparator must not be null", "s+bO><");
        multiValueMap2.removeMapping(hashMap0, collection0);
        HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>(0);
        MultiValueMap<Collection<Object>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap1);
        multiValueMap3.putAll((Map<? extends Collection<Object>, ?>) hashMap1);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("HR:");
        LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        linkedList0.add(linkedList1);
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) linkedList0);
        arrayList0.listIterator(0);
        multiValueMap0.createCollection(145);
        Collection<Object> collection0 = multiValueMap0.values();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn("The comparator must not be null").when(biFunction0).apply(any(), any());
        multiValueMap0.compute(arrayList0, biFunction0);
        multiValueMap0.totalSize();
        MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
        multiValueMap1.size((Object) multiValueMap0);
        Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap2 = new MultiValueMap<LinkedList<String>, LinkedList<String>>((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap1, factory0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("The comparator must not be null", "s+bO><");
        multiValueMap2.removeMapping(hashMap0, collection0);
        HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>(0);
        MultiValueMap<Collection<Object>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap1);
        multiValueMap3.putAll((Map<? extends Collection<Object>, ?>) hashMap1);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        multiValueMap0.totalSize();
        ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
        ConstantFactory.constantFactory((Object) arrayList0);
        multiValueMap0.iterator((Object) null);
        MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
        multiValueMap1.totalSize();
        linkedList1.offerFirst("");
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        MultiValueMap<Integer, LinkedList<Object>> multiValueMap2 = null;
        multiValueMap2 = new MultiValueMap<Integer, LinkedList<Object>>((Map<Integer, ? super LinkedList<Integer>>) hashMap0, (Factory<LinkedList<Integer>>) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
        Integer integer0 = new Integer((-2147092696));
        multiValueMap0.put(linkedList1, integer0);
        multiValueMap0.iterator((Object) linkedList0);
        MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
        multiValueMap1.totalSize();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.merge("", "", biFunction0);
        MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
        MultiValueMap.multiValueMap((Map<ArrayList<AbstractMap.SimpleEntry>, ? super Collection<String>>) multiValueMap0);
        multiValueMap1.createCollection(0);
        multiValueMap1.containsValue((Object) "");
        MultiValueMap<String, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
        multiValueMap2.clear();
        MultiValueMap<AbstractMap.SimpleEntry<String, String>, HashMap<String, Object>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, HashMap<String, Object>>();
        MultiValueMap<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap4 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
        multiValueMap3.map = (Map<AbstractMap.SimpleEntry<String, String>, Object>) multiValueMap4;
        multiValueMap3.iterator();
        MultiValueMap<Collection<Object>, LinkedList<Collection<Object>>> multiValueMap5 = new MultiValueMap<Collection<Object>, LinkedList<Collection<Object>>>();
        multiValueMap5.containsValue((Object) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
        MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap2 = null;
        multiValueMap2 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap1, (Factory<Collection<Integer>>) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
        MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
        MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap1);
        multiValueMap2.size((Object) multiValueMap1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        int int0 = 1;
        Integer integer0 = new Integer(1);
        multiValueMap0.values();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        arrayList0.add((Object) integer0);
        arrayList0.add((Object) null);
        multiValueMap0.containsValue((Object) integer0, (Object) arrayList0);
        MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
        LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
        linkedList0.add((Collection<Object>) arrayList0);
        multiValueMap1.putAll((Integer) null, (Collection<Collection<Object>>) linkedList0);
        multiValueMap1.iterator();
        ArrayList<ArrayList<Collection<Object>>> arrayList1 = new ArrayList<ArrayList<Collection<Object>>>();
        Factory<Collection<ArrayList<Collection<Object>>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Collection<Object>>>) arrayList1);
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Collection<Object>>>>) null, factory0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        HashMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Object>();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
        MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Object>((Map<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, ? super LinkedList<String>>) hashMap0, factory0);
        multiValueMap0.values();
        HashMap<Collection<String>, Object> hashMap1 = new HashMap<Collection<String>, Object>();
        MultiValueMap<Collection<String>, Integer> multiValueMap1 = new MultiValueMap<Collection<String>, Integer>((Map<Collection<String>, ? super LinkedList<String>>) hashMap1, factory0);
        multiValueMap1.putAll((Map<? extends Collection<String>, ?>) hashMap1);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Integer>>>) hashMap0);
        multiValueMap0.totalSize();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, String>>>) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>>();
        MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>>();
        BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
        multiValueMap1.forEach(biConsumer0);
        int int0 = (-2104);
        multiValueMap1.createCollection((-2104));
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        hashMap0.put(multiValueMap1, multiValueMap1);
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Map<Collection<Object>, Object> map0 = null;
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Object>>) null, factory0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        HashMap<ArrayList<Collection<Object>>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Collection<Object>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
        MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, Object>((Map<ArrayList<Collection<Object>>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
        MultiValueMap<ArrayList<Collection<Object>>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<ArrayList<String>>>) multiValueMap0);
        multiValueMap1.putAll((Map<? extends ArrayList<Collection<Object>>, ?>) hashMap0);
        MultiValueMap<ArrayList<Integer>, String> multiValueMap2 = new MultiValueMap<ArrayList<Integer>, String>();
        multiValueMap2.createCollection((-3421));
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
        MultiValueMap<Collection<Integer>, Object> multiValueMap1 = new MultiValueMap<Collection<Integer>, Object>();
        multiValueMap1.iterator();
        multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
        multiValueMap1.containsValue((Object) "", (Object) multiValueMap0);
        MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap2 = new MultiValueMap<LinkedList<Object>, ArrayList<Integer>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
        multiValueMap2.putAll(linkedList0, (Collection<ArrayList<Integer>>) arrayList0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        multiValueMap1.put(multiValueMap0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
        multiValueMap0.iterator();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
        MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap1 = null;
        multiValueMap1 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>((Map<LinkedList<Integer>, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) constantFactory0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Collection<Object>>>();
        Integer integer0 = new Integer(0);
        multiValueMap0.size((Object) integer0);
        multiValueMap0.totalSize();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        MultiValueMap<ArrayList<Collection<Object>>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, Integer>();
        HashMap<Collection<Integer>, Collection<Object>> hashMap0 = new HashMap<Collection<Integer>, Collection<Object>>();
        MultiValueMap<Collection<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) hashMap0);
        multiValueMap1.clear();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        linkedList0.sort(comparator0);
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        Integer integer0 = new Integer(0);
        linkedList0.add(integer0);
        Integer integer1 = new Integer((-1));
        linkedList0.push(integer1);
        linkedList1.toArray();
        linkedList1.forEach(consumer0);
        hashMap0.put(linkedList0, linkedList1);
        MultiValueMap<ArrayList<Integer>, Integer> multiValueMap2 = new MultiValueMap<ArrayList<Integer>, Integer>();
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        ArrayList<String> arrayList1 = new ArrayList<String>();
        multiValueMap0.mapIterator();
        multiValueMap2.putIfAbsent(arrayList0, arrayList1);
        Class<Object> class0 = Object.class;
        MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry>, ? super Collection<Collection<ArrayList>>>) hashMap0, (Class<Collection<Collection<ArrayList>>>) class0);
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Integer>>();
        multiValueMap0.map = null;
        HashMap<ArrayList<Integer>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Integer>, Collection<Object>>();
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Object>((Map<ArrayList<Integer>, ? super LinkedList<Object>>) hashMap0, factory0);
        MultiValueMap<ArrayList<Integer>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
        hashMap0.put(arrayList1, arrayList0);
        ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
        MultiValueMap<ArrayList<Integer>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super ArrayList<Object>>) multiValueMap2, (Factory<ArrayList<Object>>) constantFactory0);
        Object object0 = new Object();
        multiValueMap3.putIfAbsent(arrayList1, object0);
        MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedList<Object>> multiValueMap4 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedList<Object>>();
        multiValueMap4.clear();
        multiValueMap2.values();
        HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
        MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<String>> multiValueMap5 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<String>>((Map<AbstractMap.SimpleEntry<Object, Object>, ? super ArrayList<Object>>) hashMap1, (Factory<ArrayList<Object>>) constantFactory0);
        ArrayList<String> arrayList2 = new ArrayList<String>(1860);
        multiValueMap5.removeMapping("Ng%FI*/^fTnQX6 b.", arrayList2);
        MultiValueMap.multiValueMap((Map<LinkedList<LinkedList>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, LinkedList>>>) multiValueMap2, (Factory<Collection<AbstractMap.SimpleEntry<LinkedList, LinkedList>>>) factory0);
        LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
        Factory<LinkedList<Collection<Object>>> factory1 = ConstantFactory.constantFactory(linkedList0);
        MultiValueMap.multiValueMap((Map<LinkedList<Collection>, ? super LinkedList<Collection<Object>>>) null, factory1);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        HashMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Object>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        arrayList0.clear();
        AbstractMap.SimpleEntry<Object, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Collection<Object>>(hashMap0, arrayList0);
        hashMap0.put(abstractMap_SimpleEntry0, (Object) null);
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Collection<Object>>, ? super Collection<LinkedList<Object>>>) hashMap0);
        MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
        multiValueMap0.entrySet();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        multiValueMap0.putAll(linkedList0, (Collection<String>) null);
        MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        arrayList0.add((Object) multiValueMap0);
        Integer integer0 = new Integer(955);
        multiValueMap0.putIfAbsent(arrayList0, integer0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
        MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
        MultiValueMap<ArrayList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap1);
        multiValueMap2.clear();
        MultiValueMap<String, LinkedList<Object>> multiValueMap3 = new MultiValueMap<String, LinkedList<Object>>();
        LinkedList<ArrayList<String>> linkedList1 = new LinkedList<ArrayList<String>>();
        Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList1);
        linkedList1.clear();
        MultiValueMap<String, ArrayList<String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<String>>>) multiValueMap3, factory0);
        MultiValueMap<String, Object> multiValueMap5 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap4);
        multiValueMap5.put("lOuDBz&e lv:\"W", multiValueMap0);
        ArrayList<String> arrayList1 = new ArrayList<String>();
        ConstantFactory<Collection<String>> constantFactory1 = new ConstantFactory<Collection<String>>(arrayList1);
        MultiValueMap<ArrayList<Integer>, Object> multiValueMap6 = null;
        multiValueMap6 = new MultiValueMap<ArrayList<Integer>, Object>((Map<ArrayList<Integer>, ? super Collection<String>>) null, (Factory<Collection<String>>) constantFactory1);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
        multiValueMap1.map = (Map<String, Object>) multiValueMap0;
        multiValueMap1.totalSize();
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        Factory<LinkedList<AbstractMap.SimpleEntry<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<String, Object>>>) hashMap0, factory0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        multiValueMap1.removeMapping(hashMap0, arrayList0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
        MultiValueMap<Object, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
        multiValueMap1.replace((Object) multiValueMap0, (Object) null);
        multiValueMap1.size((Object) multiValueMap0);
        MultiValueMap<ArrayList<Object>, HashMap<Object, String>> multiValueMap2 = new MultiValueMap<ArrayList<Object>, HashMap<Object, String>>();
        String string0 = "bBD1O}";
        multiValueMap2.size((Object) "bBD1O}");
        MultiValueMap<Collection<String>, Collection<String>> multiValueMap3 = new MultiValueMap<Collection<String>, Collection<String>>();
        Set<Map.Entry<Collection<String>, Object>> set0 = multiValueMap3.entrySet();
        MultiValueMap<String, Integer> multiValueMap4 = new MultiValueMap<String, Integer>();
        multiValueMap4.containsValue((Object) null, (Object) set0);
        multiValueMap3.createCollection(0);
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(biFunction0).apply(any(), any());
        multiValueMap1.compute(set0, biFunction0);
        MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap5 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap2);
        multiValueMap5.clear();
        Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Collection<Object>>>) multiValueMap5, factory0);
        multiValueMap4.putAll((Map<? extends String, ?>) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        multiValueMap0.replace("org.apache.commons.collections4.map.MultiValueMap$Values", (Object) arrayList0);
        MultiValueMap<String, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) multiValueMap0);
        multiValueMap1.get(multiValueMap0);
        multiValueMap0.put("InstantiateFactory: Constructor threw an exception", (Object) null);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        multiValueMap0.size((Object) arrayList0);
        HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Collection>, ? super Collection<Collection<Collection>>>) hashMap0);
        MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>();
        Factory<Collection<ArrayList<String>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<String>>) null);
        MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<String>>>) multiValueMap1, factory0);
        multiValueMap2.createCollection(0);
        multiValueMap2.values();
        HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
        MultiValueMap<Object, ArrayList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap1);
        MultiValueMap<Object, Object> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap3);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap4, (Factory<LinkedList<String>>) constantFactory0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
        Iterator<Map.Entry<ArrayList<Object>, Integer>> iterator0 = multiValueMap0.iterator();
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<ArrayList<Object>, String> multiValueMap1 = new MultiValueMap<ArrayList<Object>, String>((Map<ArrayList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
        multiValueMap1.totalSize();
        HashMap<String, Object> hashMap0 = new HashMap<String, Object>(0);
        Factory<Collection<Object>> factory1 = ExceptionFactory.exceptionFactory();
        MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0, factory1);
        MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>>();
        Integer integer0 = new Integer(0);
        multiValueMap3.removeMapping(multiValueMap2, integer0);
        MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap3);
        multiValueMap4.totalSize();
        MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap5 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
        multiValueMap5.clear();
        MultiValueMap<ArrayList<Object>, Integer> multiValueMap6 = new MultiValueMap<ArrayList<Object>, Integer>();
        MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap7 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Integer>>>) multiValueMap6);
        Object object0 = new Object();
        multiValueMap6.remove(object0, (Object) iterator0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        Iterator<LinkedList<Integer>> iterator1 = multiValueMap7.iterator((Object) arrayList0);
        HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
        Class<Object> class0 = Object.class;
        MultiValueMap.multiValueMap((Map<Collection<LinkedList>, ? super Collection<LinkedList<LinkedList>>>) hashMap1, (Class<Collection<LinkedList<LinkedList>>>) class0);
        MultiValueMap<LinkedList<Integer>, Object> multiValueMap8 = new MultiValueMap<LinkedList<Integer>, Object>();
        multiValueMap8.clear();
        MultiValueMap<Object, ArrayList<Object>> multiValueMap9 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap5);
        multiValueMap9.iterator();
        MultiValueMap<String, String> multiValueMap10 = new MultiValueMap<String, String>((Map<String, ? super Collection<Object>>) multiValueMap2, factory1);
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        multiValueMap10.containsValue((Object) iterator1, (Object) arrayList1);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
        MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        arrayList0.add((Object) hashMap0);
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        arrayList0.add((Object) arrayList1);
        arrayList0.trimToSize();
        String string0 = "";
        arrayList0.add((Object) "");
        arrayList0.add((Object) multiValueMap0);
        Object object0 = new Object();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        ArrayList<Object> arrayList2 = new ArrayList<Object>();
        BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.computeIfPresent(arrayList2, biFunction1);
        hashMap0.merge(arrayList1, object0, biFunction0);
        Object object1 = new Object();
        hashMap0.put(arrayList0, object1);
        ArrayList<Object> arrayList3 = new ArrayList<Object>();
        ArrayList<Integer> arrayList4 = new ArrayList<Integer>();
        Integer integer0 = new Integer(0);
        arrayList4.add(integer0);
        multiValueMap0.put(arrayList1, arrayList4);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0, factory0);
        multiValueMap0.put(hashMap0, factory0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
        Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0, factory0);
        MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
        multiValueMap2.containsValue((Object) multiValueMap1, (Object) factory0);
        MultiValueMap<LinkedList<Integer>, String> multiValueMap3 = new MultiValueMap<LinkedList<Integer>, String>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        multiValueMap3.putIfAbsent(linkedList0, "`%D_'9JyG?JX]!fSH");
        multiValueMap2.clear();
        LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
        multiValueMap3.put(linkedList1, multiValueMap2);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
        Integer integer0 = new Integer((-1175));
        multiValueMap0.putIfAbsent(integer0, integer0);
        Integer integer1 = new Integer(0);
        UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
        multiValueMap0.computeIfAbsent(integer1, unaryOperator0);
        Integer integer2 = new Integer(4317);
        multiValueMap0.containsValue((Object) integer2);
        MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Object>>) null);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
        Factory<ArrayList<Object>> factory0 = null;
        MultiValueMap<Object, LinkedList<String>> multiValueMap0 = null;
        multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>((Map<Object, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) null);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
        multiValueMap0.iterator((Object) null);
        Collection<Object> collection0 = multiValueMap0.values();
        HashMap<Collection<String>, Collection<Object>> hashMap0 = new HashMap<Collection<String>, Collection<Object>>();
        hashMap0.getOrDefault((Object) null, collection0);
        MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap0);
        multiValueMap1.iterator();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        multiValueMap1.putAll((Collection<String>) arrayList0, collection0);
        MultiValueMap<Object, LinkedList<String>> multiValueMap2 = new MultiValueMap<Object, LinkedList<String>>();
        multiValueMap2.createCollection(1573);
        Factory<Collection<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) null, factory0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        HashMap<Integer, Collection<Object>> hashMap0 = new HashMap<Integer, Collection<Object>>();
        hashMap0.keySet();
        Integer integer0 = new Integer(0);
        Integer integer1 = new Integer(0);
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        linkedList0.addLast(arrayList0);
        Integer integer2 = new Integer((-1319));
        hashMap0.put(integer2, linkedList0);
        hashMap0.put(integer1, linkedList0);
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        hashMap0.put(integer0, arrayList1);
        Integer integer3 = new Integer(0);
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        hashMap0.replace(integer3, (Collection<Object>) linkedList1);
        MultiValueMap.multiValueMap((Map<HashMap<AbstractMap.SimpleEntry, String>, ? super Collection<LinkedList<ArrayList>>>) hashMap0);
        MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>>();
        multiValueMap0.clear();
        HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap1 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
        MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<Integer>>>) hashMap1);
        multiValueMap1.entrySet();
        MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
        multiValueMap2.totalSize();
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Integer, Object> multiValueMap3 = new MultiValueMap<Integer, Object>((Map<Integer, ? super LinkedList<Object>>) hashMap0, factory0);
        multiValueMap3.totalSize();
        MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap4 = new MultiValueMap<LinkedList<String>, LinkedList<String>>();
        LinkedList<Object> linkedList2 = new LinkedList<Object>();
        multiValueMap4.putIfAbsent((LinkedList<String>) null, linkedList2);
        LinkedList<Collection<Object>> linkedList3 = new LinkedList<Collection<Object>>();
        ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList3);
        MultiValueMap<LinkedList<String>, Object> multiValueMap5 = new MultiValueMap<LinkedList<String>, Object>((Map<LinkedList<String>, ? super LinkedList<Collection<Object>>>) multiValueMap4, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
        multiValueMap5.values();
        multiValueMap3.values();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        HashMap<LinkedList<Integer>, Collection<Object>> hashMap0 = new HashMap<LinkedList<Integer>, Collection<Object>>();
        ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
        MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        multiValueMap1.put((Object) null, arrayList1);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
        LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
        ConstantFactory<LinkedList<ArrayList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Integer>>>(linkedList0);
        MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Integer>>>) constantFactory0);
        multiValueMap1.totalSize();
        multiValueMap1.put("org.apache.commons.collections4.iterators.AbstractEmptyIterator", multiValueMap0);
        multiValueMap1.put("", linkedList0);
        MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = new MultiValueMap<Object, ArrayList<Object>>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        multiValueMap2.containsValue((Object) linkedList0, (Object) linkedList1);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        String string0 = "(00t8~_,Y:i[3Z";
        arrayList0.add("(00t8~_,Y:i[3Z");
        arrayList0.add("(00t8~_,Y:i[3Z");
        multiValueMap0.containsValue((Object) arrayList0);
        ArrayList<String> arrayList1 = new ArrayList<String>();
        arrayList1.add("(00t8~_,Y:i[3Z");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        arrayList1.addAll(0, (Collection<? extends String>) linkedList0);
        multiValueMap0.containsValue((Object) arrayList1);
        MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
        MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
        multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
        multiValueMap1.size((Object) linkedList0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>>();
        BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
        multiValueMap0.forEach(biConsumer0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        ArrayList<AbstractMap.SimpleEntry<String, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleEntry<String, Object>>();
        arrayList0.parallelStream();
        multiValueMap0.mapIterator();
        AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", multiValueMap0);
        Comparator<Map.Entry<Integer, Collection<LinkedList<Object>>>> comparator0 = Map.Entry.comparingByKey();
        Map.Entry.comparingByKey();
        arrayList1.add(abstractMap_SimpleEntry0);
        multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleEntry<String, Object>>) arrayList1);
        MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
        ConstantFactory<ArrayList<String>> constantFactory0 = new ConstantFactory<ArrayList<String>>(arrayList0);
        MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>((Map<Object, ? super ArrayList<String>>) multiValueMap1, (Factory<ArrayList<String>>) constantFactory0);
        multiValueMap2.entrySet();
        MultiValueMap<ArrayList<Integer>, Object> multiValueMap3 = new MultiValueMap<ArrayList<Integer>, Object>();
        MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<ArrayList<Collection<Object>>>>>) multiValueMap3);
        HashMap<HashMap<Collection<Object>, String>, Object> hashMap0 = new HashMap<HashMap<Collection<Object>, String>, Object>();
        LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
        ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory1 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
        MultiValueMap<HashMap<Collection<Object>, String>, ArrayList<Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<HashMap<Collection<Object>, String>, ? super LinkedList<ArrayList<Object>>>) hashMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory1);
        Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
        linkedList0.remove((Object) comparator0);
        MultiValueMap<HashMap<Collection<Object>, String>, Integer> multiValueMap5 = new MultiValueMap<HashMap<Collection<Object>, String>, Integer>((Map<HashMap<Collection<Object>, String>, ? super LinkedList<String>>) multiValueMap4, factory0);
        multiValueMap5.createCollection(4107);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
        multiValueMap0.iterator();
        Class<Integer> class0 = Integer.class;
        MultiValueMap.multiValueMap((Map<LinkedList<Collection>, ? super ArrayList<LinkedList<LinkedList>>>) null, (Class<ArrayList<LinkedList<LinkedList>>>) class0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Integer>>();
        MultiValueMap<Integer, Collection<Integer>> multiValueMap1 = new MultiValueMap<Integer, Collection<Integer>>();
        HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
        Integer integer0 = new Integer((-1));
        BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap1.mapIterator();
        multiValueMap1.computeIfPresent(integer0, biFunction0);
        hashMap0.put((Integer) null, "Class to instantiate must not be null");
        multiValueMap1.putAll((Map<? extends Integer, ?>) hashMap0);
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap1);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
        multiValueMap0.values();
        MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
        multiValueMap1.values();
        MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
        multiValueMap2.totalSize();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        multiValueMap2.put(arrayList0, multiValueMap1);
        HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
        MultiValueMap<ArrayList<Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
        multiValueMap1.putAll((Map<? extends ArrayList<Integer>, ?>) multiValueMap0);
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        multiValueMap1.putAll((Map<? extends ArrayList<Integer>, ?>) multiValueMap0);
        ArrayList<String> arrayList1 = new ArrayList<String>();
        BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
        multiValueMap1.forEach(biConsumer0);
        multiValueMap1.put(arrayList0, arrayList1);
        multiValueMap1.remove((Object) multiValueMap0, (Object) multiValueMap0);
        MultiValueMap<Collection<Object>, Object> multiValueMap2 = new MultiValueMap<Collection<Object>, Object>();
        multiValueMap2.size((Object) multiValueMap1);
        multiValueMap2.clear();
        MultiValueMap<Integer, String> multiValueMap3 = new MultiValueMap<Integer, String>();
        Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap4 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>((Map<Integer, ? super Collection<Object>>) multiValueMap3, factory0);
        multiValueMap4.totalSize();
        MultiValueMap<String, LinkedList<Object>> multiValueMap5 = new MultiValueMap<String, LinkedList<Object>>();
        multiValueMap5.clear();
        MultiValueMap<String, LinkedList<Integer>> multiValueMap6 = new MultiValueMap<String, LinkedList<Integer>>((Map<String, ? super Collection<Object>>) multiValueMap5, factory0);
        multiValueMap6.values();
        HashMap<LinkedList<Object>, Collection<Object>> hashMap0 = new HashMap<LinkedList<Object>, Collection<Object>>();
        MultiValueMap<LinkedList<Object>, Integer> multiValueMap7 = new MultiValueMap<LinkedList<Object>, Integer>((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0, factory0);
        multiValueMap7.containsValue((Object) arrayList1);
        MultiValueMap<ArrayList<Integer>, Integer> multiValueMap8 = new MultiValueMap<ArrayList<Integer>, Integer>();
        multiValueMap8.putAll((Map<? extends ArrayList<Integer>, ?>) multiValueMap1);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        multiValueMap0.totalSize();
        ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
        ConstantFactory.constantFactory((Object) arrayList0);
        Integer integer0 = new Integer((-2147092696));
        multiValueMap0.put(linkedList1, integer0);
        multiValueMap0.iterator((Object) null);
        MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
        multiValueMap1.totalSize();
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        Integer integer0 = new Integer(1);
        hashMap0.put(integer0, integer0);
        MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Integer>>>) hashMap0);
        multiValueMap0.containsValue((Object) hashMap0);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        multiValueMap0.containsValue((Object) arrayList0);
        HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        ArrayList<String> arrayList1 = new ArrayList<String>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.poll();
        hashMap0.put(arrayList1, linkedList0);
        arrayList1.add("");
        MultiValueMap<Object, HashMap<Integer, String>> multiValueMap1 = new MultiValueMap<Object, HashMap<Integer, String>>((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
        multiValueMap1.containsValue((Object) hashMap0);
        multiValueMap1.iterator();
        MultiValueMap<String, LinkedList<Object>> multiValueMap2 = new MultiValueMap<String, LinkedList<Object>>();
        MultiValueMap<String, Collection<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap2);
        multiValueMap3.iterator();
        MultiValueMap<Object, Collection<String>> multiValueMap4 = new MultiValueMap<Object, Collection<String>>();
        multiValueMap4.clear();
        MultiValueMap<Object, Object> multiValueMap5 = new MultiValueMap<Object, Object>();
        multiValueMap5.size((Object) arrayList1);
        multiValueMap5.totalSize();
        HashMap<HashMap<Object, String>, Collection<Object>> hashMap1 = new HashMap<HashMap<Object, String>, Collection<Object>>();
        Factory<Collection<Object>> factory1 = ExceptionFactory.exceptionFactory();
        MultiValueMap<HashMap<Object, String>, String> multiValueMap6 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Object>>) hashMap1, factory1);
        HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
        multiValueMap6.putAll(hashMap2, (Collection<String>) arrayList1);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        arrayList0.retainAll(linkedList0);
        multiValueMap0.iterator((Object) arrayList0);
        Integer integer0 = new Integer(0);
        multiValueMap0.containsValue((Object) integer0);
        HashMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Object>();
        ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
        MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>>((Map<AbstractMap.SimpleEntry<Collection<Object>, Integer>, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) constantFactory0);
        Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
        MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Integer>, Collection<Object>>((Map<AbstractMap.SimpleEntry<Collection<Object>, Integer>, ? super LinkedList<Object>>) multiValueMap1, factory0);
        multiValueMap2.putAll((Map<? extends AbstractMap.SimpleEntry<Collection<Object>, Integer>, ?>) multiValueMap1);
        AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer>(linkedList0, integer0);
        AbstractMap.SimpleEntry<Collection<Object>, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Object>, Integer>(abstractMap_SimpleImmutableEntry0);
        hashMap0.putIfAbsent(abstractMap_SimpleEntry0, multiValueMap1);
        HashMap<ArrayList<Object>, Object> hashMap1 = new HashMap<ArrayList<Object>, Object>();
        MultiValueMap<ArrayList<Object>, Integer> multiValueMap3 = new MultiValueMap<ArrayList<Object>, Integer>((Map<ArrayList<Object>, ? super LinkedList<Object>>) hashMap1, factory0);
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<String>>>) multiValueMap3);
        MultiValueMap<ArrayList<Object>, String> multiValueMap4 = new MultiValueMap<ArrayList<Object>, String>();
        multiValueMap4.iterator((Object) multiValueMap2);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        multiValueMap0.totalSize();
        ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
        Integer integer0 = new Integer((-2147092696));
        multiValueMap0.put(linkedList1, integer0);
        multiValueMap0.iterator((Object) linkedList0);
        MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
        multiValueMap1.totalSize();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("HR:");
        LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        linkedList0.add(linkedList1);
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) linkedList0);
        arrayList0.listIterator(0);
        multiValueMap0.values();
        arrayList0.add("The comparator must not be null");
        multiValueMap0.createCollection(145);
        Collection<Object> collection0 = multiValueMap0.values();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn("The comparator must not be null").when(biFunction0).apply(any(), any());
        multiValueMap0.compute(arrayList0, biFunction0);
        multiValueMap0.totalSize();
        MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
        multiValueMap1.size((Object) multiValueMap0);
        Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap2 = new MultiValueMap<LinkedList<String>, LinkedList<String>>((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap1, factory0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("The comparator must not be null", "s+bO><");
        multiValueMap2.removeMapping(hashMap0, collection0);
        HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>(0);
        MultiValueMap<Collection<Object>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap1);
        multiValueMap3.putAll((Map<? extends Collection<Object>, ?>) hashMap1);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("HR:");
        LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        linkedList0.add(linkedList1);
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) linkedList0);
        arrayList0.listIterator(0);
        arrayList0.add("The comparator must not be null");
        multiValueMap0.createCollection(145);
        Collection<Object> collection0 = multiValueMap0.values();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(biFunction0).apply(any(), any());
        multiValueMap0.compute(arrayList0, biFunction0);
        multiValueMap0.totalSize();
        MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
        multiValueMap1.size((Object) multiValueMap0);
        Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap2 = new MultiValueMap<LinkedList<String>, LinkedList<String>>((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap1, factory0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        multiValueMap2.map = null;
        hashMap0.put("The comparator must not be null", "s+bO><");
        multiValueMap2.removeMapping(hashMap0, collection0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
        Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>((Map<Collection<Object>, ? super LinkedList<Integer>>) hashMap0, factory0);
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        hashMap0.put(arrayList0, multiValueMap0);
        HashMap<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, Collection<Object>> hashMap1 = new HashMap<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, Collection<Object>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Factory<LinkedList<Object>> factory1 = ConstantFactory.constantFactory(linkedList0);
        LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
        AbstractMap.SimpleImmutableEntry<LinkedList<Integer>, Collection<Object>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<LinkedList<Integer>, Collection<Object>>(linkedList1, arrayList0);
        AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>(abstractMap_SimpleImmutableEntry0);
        hashMap1.put(abstractMap_SimpleEntry0, arrayList0);
        MultiValueMap<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, ArrayList<Object>>((Map<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, ? super LinkedList<Object>>) hashMap1, factory1);
        MultiValueMap<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, ArrayList<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, ArrayList<Object>>((Map<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, ? super LinkedList<Object>>) multiValueMap1, factory1);
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<LinkedList<Integer>, Collection<Object>>, ? super Collection<ArrayList<HashMap<String, Object>>>>) multiValueMap2);
        multiValueMap0.getCollection(hashMap0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        multiValueMap0.containsValue((Object) arrayList0);
        HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        ArrayList<String> arrayList1 = new ArrayList<String>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.poll();
        hashMap0.put(arrayList1, linkedList0);
        hashMap0.put((Object) null, (Collection<Object>) null);
        MultiValueMap<Object, HashMap<Integer, String>> multiValueMap1 = new MultiValueMap<Object, HashMap<Integer, String>>((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
        multiValueMap1.containsValue((Object) hashMap0);
    }
}
