/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:25:58 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.junit.runner.RunWith;

public class CSVParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringReader stringReader0 = new StringReader("Delimiter=<");
        stringReader0.close();
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
        NetworkHandling.createRemoteTextFile(evoSuiteURL0, "[}]5S`H3j0.<!}IB<{]");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('x');
        Character character0 = new Character('x');
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat3);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        MockFile mockFile0 = new MockFile("-<p'c[jG?}XU(]");
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-<p'c[jG?}XU(]/org.apache.commons.csv.CSVParser$2/-<p'c[jG?}XU(]0-<p'c[jG?}XU(]");
        byte[] byteArray0 = new byte[1];
        FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
        MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.csv.CSVParser$2");
        File file0 = MockFile.createTempFile("-<p'c[jG?}XU(]", "-<p'c[jG?}XU(]", (File) mockFile1);
        CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Character character0 = new Character('`');
        Quote quote0 = Quote.ALL;
        Character character1 = Character.valueOf('5');
        String[] stringArray0 = new String[2];
        stringArray0[0] = "r";
        CSVFormat cSVFormat0 = new CSVFormat('{', character0, quote0, character1, character0, false, true, "m,-Hym", "m,-Hym", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("m,-Hym", cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Character character0 = new Character('`');
        Quote quote0 = Quote.ALL;
        Character character1 = Character.valueOf('5');
        String[] stringArray0 = new String[2];
        stringArray0[0] = "r";
        CSVFormat cSVFormat0 = new CSVFormat('{', character0, quote0, character1, character0, false, true, "m,-Hym", "m,-Hym", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("m,-Hym", cSVFormat0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser cSVParser0 = CSVParser.parse("reader", cSVFormat0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        cSVParser0.close();
        boolean boolean0 = cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        List<CSVRecord> list0 = cSVParser0.getRecords();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringReader stringReader0 = new StringReader("!G#Wv");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("-<p'c[jG?}XU(]");
        cSVFormat1.parse(stringReader0);
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("-<p'c[jG?}XU(]");
        StringReader stringReader0 = new StringReader("-<p'c[jG?}XU(]");
        CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        URL uRL0 = MockURL.getFileExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
        NetworkHandling.createRemoteTextFile(evoSuiteURL0, "[}]5S`H3j0.<!}IB<{]");
        Character character0 = new Character('x');
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        Quote quote0 = Quote.NON_NUMERIC;
        String[] stringArray0 = new String[8];
        CSVFormat cSVFormat0 = new CSVFormat('0', character0, quote0, character0, character0, false, false, "&gHsATfMT<)UJA ", "org.apache.commons.csv.CSVParser$1", stringArray0, true);
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        URL uRL0 = MockURL.getFtpExample();
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Character character0 = new Character('W');
        Quote quote0 = Quote.MINIMAL;
        String[] stringArray0 = new String[6];
        CSVFormat cSVFormat0 = new CSVFormat(']', character0, quote0, character0, character0, false, false, "Escape=<", "reader", stringArray0, false);
        CSVParser.parse("No more CSV records available", cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        CSVParser.parse("", (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Character character0 = new Character('`');
        Quote quote0 = Quote.ALL;
        Character character1 = new Character('5');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('{', character0, quote0, character1, character0, false, true, "`tCij(tDzP<2@*XB(C", "`tCij(tDzP<2@*XB(C", stringArray0, true);
        CSVParser.parse("`tCij(tDzP<2@*XB(C", cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        File file0 = MockFile.createTempFile("qivQG~Ob6", "");
        Character character0 = Character.valueOf('3');
        Quote quote0 = Quote.ALL;
        String[] stringArray0 = new String[4];
        CSVFormat cSVFormat0 = new CSVFormat('k', character0, quote0, character0, character0, true, true, "qivQG~Ob6", "", stringArray0, false);
        CSVParser.parse(file0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser.parse((File) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        MockFile mockFile0 = new MockFile("-<p'c[jG?}XU(]");
        File file0 = MockFile.createTempFile("-<p'c[jG?}XU(]", "-<p'c[jG?}XU(]", (File) mockFile0);
        FileSystemHandling.shouldAllThrowIOExceptions();
        CSVParser.parse(file0, cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        MockFile mockFile0 = new MockFile("-<p'c[jG?}XU(]");
        CSVParser.parse((File) mockFile0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        StringReader stringReader0 = new StringReader("");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        cSVParser0.close();
        cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        File file0 = MockFile.createTempFile("VRh$9KpXL5", "");
        CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
        FileSystemHandling.shouldAllThrowIOExceptions();
        cSVParser0.close();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        StringReader stringReader0 = new StringReader("rfo^0AJV+Bf0iZ5MVW");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('o');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('o');
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVParser cSVParser0 = CSVParser.parse("CSVParser has been closed", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/VRh$9KpXL50");
        FileSystemHandling.appendLineToFile(evoSuiteFile0, "$@4");
        File file0 = MockFile.createTempFile("VRh$9KpXL5", "");
        CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
        cSVParser0.getRecords();
        long long0 = cSVParser0.getCurrentLineNumber();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        StringReader stringReader0 = new StringReader("0 |c_mt$2]#gg;3");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.close();
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        Character character0 = Character.valueOf('4');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('C');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, "string", "", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        cSVParser0.close();
        cSVParser0.getRecords();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("uc`ro3-hNb>\bI+", cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        Character character0 = new Character('`');
        Quote quote0 = Quote.ALL;
        Character character1 = Character.valueOf(':');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('{', character0, quote0, character1, character0, false, false, "0 |c_mt$2]#gg;r", "0 |c_mt$2]#gg;r", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("0 |C_St$2]#GG;r{f+", cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        Character character0 = new Character('`');
        Quote quote0 = Quote.ALL;
        Character character1 = Character.valueOf(':');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('{', character0, quote0, character1, character0, false, false, "0 |c_mt$2]#gg;r", "0 |c_mt$2]#gg;r", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("0 |C_St$2]#GG;r{f+", cSVFormat0);
        List<CSVRecord> list0 = cSVParser0.getRecords();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
        NetworkHandling.createRemoteTextFile(evoSuiteURL0, "0 |c_mt$2]#gg;3");
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("VRh$9KpXL5", cSVFormat0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("VRh$9KpXL5", cSVFormat0);
        cSVParser0.getHeaderMap();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        Character character0 = new Character('`');
        Quote quote0 = Quote.ALL;
        Character character1 = new Character('D');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('\u0081', character0, quote0, character1, character0, true, true, "m,-Hym", "m,-Hym", stringArray0, true);
        CSVParser cSVParser0 = CSVParser.parse("m,-Hym", cSVFormat0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("VRh$9KpXL5", cSVFormat0);
        long long0 = cSVParser0.getCurrentLineNumber();
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        boolean boolean0 = cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
    }
}
