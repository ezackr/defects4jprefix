/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:42:12 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.junit.runner.RunWith;

public class CSVFormatTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
        CSVFormat cSVFormat1 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
        CSVFormat cSVFormat1 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
        CSVFormat cSVFormat1 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
        CSVFormat cSVFormat1 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
        CSVFormat cSVFormat1 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
        CSVFormat cSVFormat1 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("y");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("y");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("y");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("y");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("y");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("y");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test00544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("9G\"BS");
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test00645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withRecordSeparator("");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withRecordSeparator("");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00747() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00752() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00753() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00754() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00855() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00856() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00857() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00858() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00859() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00860() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00861() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00862() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00863() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("tM");
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00964() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00965() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00972() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00973() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01074() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01075() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01076() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test01079() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01081() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('|');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test01187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test01190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('S');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test01296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test01297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test013100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test013101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test013102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test013103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test013104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test013105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test013106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test014107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test014108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test014109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test014110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test014111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test014112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test014113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test014114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test015115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test015116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test016117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test016118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test016119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test016120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test016121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test016122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test016123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test016124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test016125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test016126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test016127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test016128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test017129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test017130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test017131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test017132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test017133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test017134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test017135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test018136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test018137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test018138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test018139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test018140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test018141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test018142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test018143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test019144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test019145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test019146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test019147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test019148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test019149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test019150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test019151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test020152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test020153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test020154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test020155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test020156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test020157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test020158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test021159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('c');
        Character character0 = Character.valueOf('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test021160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('c');
        Character character0 = Character.valueOf('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test021161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('c');
        Character character0 = Character.valueOf('c');
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test022162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test022163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test022164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test022165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test022166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test022167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test022168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test022169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test022170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test023171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test023172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test023173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test023174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test023175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test023176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test023177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test023178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test024179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test024180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test025181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test025182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test025183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test025184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test025185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test025186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test025187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test025188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test026189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test026190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test026191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test026192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test026193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test026194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test026195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.getNullString();
    }

    @Test(timeout = 4000)
    public void test026196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test026197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("IUgG1T[MPmf6/yGLlvX");
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test027198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withNullString("UIlq,*d$6R");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test027199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withNullString("UIlq,*d$6R");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test028200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test028201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test028202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test028203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test028204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test028205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test028206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test029207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test029208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test029209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test029210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test029211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test029212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test029213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test029214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test030215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test030216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test030217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test030218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test030219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test030220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test030221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test030222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test031223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test031224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test031225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test031226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test032227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test032228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test032229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test032230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test032231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test032233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test033235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test033236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test033237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test033238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test033239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test033240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test033241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test034242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test034243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test034244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test034245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test034246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test034247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test034248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test034249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test034250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test034251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test034252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test035253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test035254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test036255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test036256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test036257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test036258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test036259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test036260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test036261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test036262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test036263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test037264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test037265() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test037266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test037267() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test037268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test037269() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test037270() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test037271() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("LEQ^p!1O1??q{A");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test038272() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('B');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "";
        stringArray0[1] = "+";
        stringArray0[2] = "-f+x!pluXE";
        stringArray0[3] = "iv|j!27lXl";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test038273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('B');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "";
        stringArray0[1] = "+";
        stringArray0[2] = "-f+x!pluXE";
        stringArray0[3] = "iv|j!27lXl";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('B');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "";
        stringArray0[1] = "+";
        stringArray0[2] = "-f+x!pluXE";
        stringArray0[3] = "iv|j!27lXl";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test038275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('B');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "";
        stringArray0[1] = "+";
        stringArray0[2] = "-f+x!pluXE";
        stringArray0[3] = "iv|j!27lXl";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test038276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('B');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "";
        stringArray0[1] = "+";
        stringArray0[2] = "-f+x!pluXE";
        stringArray0[3] = "iv|j!27lXl";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test039277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test039278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test039279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test039280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test039281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test039282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test039283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test039284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test040285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((String[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test040286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((String[]) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test041287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test041288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        cSVFormat1.withHeader(stringArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test042289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test042290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test043291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test043292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test043293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test043294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test043295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test043296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test043297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test043298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test044299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test044300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test044301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test044302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test044303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test044304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test044305() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test044306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test045307() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('z');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test045308() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('z');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test045309() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('z');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test045310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('z');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test045311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('z');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test045312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('z');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test045313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('z');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test046314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = new Character('s');
        cSVFormat1.withEscape(character0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test046315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = new Character('s');
        cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test047316() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test047317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test047318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test047319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test047320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test047321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test047322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test047323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test048324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test048325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test048326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test048327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test048328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test048329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test048330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test048331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test049332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test049333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test049334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test049335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test049336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test049337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test049338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test049339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test050340() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test050341() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test050342() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test051343() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test051344() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat3.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test051345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test051346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test051347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test051348() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test051349() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test051350() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('^');
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test052351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test052352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test052354() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052355() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test052356() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test052357() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test052358() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test053359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test053360() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test053361() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test053362() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test053363() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test053364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test053365() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test054366() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test054367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test054368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test054369() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test054370() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test054371() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test054372() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test054373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test055374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test055375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test055377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055378() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test055379() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test055380() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test056381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test056382() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test056383() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test056384() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test056385() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test056386() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test056387() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test056388() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test057389() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test057390() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test057391() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057392() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test057393() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057394() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test057395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test058396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat4.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test058397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test058398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test058399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat4.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test059400() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test059401() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test059402() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test059403() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test059404() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test059405() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test059406() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test059407() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test059408() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test060409() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test060410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test060411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test060412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test060413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test060414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test060415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test060416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test061417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test061418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test061419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test061420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test061421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test061422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test061423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test061424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test061425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test062426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('c');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test062427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('c');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test062428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('c');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test063429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test063430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test063431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test063432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test063433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test063434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test064435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test064436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test064437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test064438() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test064439() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test064440() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test064441() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test065442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test065443() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test065444() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test065445() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test065446() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test065447() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test065448() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test065449() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test066450() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test066451() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test066452() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test066453() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test066454() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test066455() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test066456() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test066457() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test067458() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat0.RFC4180.print(charArrayWriter0);
    }

    @Test(timeout = 4000)
    public void test068459() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("P8lB8X`\"]g*");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test068460() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("P8lB8X`\"]g*");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test068461() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("P8lB8X`\"]g*");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test068462() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("P8lB8X`\"]g*");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test068463() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("P8lB8X`\"]g*");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test068464() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("P8lB8X`\"]g*");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test068465() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("P8lB8X`\"]g*");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test069466() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test069467() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test069468() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test069469() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test069470() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test069471() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test069472() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test069473() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test070474() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test070475() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test070476() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test070477() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test070478() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test071479() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test071480() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test071481() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test071482() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test071483() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test071484() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test071485() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test071486() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test072487() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test072488() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test072489() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test072490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test072491() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test072492() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test072493() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test073494() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test073495() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test073496() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test073497() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test073498() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test074499() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test074500() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test074501() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test074502() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test074503() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test074504() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test074505() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test074506() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test075507() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test075508() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test075509() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test075510() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test075511() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test075512() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test075513() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test075514() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test076515() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test076516() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test076517() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test076518() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test076519() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076520() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test077522() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test078523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test078524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test078525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test078526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test078527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test078528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test078529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test078530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test079531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = cSVFormat0.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test080532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test081533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test081534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test081535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test081536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test081537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test082538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test082539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test082540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test082541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test082542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test082543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test082544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test083545() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test083546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test084547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        Character character0 = Character.valueOf('c');
        cSVFormat1.withQuote(character0);
    }

    @Test(timeout = 4000)
    public void test085548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(';');
        cSVFormat1.withQuote(';');
    }

    @Test(timeout = 4000)
    public void test086549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
        Character character0 = Character.valueOf('x');
        cSVFormat1.withEscape(character0);
    }

    @Test(timeout = 4000)
    public void test087550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.parse((Reader) null);
    }

    @Test(timeout = 4000)
    public void test088551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.format((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test089552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test089553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test089554() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test089555() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test089556() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test089557() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test089558() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test090559() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test090560() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test090561() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test090562() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test090563() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test090564() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test090565() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test090566() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test090567() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test091568() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test092569() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test093570() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094571() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094572() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test094573() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test094574() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094575() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test094576() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test094577() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test094578() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test095579() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "_uq'";
        stringArray0[1] = "\r\n";
        stringArray0[2] = "J?`=t'w}9O";
        stringArray0[3] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test095580() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "_uq'";
        stringArray0[1] = "\r\n";
        stringArray0[2] = "J?`=t'w}9O";
        stringArray0[3] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test095581() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "_uq'";
        stringArray0[1] = "\r\n";
        stringArray0[2] = "J?`=t'w}9O";
        stringArray0[3] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test095582() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "_uq'";
        stringArray0[1] = "\r\n";
        stringArray0[2] = "J?`=t'w}9O";
        stringArray0[3] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test095583() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "_uq'";
        stringArray0[1] = "\r\n";
        stringArray0[2] = "J?`=t'w}9O";
        stringArray0[3] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test095584() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "_uq'";
        stringArray0[1] = "\r\n";
        stringArray0[2] = "J?`=t'w}9O";
        stringArray0[3] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test095585() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "_uq'";
        stringArray0[1] = "\r\n";
        stringArray0[2] = "J?`=t'w}9O";
        stringArray0[3] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test096586() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = cSVFormat0.getHeader();
    }

    @Test(timeout = 4000)
    public void test097587() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test098588() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test099589() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test100590() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String string0 = cSVFormat0.getNullString();
    }

    @Test(timeout = 4000)
    public void test102591() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test103592() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test104593() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test105594() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = cSVFormat0.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test106595() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test106596() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test106597() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test106598() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test106599() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test107600() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        cSVFormat0.DEFAULT.withQuoteMode(quoteMode0);
    }

    @Test(timeout = 4000)
    public void test108601() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.withEscape('W');
    }

    @Test(timeout = 4000)
    public void test109602() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuote('&');
        Character character0 = new Character('&');
        cSVFormat1.withCommentMarker(character0);
    }

    @Test(timeout = 4000)
    public void test110603() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        cSVFormat0.withCommentMarker(')');
    }

    @Test(timeout = 4000)
    public void test111604() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        cSVFormat0.withEscape('G');
    }

    @Test(timeout = 4000)
    public void test112605() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('c');
        cSVFormat1.withDelimiter('c');
    }

    @Test(timeout = 4000)
    public void test113606() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test113607() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test114608() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        String string0 = cSVFormat0.toString();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test114609() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test115610() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String string0 = cSVFormat0.MYSQL.toString();
    }

    @Test(timeout = 4000)
    public void test116611() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("|'OZ1e<M]/v+rCrs'l");
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test116612() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("|'OZ1e<M]/v+rCrs'l");
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test117613() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test117614() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test118615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test119616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test119617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test119618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test119619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test119620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test119621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test119622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test120623() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("\r\n");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test120624() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("\r\n");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test120625() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("\r\n");
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test120626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("\r\n");
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test120627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("\r\n");
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test121628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
        cSVFormat1.hashCode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test121629() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test121630() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test121631() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test121632() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test122633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(';');
        cSVFormat1.hashCode();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test122634() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(';');
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test122635() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(';');
        cSVFormat1.hashCode();
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test122636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(';');
        cSVFormat1.hashCode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test122637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(';');
        cSVFormat1.hashCode();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test123638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test123639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test123640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.hashCode();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test123641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test123642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.hashCode();
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test123643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.hashCode();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test124644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test124645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test124646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test124647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test124648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test124649() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test124650() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test124651() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test124652() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test125653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test125654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test125655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test125656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test125657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test125658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test125659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test125660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test126661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test126662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test126663() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test126664() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test126665() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test126666() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test126667() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test126668() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test127669() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test127670() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test127671() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test127672() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test127673() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test127674() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test127675() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test128676() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test128677() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test128678() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test128679() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test128680() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test128681() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test128682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test128683() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "EOF whilst processing escape sequence";
        stringArray0[1] = "WV$!Ur+ir|dy*rob";
        stringArray0[2] = "cp1uKvx";
        stringArray0[3] = "kdHf";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test129684() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("0J");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test129685() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("0J");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test129686() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("0J");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test129687() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("0J");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test129688() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("0J");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test129689() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("0J");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test130690() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test130691() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test130692() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test130693() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test130694() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test130695() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test130696() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test130697() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test130698() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("A5pg42QN9hKW?Tjpwoo");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test131699() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test131700() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test131701() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test131702() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test131703() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test131704() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test131705() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test131706() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test132707() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test132708() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test132709() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test132710() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test132711() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test132712() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test132713() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test132714() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('c');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test133715() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test133716() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test133717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test133718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test133719() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test133720() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test133721() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test133722() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test133723() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test133724() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test134725() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test134726() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test134727() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test134728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test134729() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test134730() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test134731() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test134732() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test134733() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test135734() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test135735() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test135736() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test135737() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test135738() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test135739() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test135740() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test135741() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test135742() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test136743() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test137744() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test137745() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test137746() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test137747() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test137748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test137749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test138750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test138751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test138752() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test138753() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test138754() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test138755() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test138756() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test138757() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test139758() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test140759() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.equals("");
    }

    @Test(timeout = 4000)
    public void test141760() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test142761() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test143762() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test143763() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test143764() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test143765() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test143766() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test143767() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test143768() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test143769() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test143770() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test144771() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[3];
        cSVFormat0.withHeader(stringArray0);
    }

    @Test(timeout = 4000)
    public void test145772() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test145773() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test145774() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test145775() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test145776() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test146777() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test146778() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test146779() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test146780() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test146781() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test146782() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test146783() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test146784() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test147785() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat0.TDF.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test148786() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test149787() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test149788() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test149789() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test149790() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test149791() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test149792() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test149793() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test149794() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test150795() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test150796() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test150797() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test150798() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test150799() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test150800() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test150801() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test150802() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('H');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test151803() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreEmptyLines(false);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test151804() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreEmptyLines(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test152805() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test152806() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        cSVFormat0.MYSQL.format(stringArray0);
        cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test153807() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.DEFAULT.print((Appendable) null);
    }

    @Test(timeout = 4000)
    public void test154808() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test154809() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test154810() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test154811() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test154812() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test154813() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test154814() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test154815() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[6];
        stringArray0[0] = "6}E#3vZEqES<";
        stringArray0[1] = "";
        stringArray0[2] = "^jVWwc6";
        stringArray0[4] = "kAu8{XY1-<";
        stringArray0[5] = "m[";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getDelimiter();
    }
}
