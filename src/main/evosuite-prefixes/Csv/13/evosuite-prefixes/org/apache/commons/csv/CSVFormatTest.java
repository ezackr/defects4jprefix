/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:44:05 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.junit.runner.RunWith;

public class CSVFormatTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0007() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test0008() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00649() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00650() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00651() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00652() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test00656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test00758() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00759() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00760() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00761() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00762() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00763() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00764() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00765() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00766() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00767() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00768() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00769() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00870() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00871() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00872() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00873() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00874() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00875() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00876() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00877() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00878() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00979() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00980() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00981() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00982() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00983() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00984() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00985() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00986() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test00987() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00988() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01089() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01090() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01091() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01092() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test01093() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01094() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test01095() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01096() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01097() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test01199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test011100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test011101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test011102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test011103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test011104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test011105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test011106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test012107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.withRecordSeparator("S9!tjmt06ctf:57#Z");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test012108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.withRecordSeparator("S9!tjmt06ctf:57#Z");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test012109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.withRecordSeparator("S9!tjmt06ctf:57#Z");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test013110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test013111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test013112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test013113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test013114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test013115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test013116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test013117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test013118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test013119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test013120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test014121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test014122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test014123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test014124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test014125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test014126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test014127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test014128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test014129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test014130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test015131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test015132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test015133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test015134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test016135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test016136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test016137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test016138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test016139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test016140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test016141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test017142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test017143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test017144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test017145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test017146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test017147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test017148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test017149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test018150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test018151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test018152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test018153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test018154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test018155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test018156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test018157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test018158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test018159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test019160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test019161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test019162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test019163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test019164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test019165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test019166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test019167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test019168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test020169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test020170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test020171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test020172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test020173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test020174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test020175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test020176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test020177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test021178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test021179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test021180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test021181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test021182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test021183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test021184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test021185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test021186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('*');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test022187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test022188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test022189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test022190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test022191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test022192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test022193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test022194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test022195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test022196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test023197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test023198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test023199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test023200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test023201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test023202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test023203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test023204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test023205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test023206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test024208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test024209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test024211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test024213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test024214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test024215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test024216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test025217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test025218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test025219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test025220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test025221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test025222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test025223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test025224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test025225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test025226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('4');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test026227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test026228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test026229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test026230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test027231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test027232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test027233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test027234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test027235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test027236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test027237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test027238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test027239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test028240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test028241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test028242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test028243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test028244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test028245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test028246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test028247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test028248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test028249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test029250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test029251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test029252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test029253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test029254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test029255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test029256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test029257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test029258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test029259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test030260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test030261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test030262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.withNullString("yA3;hC^Qiz7E");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test031263() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test031264() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test031265() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test031266() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test031267() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test031268() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test031269() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test031270() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test031271() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test031272() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test032274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test032275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test032276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test032277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test032278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test032279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test032281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test032282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test032283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test032285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test032286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test033287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test033288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test033289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test033290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test033291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test033292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test033293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test033294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test033295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test033296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test034297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test034298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test034299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test034300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test034301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test034302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test035303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test035304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test035305() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test035306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test035307() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test035308() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test036309() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test036310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test036311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test036312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test036313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test036314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test036315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test036316() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test036317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test036318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test036319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test036320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test036321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test036322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test037323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test037324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test037325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test037326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test037327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test037328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test037329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test037330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test037331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test037332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test037333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test037334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test037335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test038337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test038338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test038339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test038340() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test038341() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test038342() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test038343() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test038344() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test038346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test038347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test039348() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test039349() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test039350() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test039351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test039352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test039353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test040354() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test040355() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test040356() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test040357() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test040358() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test040359() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test040360() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test040361() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test040362() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test040363() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test041364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test041365() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test041366() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test041367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test041368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test041369() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test041370() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test041371() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test041372() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test041373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test042374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test042375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test042376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test042377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test042378() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test042379() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test042380() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test042381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test042382() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test042383() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test042384() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test042385() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test043386() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test043387() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test043388() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test043389() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test043390() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test043391() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test043392() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test043393() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test043394() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test043395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test043396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test044397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test044398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test044399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test044400() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test044401() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test044402() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test044403() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test044404() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test044405() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test044406() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test044407() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test044408() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test045409() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test045410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test045411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test045412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test045413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test045414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test045415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test045416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test045417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test045418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test045419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test046420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test046421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test046422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test046423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test046424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test046425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test046426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test046427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test046428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test046429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test046430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test046431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test046432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test046433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test047434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test047435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test047436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test047437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test047438() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test047439() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test047440() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test048441() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test048442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test048443() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test048444() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test048445() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test048446() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test048447() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test048448() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test048449() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test049450() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test049451() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test049452() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test049453() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test049454() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test050455() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test050456() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test050457() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test050458() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test050459() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test050460() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test050461() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test050462() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test050463() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test050464() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test050465() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test050466() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test050467() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test050468() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test051469() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test051470() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test051471() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test051472() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test051473() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test051474() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test051475() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test051476() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test051477() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test051478() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test051479() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test051480() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test051481() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test051482() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test052483() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052484() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test052485() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test052486() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test052487() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test052488() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test052489() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test052491() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test053492() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test053493() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test053494() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test053495() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test053496() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test053497() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test053498() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test054499() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test054500() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test054501() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test054502() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test054503() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test054504() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test054505() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test054506() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test054507() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test055508() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test055509() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055510() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test055511() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test055512() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test055513() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test055514() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055515() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test055516() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test056517() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
        cSVFormat3.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test056518() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
        cSVFormat4.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test056519() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test056520() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
        cSVFormat3.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test057521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test057522() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test057523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test057524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test057525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test057527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test058529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test058530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test058531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test058532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test058533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test058534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test058535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test058536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test058537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test059538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test059539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test059540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test059541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test059542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test059543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test059544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test059545() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test059546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test059547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test060548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test060549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test060550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test060551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test060552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test060553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test060554() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test060555() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test060556() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test060557() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test061558() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat4.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test061559() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat4.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test061560() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test061561() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test061562() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test062563() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test062564() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test062565() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test062566() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test062567() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test062568() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test062569() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test062570() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test062571() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test062572() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test063573() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test063574() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test063575() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test063576() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test063577() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test063578() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test063579() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test063580() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test063581() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test064582() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test064583() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test064584() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test064585() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test064586() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test064587() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test064588() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test064589() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test064590() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test065591() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test065592() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test065593() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test066594() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test066595() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test066596() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test066597() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test066598() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test066599() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test066600() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test066601() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test066602() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test066603() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test067604() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test067605() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test067606() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test068607() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test068608() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test068609() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test068610() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test068611() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test068612() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test068613() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test068614() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test068615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test068616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test069617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test069618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test069619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test069620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test069621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test069622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test069623() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test069624() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test069625() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test070626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test070627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test070628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test070629() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test070630() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test070631() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test070632() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test070633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test070634() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test070635() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test071636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test071637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test071638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test071639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test071640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test071641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test071642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test071643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test071644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test071645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test072646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test072647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test072648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test072649() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test072650() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test072651() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test072652() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test072653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test072654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test073655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Character character0 = new Character(')');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test073656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Character character0 = new Character(')');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test073657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Character character0 = new Character(')');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test074658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test074659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test074660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test074661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test074662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test074663() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test074664() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test074665() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test074666() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('/');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test075667() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test075668() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test075669() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test075670() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test075671() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test075672() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test075673() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test075674() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test075675() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test075676() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test076677() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test076678() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076679() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test076680() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test076681() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test076682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test076683() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076684() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test076685() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test076686() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test076687() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test077688() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test077689() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat3.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test077690() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test077691() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test077692() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test077693() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test077694() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test077695() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test077696() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test077697() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('t');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test078698() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test078699() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test078700() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test078701() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test078702() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test078703() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test078704() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test078705() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test078706() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test079707() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test079708() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test079709() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test079710() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test079711() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test079712() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test079713() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test079714() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test079715() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('&');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test080716() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test080717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test080718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getNullString();
    }

    @Test(timeout = 4000)
    public void test080719() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test080720() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test080721() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test080722() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test080723() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test080724() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test080725() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test081726() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test081727() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test081728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test081729() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test081730() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test081731() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test081732() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test081733() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test081734() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test082735() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test082736() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test082737() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test082738() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test082739() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test082740() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test082741() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test082742() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test082743() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test083744() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test083745() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test083746() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test083747() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test083748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test083749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test083750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test083751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        Character character0 = new Character('j');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test084752() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test084753() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test084754() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test084755() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test084756() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test084757() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test084758() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test084759() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test084760() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test085761() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        Character character0 = new Character('^');
        cSVFormat3.withCommentMarker(character0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test085762() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        Character character0 = new Character('^');
        cSVFormat3.withCommentMarker(character0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test085763() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        Character character0 = new Character('^');
        cSVFormat3.withCommentMarker(character0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test086764() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test086765() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test086766() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test086767() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test086768() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test086769() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test086770() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test086771() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test086772() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test087773() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test087774() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test087775() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test087776() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test087777() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test087778() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test087779() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test087780() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test087781() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat3.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test087782() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('|');
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test088783() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test088784() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test088785() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test088786() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test088787() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test088788() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test088789() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test088790() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test088791() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test088792() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test089793() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test089794() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test089795() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test089796() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test089797() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test089798() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test089799() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test089800() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test090801() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test090802() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test090803() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test090804() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test090805() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test090806() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test090807() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test090808() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test090809() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test090810() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test091811() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test091812() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test091813() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test091814() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test091815() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test091816() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test091817() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test091818() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test091819() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test091820() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test091821() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test092822() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat3.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test092823() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test092824() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat4.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test092825() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test092826() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat4.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test092827() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test093828() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test093829() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test093830() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test093831() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test093832() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test093833() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test093834() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test093835() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094836() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test094837() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test094838() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094839() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test094840() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094841() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test094842() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test095843() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test095844() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test095845() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test095846() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test095847() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test095848() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test096849() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test097850() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test098851() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test098852() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test098853() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test098854() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test098855() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test098856() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test098857() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test098858() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test098859() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test099860() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test099861() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test099862() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test099863() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test099864() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test099865() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test100866() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test100867() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test100868() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test100869() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test100870() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test100871() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test100872() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test100873() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test100874() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test101875() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test101876() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test101877() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test101878() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test101879() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test101880() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test102881() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test102882() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test102883() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test102884() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test102885() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test102886() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test102887() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test102888() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test102889() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test102890() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test103891() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test103892() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test103893() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test103894() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test103895() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test103896() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test103897() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test103898() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test103899() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test104900() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test104901() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test104902() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test105903() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test106904() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test106905() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test106906() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test106907() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test106908() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test106909() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test106910() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test106911() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test106912() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        Character character0 = cSVFormat1.getEscapeCharacter();
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test107913() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test108914() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test108915() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test108916() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test108917() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test108918() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test108919() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test109920() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test109921() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test109922() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test109923() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test109924() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test109925() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test109926() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test109927() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test109928() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test109929() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
        Character character0 = cSVFormat1.getCommentMarker();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test110930() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test110931() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test110932() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test111933() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.withQuote(character0);
    }

    @Test(timeout = 4000)
    public void test112934() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('V');
        cSVFormat1.withQuote('V');
    }

    @Test(timeout = 4000)
    public void test113935() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn((-334)).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        cSVFormat0.withHeader(resultSet0);
    }

    @Test(timeout = 4000)
    public void test114936() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
        Character character0 = Character.valueOf('V');
        cSVFormat0.withEscape(character0);
    }

    @Test(timeout = 4000)
    public void test115937() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.MYSQL.print((Appendable) null);
    }

    @Test(timeout = 4000)
    public void test116938() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.parse((Reader) null);
    }

    @Test(timeout = 4000)
    public void test117939() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        PipedReader pipedReader0 = new PipedReader(9);
        cSVFormat1.parse(pipedReader0);
    }

    @Test(timeout = 4000)
    public void test118940() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.format((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test119941() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test120942() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test120943() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test120944() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test120945() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test120946() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test120947() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test121948() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test121949() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test121950() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test121951() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test121952() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test121953() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test121954() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test121955() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test121956() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test121957() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test121958() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test122959() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test123960() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test124961() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test124962() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test124963() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test124964() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test124965() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test124966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test124967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test124968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test124969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test124970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test125971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test125972() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test125973() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test125974() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test125975() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test125976() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test125977() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test125978() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test125979() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test125980() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test126981() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test127982() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = cSVFormat0.getHeaderComments();
    }

    @Test(timeout = 4000)
    public void test128983() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test128984() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test128985() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test129986() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        String[] stringArray0 = cSVFormat1.getHeader();
    }

    @Test(timeout = 4000)
    public void test129987() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        String[] stringArray0 = cSVFormat1.getHeader();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test129988() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        String[] stringArray0 = cSVFormat1.getHeader();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test129989() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        String[] stringArray0 = cSVFormat1.getHeader();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test129990() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        String[] stringArray0 = cSVFormat1.getHeader();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test129991() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        String[] stringArray0 = cSVFormat1.getHeader();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test129992() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        String[] stringArray0 = cSVFormat1.getHeader();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test130993() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = cSVFormat0.getHeader();
    }

    @Test(timeout = 4000)
    public void test132994() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = cSVFormat0.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test133995() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test134996() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = cSVFormat0.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test135997() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getNullString();
    }

    @Test(timeout = 4000)
    public void test136998() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test137999() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1381000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String string0 = cSVFormat0.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1391001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1401002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1401003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1401004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1401005() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1401006() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1401007() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1411008() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(73).when(resultSetMetaData0).getColumnCount();
        doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        cSVFormat0.withHeader(resultSet0);
    }

    @Test(timeout = 4000)
    public void test1421009() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[5];
        cSVFormat0.withHeader(stringArray0);
    }

    @Test(timeout = 4000)
    public void test1431010() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('`');
        Character character0 = Character.valueOf('`');
        cSVFormat1.withCommentMarker(character0);
    }

    @Test(timeout = 4000)
    public void test1441011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.withCommentMarker(',');
    }

    @Test(timeout = 4000)
    public void test1451012() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
        cSVFormat0.withEscape('S');
    }

    @Test(timeout = 4000)
    public void test1461013() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        cSVFormat0.withDelimiter('\"');
    }

    @Test(timeout = 4000)
    public void test1471014() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1471015() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1481016() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(stringArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1481017() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(stringArray0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1481018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(stringArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1481019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(stringArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1481020() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(stringArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1481021() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(stringArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1491022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1491023() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1501024() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        String string0 = cSVFormat0.toString();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1501025() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test1511026() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(false);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1511027() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(false);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1521028() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1521029() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1531030() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1531031() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1541032() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1541033() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1541034() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1541035() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1541036() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1541037() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1551038() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1551039() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1551040() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1551041() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1551042() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1551043() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1561044() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.hashCode();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1561045() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1561046() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1581047() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1581048() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1581049() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1581050() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        cSVFormat1.hashCode();
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test1581051() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1581052() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("p<^Bf-");
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1591053() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('^');
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1591054() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('^');
        cSVFormat1.hashCode();
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test1591055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('^');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1591056() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('^');
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1601057() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1601058() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1601059() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1601060() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1601061() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1601062() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1601063() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1611064() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1611065() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1611066() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1611067() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1611068() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1611069() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1611070() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1611071() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1621072() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1621073() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1621074() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1621075() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1621076() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1621077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1621078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1621079() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1621080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1621081() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1631082() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1631083() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1631084() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1631085() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1631086() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1631087() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1631088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1631089() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1631090() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1641091() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1641092() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test1641093() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1641094() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1641095() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1641096() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1641097() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1641098() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1641099() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1641100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1651101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1651102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1651103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1651104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1651105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1651106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1651107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test1651108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1651109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1651110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("'J?1--Q-I5zU9JL");
        cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1661111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1661112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1661113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1661114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1661115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1661116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1661117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1661118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1661119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1671120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1671121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1671122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1671123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1671124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1671125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1671126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1671127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1681128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1681129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1681130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1681131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1681132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test1681133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1681134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1681135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1681136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1681137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('Y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1691138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test1691139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1691140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1691141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1691142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1691143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1691144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1691145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1691146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1691147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1701148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1701149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1701150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1701151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1701152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1701153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1701154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1701155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1701156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1701157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('y');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1711158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1711159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1711160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1721161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1721162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1721163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1721164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1721165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1721166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1721167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test1721168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1721169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1721170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test1731171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1731172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1731173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1731174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1731175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1731176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1731177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1741178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1741179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1741180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1741181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1741182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1741183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1741184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1741185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1741186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1741187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1751188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1751189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1751190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1751191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1751192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1751193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1751194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1751195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1751196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1751197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1751198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1761199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        boolean boolean0 = cSVFormat0.equals(character0);
    }

    @Test(timeout = 4000)
    public void test1771200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test1781201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1781202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1781203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1781204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1781205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1781206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1781207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1791208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1791209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1791210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1791211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1791212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1791213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test1791214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1791215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1791216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote('b');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1801217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1801218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1801219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1801220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1801221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1801222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1801223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1811224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1811225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1811226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1811227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test1811228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1811229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1811230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1811231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1821232() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.NONE;
        cSVFormat0.withQuoteMode(quoteMode0);
    }

    @Test(timeout = 4000)
    public void test1831233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1831234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1831235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
    }

    @Test(timeout = 4000)
    public void test1831236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1831237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1831238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1831239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1831240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        Object[] objectArray0 = new Object[6];
        String string0 = cSVFormat1.format(objectArray0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1841241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1841242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1841243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1841244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1841245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1841246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1841247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1841248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1841249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(resultSet0);
        StringReader stringReader0 = new StringReader("\r\n");
        cSVFormat1.parse(stringReader0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1851250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1851251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1851252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1851253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1851254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1851255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1861256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1861257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1861258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1861259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1861260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1861261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1861262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1861263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1861264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1871265() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1871266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1871267() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1871268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1871269() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1871270() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1871271() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1871272() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1871273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1881274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1881275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[6];
        cSVFormat0.format(objectArray0);
        cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1891276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1891277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1891278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1891279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1891280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1891281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1891282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1901283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1901284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1901285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1901286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1901287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1901288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1901289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1901290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1911291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1911292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1911293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1911294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1911295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1911296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1911297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1911298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1911299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1921300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        MockFileWriter mockFileWriter0 = new MockFileWriter(">Z%5F+:E", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
        cSVFormat0.DEFAULT.print(mockPrintWriter0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1921301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        MockFileWriter mockFileWriter0 = new MockFileWriter(">Z%5F+:E", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
        cSVFormat0.DEFAULT.print(mockPrintWriter0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1921302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        MockFileWriter mockFileWriter0 = new MockFileWriter(">Z%5F+:E", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
        cSVFormat0.DEFAULT.print(mockPrintWriter0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1921303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        MockFileWriter mockFileWriter0 = new MockFileWriter(">Z%5F+:E", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
        cSVFormat0.DEFAULT.print(mockPrintWriter0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1921304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        MockFileWriter mockFileWriter0 = new MockFileWriter(">Z%5F+:E", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
        cSVFormat0.DEFAULT.print(mockPrintWriter0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1921305() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        MockFileWriter mockFileWriter0 = new MockFileWriter(">Z%5F+:E", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
        cSVFormat0.DEFAULT.print(mockPrintWriter0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1931306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    }
}
