/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:58:35 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.runner.RunWith;

public class CSVParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser cSVParser0 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        File file0 = MockFile.createTempFile("\"K>=/L(ei:8HpA.;e", "6D0");
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.nextRecord();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StringReader stringReader0 = new StringReader("CF'-$5=e\"l^5QU3z_");
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
        cSVParser0.nextRecord();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StringReader stringReader0 = new StringReader("QuoteChar=<");
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 0L, 0L);
        cSVParser0.iterator();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecords();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, (-1L));
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        MockFile mockFile0 = new MockFile("inputStream");
        Path path0 = mockFile0.toPath();
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        Path path0 = mockFile0.toPath();
        CSVParser.parse(path0, (Charset) null, (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse(uRL0, charset0, (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.ORACLE;
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        CSVParser.parse("", (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser.parse((Reader) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        File file0 = MockFile.createTempFile("No more CSV records available", "No more CSV records available");
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        MockFile mockFile0 = new MockFile("", "");
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse((File) mockFile0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        PipedReader pipedReader0 = new PipedReader();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
        cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        PipedReader pipedReader0 = new PipedReader(1559);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 1559, 509L);
        cSVParser0.getRecords();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 0L, 0L);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.isClosed();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        PipedReader pipedReader0 = new PipedReader();
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        Class<Locale.Category> class0 = Locale.Category.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        PipedReader pipedReader0 = new PipedReader();
        CSVFormat cSVFormat0 = CSVFormat.ORACLE;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, (-3500L), 0L);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.getRecords();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        StringReader stringReader0 = new StringReader("P5, ?Y[|*");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.getHeaderMap();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.close();
        boolean boolean0 = cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.close();
        boolean boolean0 = cSVParser0.isClosed();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        MockFile mockFile0 = new MockFile("", "");
        Path path0 = mockFile0.toPath();
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse((File) null, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.getCurrentLineNumber();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.getFirstEndOfLine();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6Ih");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        long long0 = cSVParser0.getRecordNumber();
    }
}
