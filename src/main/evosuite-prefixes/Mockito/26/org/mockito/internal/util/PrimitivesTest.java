/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 00:22:23 GMT 2023
 */
package org.mockito.internal.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;
import org.mockito.internal.util.Primitives;

public class PrimitivesTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Class<Object> class0 = Object.class;
        Object object0 = Primitives.primitiveWrapperOf(class0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<Integer> class1 = Primitives.primitiveTypeOf(class0);
        Integer integer0 = Primitives.primitiveValueOrNullFor(class1);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<Integer> class1 = Primitives.primitiveTypeOf(class0);
        Integer integer0 = Primitives.primitiveValueOrNullFor(class1);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Class<String> class0 = String.class;
        Class<String> class1 = Primitives.primitiveTypeOf(class0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Primitives.primitiveTypeOf((Class<Object>) null);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Class<Short> class0 = Short.class;
        boolean boolean0 = Primitives.isPrimitiveWrapper(class0);
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Class<Double> class0 = Double.class;
        Class<Double> class1 = Primitives.primitiveTypeOf(class0);
        Class<Double> class2 = Primitives.primitiveTypeOf(class1);
        class2.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        Class<Boolean> class1 = Primitives.primitiveTypeOf(class0);
        boolean boolean0 = Primitives.isPrimitiveWrapper(class1);
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        Class<String> class0 = String.class;
        String string0 = Primitives.primitiveValueOrNullFor(class0);
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        Class<Short> class0 = Short.class;
        Short short0 = Primitives.primitiveWrapperOf(class0);
    }
}
