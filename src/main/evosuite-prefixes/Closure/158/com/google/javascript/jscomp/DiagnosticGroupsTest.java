/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:28:36 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.PhaseOptimizer;
import java.util.List;
import java.util.Map;
import org.junit.runner.RunWith;

public class DiagnosticGroupsTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        String string0 = "checkTypes";
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.registerGroup(string0, diagnosticTypeArray0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
        Map<String, DiagnosticGroup> map0 = diagnosticGroups0.getRegisteredGroups();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
        List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        diagnosticGroups0.setWarningLevels((CompilerOptions) null, list0, checkLevel0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.registerGroup("Not checking use of goog.getCssName because of empty blacklist.", diagnosticGroups0.DEPRECATED);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[0];
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.registerGroup("h6n+:zs}suB]FxI_", diagnosticGroupArray0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSModule jSModule0 = new JSModule("?sh [");
        List<String> list0 = jSModule0.getSortedDependencyNames();
        diagnosticGroups0.setWarningLevels(compilerOptions0, list0, compilerOptions0.checkProvides);
    }
}
