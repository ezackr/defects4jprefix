/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 03:15:37 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import java.io.StringWriter;
import org.junit.runner.RunWith;

public class PeepholeFoldConstantsTest {

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(26, "{8>Jz\"fZB", 5518, (-1405));
        peepholeFoldConstants0.optimizeSubtree(node0);
        int int0 = 16;
        String string0 = null;
        Node node1 = Node.newString(int0, string0, int0, int0);
        Node node2 = null;
        node2 = new Node(int0, node1);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(26, "", 5518, (-1405));
        peepholeFoldConstants0.optimizeSubtree(node0);
        int int0 = 16;
        String string0 = null;
        Node node1 = Node.newString(int0, string0, int0, int0);
        Node node2 = null;
        node2 = new Node(int0, node1);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Node node0 = new Node(32);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        peepholeFoldConstants0.optimizeSubtree(node0);
        peepholeFoldConstants0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = null;
        peepholeFoldConstants0.optimizeSubtree((Node) null);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(108);
        node0.setIsSyntheticBlock(true);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node1);
        peepholeFoldConstants0.optimizeSubtree(node1);
        Node node5 = peepholeFoldConstants0.optimizeSubtree(node0);
        Node node6 = peepholeFoldConstants0.optimizeSubtree(node4);
        node5.checkTreeEqualsSilent(node3);
        Node node7 = peepholeFoldConstants0.optimizeSubtree(node4);
        node6.copyInformationFromForTree(node2);
        Node node8 = new Node(1123, node0, node6);
        node6.addChildrenToBack(node7);
        peepholeFoldConstants0.optimizeSubtree(node8);
        peepholeFoldConstants0.optimizeSubtree(node1);
    }
}
