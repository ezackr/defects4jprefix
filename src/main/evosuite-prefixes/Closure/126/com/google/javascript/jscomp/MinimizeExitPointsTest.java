/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 03:37:29 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import org.junit.runner.RunWith;

public class MinimizeExitPointsTest {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(105, nodeArray0, 105, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, minimizeExitPoints0);
        minimizeExitPoints0.visit(nodeTraversal0, node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        Node node0 = new Node(126, 126, 114);
        Node node1 = new Node(114);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, minimizeExitPoints0);
        minimizeExitPoints0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, minimizeExitPoints0);
        Node node0 = new Node(126, 95, 95);
        Node node1 = new Node(95);
        minimizeExitPoints0.visit(nodeTraversal0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, minimizeExitPoints0);
        Node node0 = new Node(115, 115, 115);
        minimizeExitPoints0.visit(nodeTraversal0, node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        Node node0 = new Node((-1), (-1), (-1));
        minimizeExitPoints0.process(node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        Node node0 = new Node(126, 95, 95);
        minimizeExitPoints0.tryMinimizeExits(node0, 48, "");
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        minimizeExitPoints0.tryMinimizeExits(node0, 31, "' has conflicting definitions.");
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints((AbstractCompiler) null);
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(113, nodeArray0, 113, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, minimizeExitPoints0);
        minimizeExitPoints0.visit(nodeTraversal0, node0, node0);
    }
}
