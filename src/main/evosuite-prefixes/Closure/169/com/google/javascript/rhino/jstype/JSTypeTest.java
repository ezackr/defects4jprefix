/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:53:00 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.HashSet;
import org.junit.runner.RunWith;

public class JSTypeTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(errorFunctionType0);
        errorFunctionType0.getTypesUnderEquality(jSType_TypePair0.typeA);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        instanceObjectType0.getTypesUnderShallowEquality(functionType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 58, 0);
        namedType0.resolveInternal(simpleErrorReporter0, objectType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 58, 0);
        namedType0.resolveInternal(simpleErrorReporter0, objectType0);
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NamedType namedType0 = (NamedType) jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 3, 3);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.isStringValueType();
        namedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NamedType namedType0 = (NamedType) jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 3, 3);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.isStringValueType();
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NamedType namedType0 = (NamedType) jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 3, 3);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.isStringValueType();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NamedType namedType0 = (NamedType) jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 3, 3);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.isStringValueType();
        namedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NamedType namedType0 = (NamedType) jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 3, 3);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NamedType namedType0 = (NamedType) jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 3, 3);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(namedType0, namedType0);
        boolean boolean0 = parameterizedType0.isStringValueType();
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.unboxesTo();
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.unboxesTo();
        functionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.unboxesTo();
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.unboxesTo();
        functionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.unboxesTo();
        functionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.unboxesTo();
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test0517() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(errorFunctionType0);
        jSType_TypePair0.typeA.autobox();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Q*,-Fv&#9ad\"", "Q*,-Fv&#9ad\"", 3, 3);
        namedType0.getJSDocInfo();
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0619() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Q*,-Fv&#9ad\"", "Q*,-Fv&#9ad\"", 3, 3);
        namedType0.getJSDocInfo();
        namedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0620() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Q*,-Fv&#9ad\"", "Q*,-Fv&#9ad\"", 3, 3);
        namedType0.getJSDocInfo();
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0621() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Q*,-Fv&#9ad\"", "Q*,-Fv&#9ad\"", 3, 3);
        namedType0.getJSDocInfo();
        namedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Q*,-Fv&#9ad\"", "Q*,-Fv&#9ad\"", 3, 3);
        namedType0.getJSDocInfo();
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0723() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        String string0 = parameterizedType0.toDebugHashCodeString();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0724() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        String string0 = parameterizedType0.toDebugHashCodeString();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        String string0 = parameterizedType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test0826() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0827() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0828() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0829() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0831() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0932() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(namedType0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) jSType_TypePair0.typeA.collapseUnion();
        errorFunctionType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0933() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(namedType0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) jSType_TypePair0.typeA.collapseUnion();
        errorFunctionType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0934() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(namedType0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) jSType_TypePair0.typeA.collapseUnion();
        errorFunctionType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(namedType0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) jSType_TypePair0.typeA.collapseUnion();
        errorFunctionType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0936() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(namedType0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) jSType_TypePair0.typeA.collapseUnion();
        errorFunctionType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0937() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(namedType0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) jSType_TypePair0.typeA.collapseUnion();
        errorFunctionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0938() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(namedType0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) jSType_TypePair0.typeA.collapseUnion();
        errorFunctionType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test1039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = functionType0.isString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1040() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = functionType0.isString();
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(KKWd`f;Q&|;Ayr)");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test1142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(KKWd`f;Q&|;Ayr)");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(KKWd`f;Q&|;Ayr)");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test1144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(KKWd`f;Q&|;Ayr)");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test1145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(KKWd`f;Q&|;Ayr)");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test1146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(KKWd`f;Q&|;Ayr)");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test1147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(KKWd`f;Q&|;Ayr)");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test1248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EvalError");
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test1249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EvalError");
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1250() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EvalError");
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
        boolean boolean0 = arrowType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test1251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EvalError");
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test1252() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EvalError");
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test1253() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EvalError");
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
        boolean boolean0 = arrowType0.matchesStringContext();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test1254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "EvalError");
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test1355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType0.getTypesUnderInequality(jSType1);
        jSType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test1356() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType0.getTypesUnderInequality(jSType1);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test1357() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType0.getTypesUnderInequality(jSType1);
        jSType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test1358() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType0.getTypesUnderInequality(jSType1);
        jSType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test1359() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType0.getTypesUnderInequality(jSType1);
    }

    @Test(timeout = 4000)
    public void test1360() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType0.getTypesUnderInequality(jSType1);
        jSType1.equals((Object) jSType0);
    }

    @Test(timeout = 4000)
    public void test1361() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        jSType0.getTypesUnderInequality(jSType1);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test1462() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setValidator((Predicate<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test1563() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isBooleanValueType();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test1564() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test1565() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isBooleanValueType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1666() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(functionType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowInequality(unionType0);
        boolean boolean0 = jSType_TypePair0.typeB.canBeCalled();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1667() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(functionType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowInequality(unionType0);
        boolean boolean0 = jSType_TypePair0.typeB.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1768() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(recordType0);
        JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getDisplayName();
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1769() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(recordType0);
        JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderShallowInequality(jSType0);
        jSType_TypePair0.typeB.getDisplayName();
        recordType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test1870() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumber();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1871() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test1972() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(functionType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowInequality(unionType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Not declared as a type name", noResolvedType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, prototypeObjectType0, jSType_TypePair0.typeA);
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1973() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        UnionType unionType0 = (UnionType) jSTypeRegistry0.createDefaultObjectUnion(functionType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowInequality(unionType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Not declared as a type name", noResolvedType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, prototypeObjectType0, jSType_TypePair0.typeA);
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test2074() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderEquality(recordType0);
        jSType_TypePair0.typeB.dereference();
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isNamedType();
        recordType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test2176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isNamedType();
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test2177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isNamedType();
        recordType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test2178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test2179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isNamedType();
        recordType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test2180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isNamedType();
        recordType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2281() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(jSType0);
        jSType_TypePair0.typeB.matchConstraint(jSType_TypePair0.typeA);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(jSType0);
        jSType_TypePair0.typeB.matchConstraint(jSType_TypePair0.typeA);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test2383() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        jSType0.matchesInt32Context();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test2384() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        jSType0.matchesInt32Context();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test2385() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        jSType0.matchesInt32Context();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2386() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        jSType0.matchesInt32Context();
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test2387() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        jSType0.matchesInt32Context();
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test2488() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2489() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
        recordType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2490() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
        recordType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test2491() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
        recordType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test2492() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test2493() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
        recordType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test2494() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
        recordType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2495() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isNominalConstructor();
        recordType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test2596() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.hasProperty("#/=Z[{#V");
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test2597() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.hasProperty("#/=Z[{#V");
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2598() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.hasProperty("#/=Z[{#V");
    }

    @Test(timeout = 4000)
    public void test2599() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.hasProperty("#/=Z[{#V");
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test26100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 12, 12);
        boolean boolean0 = namedType0.isInstanceType();
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test26101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 12, 12);
        boolean boolean0 = namedType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test26102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 12, 12);
        boolean boolean0 = namedType0.isInstanceType();
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test26103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 12, 12);
        boolean boolean0 = namedType0.isInstanceType();
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test27104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, enumElementType0);
        boolean boolean0 = parameterizedType0.isCheckedUnknownType();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test27105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, enumElementType0);
        boolean boolean0 = parameterizedType0.isCheckedUnknownType();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test27106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, enumElementType0);
        boolean boolean0 = parameterizedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test27107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Unknown class name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(enumElementType0, enumElementType0);
        boolean boolean0 = parameterizedType0.isCheckedUnknownType();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test28108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test28109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesUint32Context();
        recordType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test28110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesUint32Context();
        recordType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test28111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesUint32Context();
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test29112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeA.isEnumType();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test29113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeA.isEnumType();
    }

    @Test(timeout = 4000)
    public void test30114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
        boolean boolean0 = parameterizedType0.isInvariant(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test30115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
        boolean boolean0 = parameterizedType0.isInvariant(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test31116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumberValueType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test31117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test32118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "[p5?bY9#LUf", "[p5?bY9#LUf", (-6), 397);
        namedType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test33119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(recordType0);
        jSType0.clearResolved();
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test33120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(recordType0);
        jSType0.clearResolved();
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test34121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test34122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isFunctionPrototypeType();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test34123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isFunctionPrototypeType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test34124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isFunctionPrototypeType();
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test35125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        String string0 = jSType0.toAnnotationString();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test35126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        String string0 = jSType0.toAnnotationString();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test35127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        String string0 = jSType0.toAnnotationString();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test35128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        String string0 = jSType0.toAnnotationString();
    }

    @Test(timeout = 4000)
    public void test36129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = parameterizedType0.hasDisplayName();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test36130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = parameterizedType0.hasDisplayName();
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test36131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = parameterizedType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test36132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = parameterizedType0.hasDisplayName();
        recordType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test37133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test37134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test37135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test37136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test37137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test38138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(numberType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test38139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(numberType0);
    }

    @Test(timeout = 4000)
    public void test39140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test39141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(recordType0);
    }

    @Test(timeout = 4000)
    public void test40142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(indexedType0);
    }

    @Test(timeout = 4000)
    public void test40143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(indexedType0);
        errorFunctionType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test40144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(indexedType0);
        errorFunctionType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test40145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(indexedType0);
        errorFunctionType1.equals((Object) errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test40146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(indexedType0);
        errorFunctionType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test41147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isStruct();
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test41148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isStruct();
        unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test41149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isStruct();
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test41150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test42151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.isDict();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test42152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.isDict();
    }

    @Test(timeout = 4000)
    public void test42153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.isDict();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test42154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = jSType0.isDict();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test43155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        boolean boolean0 = parameterizedType0.isDict();
    }

    @Test(timeout = 4000)
    public void test43156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        boolean boolean0 = parameterizedType0.isDict();
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test43157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        boolean boolean0 = parameterizedType0.isDict();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test44158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "KKWd`f;Q&|;Ayr", 11, 11);
        boolean boolean0 = namedType0.isGlobalThisType();
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test44159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "KKWd`f;Q&|;Ayr", 11, 11);
        boolean boolean0 = namedType0.isGlobalThisType();
    }

    @Test(timeout = 4000)
    public void test44160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "KKWd`f;Q&|;Ayr", 11, 11);
        boolean boolean0 = namedType0.isGlobalThisType();
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test44161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "KKWd`f;Q&|;Ayr", 11, 11);
        boolean boolean0 = namedType0.isGlobalThisType();
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test45162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "l<(FfGZVIA/]J");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test45163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "l<(FfGZVIA/]J");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        functionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test46164() throws Throwable {
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test47165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = new Node(1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = jSType0.canTestForEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test47166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = new Node(1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = jSType0.canTestForEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test48167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "y*6[yP1 F+#?D", "RegExp", (-1067), (-6));
        boolean boolean0 = namedType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test48168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "y*6[yP1 F+#?D", "RegExp", (-1067), (-6));
        boolean boolean0 = namedType0.isParameterizedType();
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test48169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "y*6[yP1 F+#?D", "RegExp", (-1067), (-6));
        boolean boolean0 = namedType0.isParameterizedType();
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test49170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
        recordType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test49171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test49172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test50173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 11, 11);
        JSType.toMaybeParameterizedType((JSType) namedType0);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test50174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 11, 11);
        JSType.toMaybeParameterizedType((JSType) namedType0);
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test51175() throws Throwable {
        ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test52176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.toMaybeTemplateType((JSType) noType0);
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test53177() throws Throwable {
        TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test54178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test54179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test54180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test54181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test55182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isNominalConstructor();
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test55183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test56184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.differsFrom(jSType1);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test56185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.differsFrom(jSType1);
    }

    @Test(timeout = 4000)
    public void test56186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.differsFrom(jSType1);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test57187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 11, 11);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(namedType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test57188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 11, 11);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(namedType0);
    }

    @Test(timeout = 4000)
    public void test58189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>(1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        boolean boolean0 = unionType0.differsFrom(namedType0);
    }

    @Test(timeout = 4000)
    public void test58190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>(1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        boolean boolean0 = unionType0.differsFrom(namedType0);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test58191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>(1);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        boolean boolean0 = unionType0.differsFrom(namedType0);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test59192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(instanceObjectType0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeA, (JSType) instanceObjectType0, (JSType) noResolvedType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.differsFrom(jSType_TypePair0.typeA);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test59193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(instanceObjectType0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeA, (JSType) instanceObjectType0, (JSType) noResolvedType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.differsFrom(jSType_TypePair0.typeA);
    }

    @Test(timeout = 4000)
    public void test60194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(unknownType0);
        unknownType0.getTypesUnderShallowEquality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test60195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(unknownType0);
        unknownType0.getTypesUnderShallowEquality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test60196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(unknownType0);
        unknownType0.getTypesUnderShallowEquality(jSType0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test60197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(unknownType0);
        unknownType0.getTypesUnderShallowEquality(jSType0);
        jSType0.equals((Object) unknownType0);
    }

    @Test(timeout = 4000)
    public void test61198() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSType jSType0 = jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 1, 1);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType1 = JSType.getLeastSupertype(jSType0, (JSType) unionType0);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test61199() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSType jSType0 = jSTypeRegistry0.createNamedType("l)@~Id#&]>'P]bQaY+u", "lpPEG", 1, 1);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType1 = JSType.getLeastSupertype(jSType0, (JSType) unionType0);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test62200() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType1.canTestForShallowEqualityWith(recordType0);
        recordType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test62201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType1.canTestForShallowEqualityWith(recordType0);
    }

    @Test(timeout = 4000)
    public void test62202() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType1.canTestForShallowEqualityWith(recordType0);
        recordType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test63203() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderShallowEquality(parameterizedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test64204() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumElementType0, noResolvedType0);
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, parameterizedType0, noResolvedType0);
        JSType jSType0 = JSType.getLeastSupertype((JSType) parameterizedType1, (JSType) parameterizedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test64205() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumElementType0, noResolvedType0);
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, parameterizedType0, noResolvedType0);
        JSType jSType0 = JSType.getLeastSupertype((JSType) parameterizedType1, (JSType) parameterizedType0);
        jSType0.equals((Object) parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test64206() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumElementType0, noResolvedType0);
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, parameterizedType0, noResolvedType0);
        JSType jSType0 = JSType.getLeastSupertype((JSType) parameterizedType1, (JSType) parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test64207() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumElementType0, noResolvedType0);
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, parameterizedType0, noResolvedType0);
        JSType jSType0 = JSType.getLeastSupertype((JSType) parameterizedType1, (JSType) parameterizedType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test65208() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        boolean boolean0 = parameterizedType0.differsFrom(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test65209() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        boolean boolean0 = parameterizedType0.differsFrom(noType0);
    }

    @Test(timeout = 4000)
    public void test66210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        namedType0.getTypesUnderShallowEquality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test67211() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test68212() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = JSType.isEquivalent(jSType0, jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test68213() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = JSType.isEquivalent(jSType0, jSType0);
    }

    @Test(timeout = 4000)
    public void test68214() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        boolean boolean0 = JSType.isEquivalent(jSType0, jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test69215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        boolean boolean0 = JSType.isEquivalent(namedType0, (JSType) null);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test69216() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        boolean boolean0 = JSType.isEquivalent(namedType0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test69217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "KKWd`f;Q&|;Ayr", "%", 0, 0);
        boolean boolean0 = JSType.isEquivalent(namedType0, (JSType) null);
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test70218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        boolean boolean0 = jSType0.equals(jSTypeRegistry0);
    }

    @Test(timeout = 4000)
    public void test70219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        boolean boolean0 = jSType0.equals(jSTypeRegistry0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test70220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        boolean boolean0 = jSType0.equals(jSTypeRegistry0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test71221() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(functionType0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        jSType_TypePair0.typeA.equals(recordType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test72222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
        proxyObjectType0.findPropertyType("Unknown class name");
        proxyObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test72223() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
        proxyObjectType0.findPropertyType("Unknown class name");
        proxyObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test73224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a constructor");
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test73225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a constructor");
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test74226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.canAssignTo(numberType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test74227() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.canAssignTo(numberType0);
    }

    @Test(timeout = 4000)
    public void test74228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.canAssignTo(numberType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test75229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = noResolvedType0.canAssignTo(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test75230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = noResolvedType0.canAssignTo(recordType0);
    }

    @Test(timeout = 4000)
    public void test76231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        numberType0.testForEquality(allType0);
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test76232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        numberType0.testForEquality(allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test76233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        numberType0.testForEquality(allType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test77234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.testForEqualityHelper(unionType0, noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test78235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) numberType0, (JSType) numberType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "wsx%_Ltv!");
        unionType0.testForEqualityHelper(templateType0, jSType0);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test78236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) numberType0, (JSType) numberType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "wsx%_Ltv!");
        unionType0.testForEqualityHelper(templateType0, jSType0);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test79237() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        noResolvedType0.getTypesUnderEquality(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test79238() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        noResolvedType0.getTypesUnderEquality(recordType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test80239() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        parameterizedType0.getTypesUnderEquality(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test80240() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        parameterizedType0.getTypesUnderEquality(noType0);
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test81241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        noType0.getTypesUnderEquality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test81242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        noType0.getTypesUnderEquality(errorFunctionType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test82243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        UnionType unionType0 = (UnionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        unionType0.testForEqualityHelper(unionType0, unionType0);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test82244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        UnionType unionType0 = (UnionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        unionType0.testForEqualityHelper(unionType0, unionType0);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test82245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        UnionType unionType0 = (UnionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        unionType0.testForEqualityHelper(unionType0, unionType0);
        unionType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test83246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test83247() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test84248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = new Node((-342), 1, 70);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType0, node0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test84249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = new Node((-342), 1, 70);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType0, node0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(functionType0);
    }

    @Test(timeout = 4000)
    public void test85250() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType0);
        JSType jSType1 = jSType_TypePair0.typeA.getLeastSupertype(jSType_TypePair0.typeB);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test85251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType0);
        JSType jSType1 = jSType_TypePair0.typeA.getLeastSupertype(jSType_TypePair0.typeB);
        jSType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test85252() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType0);
        JSType jSType1 = jSType_TypePair0.typeA.getLeastSupertype(jSType_TypePair0.typeB);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test86253() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType1 = templateType0.getLeastSupertype(jSType0);
        jSType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test86254() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType1 = templateType0.getLeastSupertype(jSType0);
    }

    @Test(timeout = 4000)
    public void test86255() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType1 = templateType0.getLeastSupertype(jSType0);
        jSType1.equals((Object) jSType0);
    }

    @Test(timeout = 4000)
    public void test86256() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType1 = templateType0.getLeastSupertype(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test86257() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType1 = templateType0.getLeastSupertype(jSType0);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test87258() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType1);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType0);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test87259() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType1);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType0);
    }

    @Test(timeout = 4000)
    public void test87260() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType1);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType0);
        jSType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test87261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType1);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType0);
        jSType1.equals((Object) jSType0);
    }

    @Test(timeout = 4000)
    public void test88262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowEquality(numberType0);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test88263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowEquality(numberType0);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test89264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(jSType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test89265() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(jSType0);
    }

    @Test(timeout = 4000)
    public void test90266() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        StringType stringType0 = new StringType(jSTypeRegistry0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType.getGreatestSubtype((JSType) stringType0, (JSType) recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test90267() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        StringType stringType0 = new StringType(jSTypeRegistry0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType.getGreatestSubtype((JSType) stringType0, (JSType) recordType0);
        stringType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test91268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test91269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) recordType0);
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test92270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
        parameterizedType0.getRestrictedTypeGivenToBooleanOutcome(false);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test93271() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, jSType0);
        JSType jSType1 = parameterizedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test93272() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, jSType0);
        JSType jSType1 = parameterizedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test93273() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Errr");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, jSType0);
        JSType jSType1 = parameterizedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test94274() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) noType0, (JSType) noType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test94275() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) noType0, (JSType) noType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderInequality(noType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test95276() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        jSType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test95277() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        jSType0.getTypesUnderShallowInequality(voidType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test95278() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        jSType0.getTypesUnderShallowInequality(voidType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test96279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 11, 11);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isSubtype(namedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test96280() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 11, 11);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isSubtype(namedType0);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test96281() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Array", "Array", 11, 11);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isSubtype(namedType0);
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test97282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(allType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test97283() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(allType0);
    }

    @Test(timeout = 4000)
    public void test98284() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, jSType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, parameterizedType0);
        JSType.safeResolve((JSType) null, simpleErrorReporter0, indexedType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test98285() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, jSType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, parameterizedType0);
        JSType.safeResolve((JSType) null, simpleErrorReporter0, indexedType0);
        indexedType0.isNoResolvedType();
    }
}
