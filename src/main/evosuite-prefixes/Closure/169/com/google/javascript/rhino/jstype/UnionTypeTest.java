/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:58:33 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;
import org.junit.runner.RunWith;

public class UnionTypeTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) booleanType0, (List<JSType>) immutableList0);
        FunctionType functionType1 = (FunctionType) modificationVisitor0.caseFunctionType(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        boolean boolean0 = hashSet0.add(unionType0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        boolean boolean0 = unionType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        boolean boolean0 = unionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        hashSet0.add(jSType0);
        boolean boolean0 = unionType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(booleanType0, "Named type with empty name component");
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) voidType0, jSType0, (JSType) voidType0, (JSType) voidType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        NoType noType0 = (NoType) unionType0.findPropertyType("");
        noType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, jSType0, (JSType) nullType0, jSType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType1 = unionType0.findPropertyType("By}o#JAR-S3iQ;");
        jSType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canAssignTo(booleanType0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 0, (-2215));
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) namedType0, (JSType) booleanType0, (JSType) namedType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canAssignTo(booleanType0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.autobox();
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.restrictByNotNullOrUndefined();
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test1716() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test1817() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
        boolean boolean0 = jSType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        UnionType unionType1 = (UnionType) unionType0.getLeastSupertype(booleanType0);
        unionType1.getRestrictedUnion(unionType0);
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(booleanType0, "Named type with empty name component");
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) voidType0, jSType0, (JSType) voidType0, (JSType) voidType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
        boolean boolean0 = jSType0.isDict();
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = booleanType0.autoboxesTo();
        JSType jSType1 = unionType0.getLeastSupertype(jSType0);
    }

    @Test(timeout = 4000)
    public void test2322() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "brPi", 0, (-2199));
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) namedType0, (JSType) unionType0, (JSType) booleanType0, (JSType) namedType0, (JSType) namedType0, (JSType) booleanType0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList1);
        JSType jSType0 = unionType1.getLeastSupertype(booleanType0);
    }

    @Test(timeout = 4000)
    public void test2423() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = (NoType) unionType0.meet(voidType0);
        noType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unionType0, (JSType) errorFunctionType0, (JSType) unionType0, jSType0, jSType0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        UnionType unionType2 = new UnionType(jSTypeRegistry0, hashSet0);
        JSType jSType1 = unionType2.meet(unionType1);
        jSType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test2625() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        unionType0.meet(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2726() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
        JSType jSType0 = unionType0.meet(booleanType0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test2827() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
        JSType jSType0 = unionType0.meet(unionType0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test2928() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseUnknownType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) booleanType0, jSType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType1.getLeastSupertype(unionType0);
        unionType1.equals((Object) unionType0);
    }

    @Test(timeout = 4000)
    public void test3029() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        unionType1.getLeastSupertype(unionType0);
        unionType0.equals((Object) unionType1);
    }

    @Test(timeout = 4000)
    public void test3130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) unionType0, (JSType) unionType0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.checkUnionEquivalenceHelper(unionType1, true);
        unionType1.equals((Object) unionType0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) unionType0, (JSType) unionType0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.checkUnionEquivalenceHelper(unionType1, true);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.hasProperty("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, jSType0, jSType0, jSType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.hasProperty("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        boolean boolean0 = unionType0.isObject();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.contains(booleanType0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        boolean boolean0 = unionType0.contains(unknownType0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        JSType jSType0 = unionType0.getRestrictedUnion(unionType0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<BooleanType> immutableList0 = ImmutableList.of(booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = unionType0.getRestrictedUnion(nullType0);
        immutableList0.contains(jSType0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) functionType0, (JSType) functionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        String string0 = unionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "brPi", 0, (-2199));
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) namedType0, (JSType) unionType0, (JSType) booleanType0, (JSType) namedType0, (JSType) namedType0, (JSType) booleanType0);
        UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList1);
        JSType jSType0 = unionType1.meet(unionType0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = unionType0.canTestForShallowEqualityWith(allType0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.isString();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderEquality(jSType0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(unionType0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
        JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        unionType0.resolveInternal(simpleErrorReporter0, namedType0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        UnionType unionType1 = (UnionType) unionType0.getLeastSupertype(booleanType0);
        unionType1.resolveInternal(simpleErrorReporter0, namedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        UnionType unionType1 = (UnionType) unionType0.getLeastSupertype(booleanType0);
        unionType1.resolveInternal(simpleErrorReporter0, namedType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        String string0 = unionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false, false, false, false, false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        boolean boolean0 = unionType0.setValidator(predicate0);
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.collapseUnion();
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a constructor", 78, 0);
        ImmutableList<NamedType> immutableList0 = ImmutableList.of(namedType0, namedType0, namedType0, namedType0, namedType0, namedType0);
        Vector<JSType> vector0 = new Vector<JSType>(immutableList0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
        JSType jSType0 = unionType0.collapseUnion();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
        JSType jSType1 = jSType0.collapseUnion();
        jSType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.collapseUnion();
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5961() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoObjectType noObjectType0 = (NoObjectType) modificationVisitor0.caseNoObjectType();
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.collapseUnion();
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6062() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        unionType0.matchConstraint(unionType0);
        unionType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test6163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashSet<JSType> hashSet0 = new HashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        hashSet0.add(errorFunctionType0);
        boolean boolean0 = unionType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test6264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) templateType0, (JSType) templateType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        boolean boolean0 = unionType0.hasAnyTemplateInternal();
    }
}
