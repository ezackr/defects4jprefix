/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 05:18:15 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import org.junit.runner.RunWith;

public class JSTypeTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0007() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0008() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0009() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test00010() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test00011() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test00012() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test00013() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test00014() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test00015() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test00016() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test00017() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test00018() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test00019() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test00020() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00021() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test00022() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00023() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test00024() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test00025() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test00026() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test00027() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test00028() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test00029() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test00030() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test00031() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test00032() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test00033() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test00034() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test00035() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test00036() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test00037() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test00038() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test00039() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
    }

    @Test(timeout = 4000)
    public void test00040() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test00041() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test00042() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00043() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test00044() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test00045() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00046() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test00047() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00048() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test00049() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test00050() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test00051() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test00052() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test00053() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test00054() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test00055() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test00056() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test00057() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test00058() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test00059() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00060() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test00061() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00062() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test00063() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test00064() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test00065() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test00066() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test00067() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test00068() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test00069() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test00070() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test00071() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test00072() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test00073() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test00074() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test00075() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test00076() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test00077() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00078() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test00079() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test00080() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test00081() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test00082() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test00083() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test00084() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test00085() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test00086() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test00087() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test00088() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test00089() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test00090() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test00091() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test00092() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test00093() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test00094() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isObject();
    }

    @Test(timeout = 4000)
    public void test00095() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test00096() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test00097() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00098() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00099() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test000100() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test000101() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test000102() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        indexedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test000103() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
    }

    @Test(timeout = 4000)
    public void test000104() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
    }

    @Test(timeout = 4000)
    public void test000105() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
    }

    @Test(timeout = 4000)
    public void test000106() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
    }

    @Test(timeout = 4000)
    public void test000107() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
    }

    @Test(timeout = 4000)
    public void test000108() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test000109() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test000110() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test000111() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test000112() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test000113() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test000114() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test000115() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test000116() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test000117() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test000118() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test000119() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test000120() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test000121() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test000122() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test000123() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test000124() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test000125() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test000126() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test000127() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test000128() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test000129() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test000130() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test000131() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test000132() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test000133() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test000134() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test000135() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test000136() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test000137() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test000138() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test000139() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test000140() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test000141() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test000142() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test000143() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test000144() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test000145() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test000146() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test000147() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test000148() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test000149() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test000150() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test000151() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test000152() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test000153() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test000154() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test000155() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test000156() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test000157() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test000158() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test000159() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test000160() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test000161() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test000162() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isObject();
    }

    @Test(timeout = 4000)
    public void test000163() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test000164() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test000165() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test000166() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test000167() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test000168() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test000169() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test000170() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
        indexedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test000171() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
    }

    @Test(timeout = 4000)
    public void test000172() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
    }

    @Test(timeout = 4000)
    public void test000173() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
    }

    @Test(timeout = 4000)
    public void test000174() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
        boolean boolean0 = unknownType0.differsFrom(indexedType0);
    }

    @Test(timeout = 4000)
    public void test001175() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test001176() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test001177() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test001178() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test001179() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test001180() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test001181() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test001182() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test001183() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test001184() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test001185() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test001186() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test001187() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test001188() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test001189() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test001190() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test001191() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test001192() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test001193() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test001194() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test001195() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test001196() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test001197() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test001198() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test001199() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test001200() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test001201() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test001202() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test001203() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test001204() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test001205() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test001206() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test001207() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test001208() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test001209() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test001210() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test001211() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test001212() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test001213() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test001214() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test001215() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test001216() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test001217() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test001218() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test001219() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test001220() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test001221() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test001222() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test001223() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test001224() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test001225() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test001226() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test001227() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test001228() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test001229() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test001230() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test001231() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test001232() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test001233() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test001234() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test001235() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test001236() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.getTypesUnderInequality(allType0);
    }

    @Test(timeout = 4000)
    public void test002237() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test002238() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test002239() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test002240() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test002241() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test002242() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test002243() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test002244() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test002245() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test002246() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test002247() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test002248() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test002249() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test002250() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test002251() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test002252() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test002253() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test002254() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test002255() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test002256() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test002257() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test002258() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test002259() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test002260() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test002261() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test002262() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test002263() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test002264() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test002265() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test002266() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test002267() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test002268() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test002269() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test002270() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test002271() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test002272() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test002273() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test002274() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test002275() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test002276() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test002277() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test002278() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test002279() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test002280() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test002281() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test002282() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test002283() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test002284() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test002285() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test002286() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test002287() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test002288() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test002289() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test002290() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test002291() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test002292() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test002293() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test002294() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test002295() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test002296() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test002297() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test002298() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002299() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002300() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002301() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test002302() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test002303() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test002304() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test002305() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test002306() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test002307() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test002308() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test002309() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test002310() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test002311() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test002312() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test002313() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test002314() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test002315() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test002316() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test002317() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test002318() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test002319() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test002320() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test002321() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test002322() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test002323() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test002324() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test002325() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test002326() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test002327() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test002328() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test002329() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test002330() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test002331() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test002332() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test002333() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test002334() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test002335() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test002336() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test002337() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test002338() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test002339() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test002340() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test002341() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test002342() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test002343() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test002344() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test002345() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test002346() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test002347() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test002348() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test002349() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test002350() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test002351() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test002352() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test002353() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test002354() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test002355() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test002356() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test002357() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test002358() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test002359() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test002360() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test002361() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test002362() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test002363() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test002364() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test002365() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test002366() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test002367() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test002368() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test002369() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test002370() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test002371() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test002372() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test002373() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test002374() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test002375() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test002376() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test002377() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test002378() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test002379() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test002380() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test002381() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test002382() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test002383() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002384() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002385() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002386() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002387() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test002388() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test003389() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test003390() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test003391() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test003392() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test003393() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test003394() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test003395() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test003396() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test003397() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test003398() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test003399() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test003400() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test003401() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test003402() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test003403() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test003404() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test003405() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test003406() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test003407() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test003408() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test003409() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test003410() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test003411() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test003412() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test003413() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test003414() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test003415() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test003416() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test003417() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test003418() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test003419() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test003420() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test003421() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test003422() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test003423() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test003424() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test003425() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test003426() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test003427() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test003428() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test003429() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test003430() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test003431() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test003432() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test003433() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test003434() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test003435() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test003436() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test003437() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test003438() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test003439() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test003440() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test003441() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test003442() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test003443() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test003444() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test003445() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test003446() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test003447() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test003448() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test003449() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test003450() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test003451() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test003452() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test003453() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test003454() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test003455() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test003456() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test003457() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test003458() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test003459() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
    }

    @Test(timeout = 4000)
    public void test003460() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test003461() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test003462() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test003463() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test003464() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test003465() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test003466() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test003467() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test003468() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test003469() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test003470() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test003471() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test003472() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test003473() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test003474() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test003475() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test003476() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test003477() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test003478() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test003479() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test003480() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test003481() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test003482() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test003483() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test003484() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test003485() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test003486() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test003487() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test003488() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test003489() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test003490() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test003491() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test003492() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test003493() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test003494() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test003495() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test003496() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test003497() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test003498() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test003499() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test003500() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test003501() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test003502() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test003503() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test003504() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test003505() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test003506() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test003507() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test003508() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test003509() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test003510() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test003511() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test003512() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test003513() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test003514() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test003515() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test003516() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test003517() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test003518() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test003519() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test003520() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test003521() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test003522() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test003523() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test003524() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
    }

    @Test(timeout = 4000)
    public void test003525() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
    }

    @Test(timeout = 4000)
    public void test003526() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
    }

    @Test(timeout = 4000)
    public void test003527() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
    }

    @Test(timeout = 4000)
    public void test004528() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test004529() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test004530() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test004531() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test004532() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test004533() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test004534() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test004535() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test004536() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test004537() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test004538() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test004539() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test004540() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test004541() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test004542() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test004543() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test004544() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test004545() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test004546() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test004547() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test004548() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test004549() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test004550() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test004551() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test004552() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test004553() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test004554() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test004555() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test004556() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test004557() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test004558() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test004559() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test004560() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test004561() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test004562() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test004563() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test004564() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test004565() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test004566() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test004567() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test004568() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test004569() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test004570() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test004571() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test004572() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test004573() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test004574() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test004575() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test004576() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test004577() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test004578() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test004579() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test004580() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test004581() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test004582() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test004583() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test004584() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test004585() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test004586() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test004587() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
    }

    @Test(timeout = 4000)
    public void test004588() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.setResolvedTypeInternal((JSType) null);
    }

    @Test(timeout = 4000)
    public void test005589() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test005590() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test005591() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test005592() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test005593() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test005594() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test005595() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test005596() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test005597() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test005598() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test005599() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test005600() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test005601() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test005602() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test005603() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test005604() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test005605() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test005606() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test005607() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test005608() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test005609() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test005610() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test005611() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test005612() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test005613() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test005614() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test005615() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test005616() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test005617() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test005618() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test005619() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test005620() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test005621() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test005622() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test005623() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test005624() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test005625() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test005626() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test005627() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test005628() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test005629() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test005630() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test005631() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test005632() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test005633() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test005634() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test005635() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test005636() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test005637() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test005638() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test005639() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test005640() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test005641() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test005642() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test005643() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test005644() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test005645() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test005646() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test005647() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test005648() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test005649() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test005650() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test005651() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test005652() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test005653() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test005654() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test005655() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test005656() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test005657() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test005658() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test005659() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test005660() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test005661() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test005662() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test005663() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test005664() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test005665() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test005666() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test005667() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test005668() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test005669() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test005670() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test005671() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test005672() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test005673() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test005674() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test005675() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test005676() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test005677() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test005678() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test005679() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test005680() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test005681() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test005682() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test005683() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test005684() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test005685() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test005686() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test005687() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test005688() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test005689() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test005690() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test005691() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test005692() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test005693() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test005694() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test005695() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test005696() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test005697() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test005698() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test005699() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test005700() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test005701() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test005702() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test005703() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test005704() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test005705() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test005706() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test005707() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test005708() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test005709() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test005710() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test005711() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test005712() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test005713() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test005714() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test005715() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test005716() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test005717() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test005718() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test005719() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test005720() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test005721() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test005722() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test005723() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
    }

    @Test(timeout = 4000)
    public void test005724() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
    }

    @Test(timeout = 4000)
    public void test005725() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
    }

    @Test(timeout = 4000)
    public void test005726() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.testForEquality(unknownType0);
    }

    @Test(timeout = 4000)
    public void test006727() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test006728() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test007729() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test007730() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test007731() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test007732() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test007733() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test007734() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test007735() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test007736() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test007737() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test007738() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test007739() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test007740() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test007741() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test007742() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test007743() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test007744() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test007745() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.toString();
    }

    @Test(timeout = 4000)
    public void test007746() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test007747() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test007748() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test007749() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test007750() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test007751() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test007752() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test007753() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test007754() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test007755() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test007756() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test007757() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test007758() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test007759() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test007760() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test007761() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test007762() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test007763() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test007764() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test007765() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test007766() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test007767() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test007768() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test007769() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test007770() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test007771() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test007772() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test007773() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test007774() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test007775() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test007776() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test007777() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test007778() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.toString();
    }

    @Test(timeout = 4000)
    public void test007779() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test007780() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test007781() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test007782() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test007783() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test007784() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test007785() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test007786() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test007787() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test007788() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test007789() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        stringType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test007790() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test007791() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test007792() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test007793() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test007794() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test007795() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test007796() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test007797() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test007798() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test007799() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test007800() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test007801() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test007802() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test007803() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test007804() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test007805() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test007806() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test007807() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test007808() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test007809() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test007810() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test007811() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test007812() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test007813() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test007814() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test007815() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test007816() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test007817() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test007818() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test007819() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test007820() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test008821() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test008822() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test008823() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test008824() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test008825() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test008826() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test008827() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test008828() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test008829() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test008830() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test008831() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test008832() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test008833() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test008834() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test008835() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test008836() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test008837() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test008838() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test008839() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test008840() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test008841() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test008842() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test008843() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test008844() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test008845() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test008846() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test008847() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test008848() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test008849() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test008850() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test008851() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test008852() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test008853() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
    }

    @Test(timeout = 4000)
    public void test008854() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test008855() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test008856() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test008857() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test008858() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test008859() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test008860() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test008861() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test008862() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test008863() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test008864() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test008865() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test008866() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test008867() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test008868() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test008869() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test008870() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test008871() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test008872() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test008873() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test008874() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test008875() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test008876() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test008877() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test008878() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test008879() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test008880() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test008881() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test008882() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test008883() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test008884() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test008885() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test008886() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test008887() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test008888() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test008889() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test008890() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test008891() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test008892() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test008893() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test008894() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test008895() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test008896() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test008897() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test008898() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test008899() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test008900() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test008901() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test008902() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test008903() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test008904() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test008905() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test008906() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test008907() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test008908() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test008909() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test008910() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test008911() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test008912() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test008913() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test008914() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test008915() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test008916() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test009917() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test009918() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test009919() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test009920() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test009921() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test009922() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test009923() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test009924() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test009925() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test009926() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test009927() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test009928() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test009929() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test009930() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test009931() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test009932() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test009933() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test009934() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test009935() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test009936() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test009937() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test009938() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test009939() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test009940() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test009941() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test009942() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test009943() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test009944() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test009945() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test009946() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test009947() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test009948() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test009949() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test009950() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test009951() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test009952() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test009953() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test009954() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test009955() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test009956() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test009957() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
    }

    @Test(timeout = 4000)
    public void test009958() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test009959() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test009960() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test009961() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test009962() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test009963() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test009964() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test009965() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test009966() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test009967() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test009968() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test009969() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test009970() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test009971() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test009972() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test009973() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test009974() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test009975() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test009976() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test009977() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test009978() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test009979() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test009980() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test009981() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test009982() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test009983() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test009984() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test009985() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test009986() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test009987() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test009988() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test009989() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test009990() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test009991() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test009992() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test009993() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test009994() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test009995() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test009996() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test009997() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test009998() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test009999() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0091000() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0091001() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0091002() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0091003() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0091004() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0091005() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0091006() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0091007() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0091008() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0091009() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0091010() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0091011() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0091012() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0091013() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0091014() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0091015() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0091016() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0091017() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0091018() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0091019() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0091020() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0091021() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0091022() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0091023() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0091024() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0091025() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0091026() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0091027() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0091028() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0091029() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0091030() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0091031() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0091032() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0091033() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0091034() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0091035() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0091036() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        UnknownType unknownType1 = (UnknownType) JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0101037() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0101038() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0101039() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0101040() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0101041() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0101042() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0101043() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0101044() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0101045() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0101046() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0101047() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0101048() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0101049() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0101050() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0101051() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0101052() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0101053() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0101054() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0101055() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0101056() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0101057() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0101058() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0101059() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0101060() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0101061() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0101062() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0101063() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0101064() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0101065() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0101066() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0101067() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0101068() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
    }

    @Test(timeout = 4000)
    public void test0101069() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0101070() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0101071() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0101072() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0101073() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0101074() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0101075() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0101076() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0101077() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0101078() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0101079() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0101080() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0101081() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0101082() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0101083() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0101084() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0101085() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0101086() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0101087() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0101088() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0101089() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0101090() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0101091() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0101092() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0101093() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0101094() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0101095() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0101096() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0101097() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0101098() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0101099() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0101100() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0101101() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0101102() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0101103() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0101104() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0101105() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0101106() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0101107() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0101108() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0101109() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0101110() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0101111() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0101112() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0101113() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0101114() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0101115() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0101116() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0101117() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0101118() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0101119() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0101120() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0101121() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0101122() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0101123() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0101124() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0101125() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0101126() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0101127() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0101128() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0101129() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0111131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
    }

    @Test(timeout = 4000)
    public void test0111132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test0111134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0111136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0111137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0111138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test0111139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test0111140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0111141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test0111142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0111143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test0111144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test0111145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0111146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0111148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111198() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111200() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111202() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111203() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111204() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111205() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111206() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111207() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111208() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111209() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111216() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
    }

    @Test(timeout = 4000)
    public void test0111218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0111219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111221() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111223() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0111227() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0111237() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0111238() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111239() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111240() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0111242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0111247() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0111248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test0111250() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0111252() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0111253() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0111254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test0111255() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test0111256() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0111257() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test0111258() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0111259() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test0111260() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test0111261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0111262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0111264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111265() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111266() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111267() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111271() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0111272() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111273() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111274() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111275() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111276() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111277() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111278() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111280() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111281() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0111282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0111283() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111284() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111285() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111286() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0111287() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111288() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111289() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111290() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111291() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111292() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111293() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111294() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111296() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111298() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111299() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111300() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111301() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111302() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111303() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111304() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111305() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111306() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111307() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111308() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111309() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        arrowType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111316() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111317() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111318() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111320() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111321() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111322() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111323() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111324() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111325() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111326() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111327() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111328() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111329() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111330() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111335() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111336() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111337() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111338() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111339() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111340() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111341() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111342() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111347() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111348() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111349() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111350() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111351() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111352() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111353() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111354() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111356() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111357() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111358() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111359() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111360() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111361() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111362() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111363() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111365() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111366() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111367() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111368() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111369() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111370() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111371() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111372() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111373() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111374() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111375() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111376() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111377() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111378() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111379() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111380() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111381() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111382() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111383() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111384() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111385() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111386() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111387() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
    }

    @Test(timeout = 4000)
    public void test0111388() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111389() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111390() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111391() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test0111392() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111393() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0111394() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0111395() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0111396() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test0111397() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test0111398() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0111399() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test0111400() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0111401() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test0111402() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test0111403() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0111404() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111405() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0111406() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111407() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111408() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111409() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111410() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111411() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111412() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111413() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0111414() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111415() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111417() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111418() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111419() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111420() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111421() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111422() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111423() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0111424() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0111425() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111426() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111427() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111428() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0111429() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111430() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111431() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111432() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111433() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111434() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111435() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111436() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111437() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111438() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111439() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111440() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111441() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111442() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111443() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111444() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111445() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111446() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111447() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111448() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111449() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111450() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111451() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111452() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111453() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111454() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111455() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        arrowType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111456() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111457() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111458() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111459() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111460() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111461() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111462() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111463() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111464() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111465() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111466() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111467() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111468() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111469() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111470() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111471() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111472() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111473() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111474() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111475() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111476() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111477() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111478() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111479() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111480() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111481() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111482() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111483() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111484() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111485() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111486() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111487() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111488() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111489() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111490() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111491() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111492() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111493() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111494() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111495() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111496() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111497() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111498() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111499() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111500() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111501() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111502() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111503() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111504() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111505() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111506() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111507() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111508() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111509() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111510() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111511() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111512() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111513() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111514() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111515() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111516() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111517() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111518() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111519() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111520() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111521() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111522() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111523() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111524() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111525() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111526() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111527() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111528() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111529() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111530() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111531() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111532() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111533() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111534() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111535() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111536() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111537() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111538() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111539() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111540() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111541() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111542() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111543() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111544() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111545() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111546() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111547() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111548() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111549() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111550() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111551() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111552() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111553() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111554() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0111555() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111556() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111557() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111558() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111559() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111560() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test0111561() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111562() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0111563() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0111564() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0111565() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test0111566() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test0111567() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0111568() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test0111569() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0111570() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test0111571() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test0111572() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0111573() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0111574() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0111575() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111576() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111577() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111578() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111579() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111580() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111581() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111582() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0111583() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111584() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111585() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111586() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111587() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111588() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111589() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111590() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111591() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111592() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0111593() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0111594() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111595() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111596() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111597() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0111598() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111599() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111600() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111601() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111602() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111603() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111604() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111605() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111606() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111607() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111608() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111609() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111610() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111611() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111612() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111613() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111614() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111615() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111616() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111617() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111619() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111620() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111621() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111623() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111624() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        arrowType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111625() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0111626() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0111627() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0111628() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0111629() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0111630() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0111631() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0111632() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0111633() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0111634() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0111635() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0111636() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0111637() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0111638() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0111639() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0111640() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0111641() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0111642() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0111643() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0111644() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0111645() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0111646() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0111647() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0111648() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111649() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111650() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111651() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111652() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111653() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111654() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111655() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111656() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111657() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111658() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111659() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111660() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111661() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111662() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111663() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111664() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111665() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111666() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111667() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111668() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111669() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111670() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111671() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111672() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111673() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111674() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111675() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111676() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111677() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111678() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111679() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111680() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111681() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111682() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111683() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111684() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111685() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111686() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111687() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111688() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111689() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111690() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111691() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111692() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111693() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111694() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111695() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111696() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111697() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111698() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111699() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111700() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111701() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111702() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111703() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111704() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111705() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111706() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111707() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111708() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111709() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111710() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111711() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111712() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111713() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111714() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111715() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111716() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111717() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111718() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111719() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111720() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111721() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111722() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0111723() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        Node node0 = Node.newString("");
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
        JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
        JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0121724() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0121725() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0121726() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0121727() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0121728() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0121729() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0121730() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0121731() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0121732() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0121733() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0121734() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0121735() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0121736() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0121737() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0121738() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0121739() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0121740() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0121741() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0121742() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0121743() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0121744() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0121745() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0121746() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0121747() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0121748() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0121749() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0121750() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0121751() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0121752() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0121753() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0121754() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0121755() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0121756() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0121757() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0121758() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0121759() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0121760() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0121761() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0121762() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0121763() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0121764() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0121765() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0121766() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0121767() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0121768() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0121769() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0121770() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0121771() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0121772() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0121773() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0121774() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0121775() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0121776() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0121777() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0121778() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0121779() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0121780() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0121781() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0121782() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0121783() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0121784() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0121785() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0121786() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0121787() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0121788() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0121789() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0121790() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0121791() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0121792() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0121793() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0121794() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0121795() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0121796() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0121797() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0121798() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0121799() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0121800() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0121801() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0121802() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0121803() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0121804() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0121805() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0121806() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0121807() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0121808() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0121809() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0121810() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0121811() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0121812() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0121813() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0121814() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0121815() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0121816() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0121817() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131818() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0131819() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0131820() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0131821() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0131822() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0131823() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0131824() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0131825() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0131826() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0131827() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0131828() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0131829() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0131830() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0131831() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0131832() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0131833() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0131834() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0131835() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0131836() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0131837() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0131838() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0131839() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0131840() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0131841() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0131842() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0131843() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0131844() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0131845() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0131846() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0131847() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0131848() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0131849() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0131850() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0131851() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0131852() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0131853() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0131854() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0131855() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0131856() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0131857() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0131858() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0131859() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0131860() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0131861() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0131862() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0131863() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0131864() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0131865() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0131866() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0131867() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0131868() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0131869() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0131870() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0131871() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0131872() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0131873() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0131874() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0131875() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0131876() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0131877() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0131878() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0131879() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0131880() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0131881() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0131882() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0131883() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0131884() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0131885() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0131886() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0131887() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0131888() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0131889() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0131890() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0131891() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0131892() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0131893() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0131894() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0131895() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0131896() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0131897() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0131898() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0131899() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0131900() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0131901() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0131902() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0131903() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0131904() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0131905() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0131906() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0131907() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0131908() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0131909() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131910() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131911() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131912() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0131913() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0131914() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0131915() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0131916() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0131917() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0131918() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0131919() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0131920() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0131921() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0131922() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0131923() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0131924() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0131925() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0131926() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0131927() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0131928() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0131929() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0131930() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0131931() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0131932() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0131933() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0131934() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0131935() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0131936() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0131937() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0131938() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0131939() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0131940() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0131941() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0131942() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0131943() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0131944() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0131945() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0131946() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0131947() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0131948() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0131949() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0131950() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0131951() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0131952() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0131953() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0131954() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0131955() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0131956() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0131957() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0131958() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0131959() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0131960() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0131961() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0131962() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0131963() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0131964() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0131965() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0131966() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0131967() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0131968() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0131969() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0131970() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0131971() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0131972() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0131973() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0131974() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0131975() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0131976() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0131977() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0131978() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0131979() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0131980() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0131981() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0131982() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0131983() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0131984() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0131985() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0131986() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0131987() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0131988() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0131989() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0131990() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0131991() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0131992() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0131993() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
        enumElementType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0131994() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131995() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131996() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131997() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131998() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0131999() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0142000() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0142001() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0142002() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0142003() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0142004() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0142005() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0142006() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0142007() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0142008() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0142009() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0142010() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0142011() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0142012() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0142013() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0142014() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0142015() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0142016() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0142017() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0142018() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0142019() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0142020() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0142021() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0142022() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0142023() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0142024() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0142025() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0142026() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0142027() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0142028() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0142029() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0142030() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0142031() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0142032() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0142033() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0142034() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0142035() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0142036() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0142037() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0142038() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0142039() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0142040() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0142041() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0142042() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0142043() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0142044() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0142045() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0142046() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0142047() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0142048() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0142049() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0142050() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0142051() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0142052() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0142053() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0142054() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0142055() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0142056() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0142057() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0142058() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0142059() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0142060() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0142061() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0142062() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0142063() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0142064() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0142065() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0142066() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0142067() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0142068() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0142069() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0142070() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0142071() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0142072() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0142073() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0142074() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0142075() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0142076() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0142077() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0142078() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0142079() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0142080() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0142081() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0142082() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0142083() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0142084() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0142085() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0142086() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0142087() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0142088() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0142089() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0142090() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0142091() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0142092() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0142093() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0142094() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0142095() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0142096() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0142097() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0142098() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0142099() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0142100() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0142101() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0142102() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0142103() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0142104() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0142105() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0142106() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0142107() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0142108() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0142109() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0142110() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0142111() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0142112() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0142113() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0142114() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0142115() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0142116() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0142117() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0152118() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0152119() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0152120() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0152121() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0152122() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0152123() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0152124() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0152125() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0152126() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0152127() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0152128() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0152129() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0152130() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0152131() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0152132() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0152133() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0152134() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0152135() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0152136() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0152137() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0152138() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0152139() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0152140() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0152141() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0152142() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0152143() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0152144() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0152145() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0152146() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0152147() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0152148() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0152149() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0152150() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0152151() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0152152() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0152153() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0152154() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0152155() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0152156() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0152157() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0152158() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0152159() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0152160() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0152161() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0152162() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0152163() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0152164() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0152165() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0152166() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0152167() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0152168() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0152169() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0152170() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0152171() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0152172() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0152173() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0152174() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0152175() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0152176() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0152177() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0152178() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0152179() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0152180() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0152181() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0152182() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0152183() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0152184() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0152185() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0152186() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0152187() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0152188() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0152189() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0152190() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0152191() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0152192() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0152193() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0152194() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0152195() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0152196() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0152197() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0152198() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0152199() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0152200() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0152201() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0152202() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0152203() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0152204() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0152205() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0152206() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0152207() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0152208() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0152209() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0152210() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0152211() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0162212() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0162213() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0162214() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0162215() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0162216() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0162217() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0162218() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0162219() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0162220() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0162221() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0162222() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0162223() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0162224() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0162225() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0162226() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0162227() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0162228() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0162229() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0162230() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0162231() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0162232() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0162233() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0162234() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0162235() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0162236() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0162237() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0162238() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0162239() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0162240() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0162241() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0162242() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0162243() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0162244() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
    }

    @Test(timeout = 4000)
    public void test0162245() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0162246() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0162247() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0162248() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0162249() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0162250() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0162251() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0162252() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0162253() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0162254() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0162255() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0162256() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0162257() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0162258() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0162259() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0162260() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0162261() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0162262() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0162263() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0162264() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0162265() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0162266() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0162267() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0162268() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0162269() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0162270() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0162271() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0162272() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0162273() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0162274() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0162275() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0162276() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0162277() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0162278() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0162279() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0162280() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0162281() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0162282() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0162283() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0162284() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0162285() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0162286() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0162287() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0162288() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0162289() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0162290() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0162291() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0162292() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0162293() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0162294() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0162295() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0162296() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0162297() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0162298() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0162299() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0162300() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0162301() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0162302() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0162303() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0162304() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0162305() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0162306() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0162307() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172308() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0172309() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0172310() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0172311() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0172312() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0172313() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0172314() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0172315() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0172316() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0172317() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0172318() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0172319() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0172320() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0172321() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0172322() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0172323() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0172324() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0172325() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0172326() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0172327() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0172328() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0172329() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0172330() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0172331() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0172332() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0172333() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0172334() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0172335() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0172336() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0172337() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0172338() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0172339() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0172340() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0172341() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0172342() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0172343() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0172344() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0172345() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0172346() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0172347() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0172348() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0172349() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0172350() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0172351() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0172352() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0172353() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0172354() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0172355() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0172356() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0172357() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0172358() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0172359() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0172360() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0172361() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0172362() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0172363() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0172364() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0172365() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0172366() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0172367() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0172368() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0172369() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0172370() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0172371() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0172372() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0172373() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0172374() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0172375() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0172376() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0172377() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0172378() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0172379() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0172380() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0172381() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0172382() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0172383() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0172384() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0172385() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0172386() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0172387() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0172388() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0172389() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0172390() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0172391() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0172392() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0172393() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0172394() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0172395() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0172396() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0172397() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0172398() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0172399() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0172400() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
    }

    @Test(timeout = 4000)
    public void test0172401() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172402() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172403() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172404() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0172405() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0172406() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0172407() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0172408() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0172409() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0172410() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0172411() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0172412() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0172413() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0172414() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0172415() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0172416() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0172417() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0172418() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0172419() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0172420() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0172421() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0172422() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0172423() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0172424() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0172425() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0172426() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0172427() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0172428() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0172429() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0172430() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0172431() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0172432() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0172433() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0172434() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0172435() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0172436() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0172437() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0172438() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0172439() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0172440() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0172441() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0172442() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0172443() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0172444() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0172445() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0172446() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0172447() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0172448() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0172449() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0172450() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0172451() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0172452() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0172453() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0172454() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0172455() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0172456() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0172457() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0172458() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0172459() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0172460() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0172461() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0172462() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0172463() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0172464() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0172465() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0172466() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0172467() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0172468() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0172469() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0172470() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0172471() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0172472() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0172473() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0172474() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0172475() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0172476() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0172477() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0172478() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0172479() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0172480() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0172481() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0172482() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0172483() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0172484() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0172485() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
        enumElementType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0172486() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172487() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172488() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172489() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172490() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0172491() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        EnumElementType enumElementType1 = (EnumElementType) enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0182492() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0182493() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0182494() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0182495() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0182496() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0182497() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0182498() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0182499() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0182500() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0182501() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0182502() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0182503() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0182504() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0182505() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0182506() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0182507() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0182508() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0182509() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0182510() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0182511() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0182512() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0182513() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0182514() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0182515() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0182516() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0182517() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0182518() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0182519() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0182520() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0182521() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0182522() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0182523() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
    }

    @Test(timeout = 4000)
    public void test0182524() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0182525() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0182526() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0182527() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0182528() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0182529() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0182530() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0182531() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0182532() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0182533() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0182534() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0182535() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0182536() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0182537() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0182538() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0182539() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0182540() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0182541() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0182542() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0182543() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0182544() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0182545() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0182546() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0182547() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0182548() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0182549() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0182550() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0182551() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0182552() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0182553() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0182554() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0182555() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0182556() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0182557() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0182558() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0182559() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0182560() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0182561() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0182562() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0182563() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0182564() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0182565() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0182566() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0182567() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0182568() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0182569() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0182570() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0182571() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0182572() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0182573() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0182574() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0182575() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0182576() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0182577() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0182578() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0182579() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0182580() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0182581() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0182582() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0182583() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0182584() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EmptyScope emptyScope0 = new EmptyScope();
        JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
    }

    @Test(timeout = 4000)
    public void test0192585() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0192586() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0192587() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0192588() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0192589() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0192590() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0192591() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0192592() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0192593() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0192594() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0192595() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0192596() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0192597() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0192598() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0192599() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0192600() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.toString();
    }

    @Test(timeout = 4000)
    public void test0192601() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0192602() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0192603() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0192604() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0192605() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0192606() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0192607() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0192608() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0192609() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0192610() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0192611() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0192612() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0192613() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0192614() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0192615() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test0192616() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0192617() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0192618() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0192619() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0192620() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0192621() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0192622() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0192623() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0192624() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0192625() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0192626() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0192627() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0192628() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0192629() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0192630() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.toString();
    }

    @Test(timeout = 4000)
    public void test0192631() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0192632() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0192633() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0192634() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0192635() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0192636() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0192637() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0192638() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0192639() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0192640() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0192641() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0192642() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0192643() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test0192644() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = stringType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test0202645() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0202646() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0202647() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0202648() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0202649() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0202650() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0202651() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0202652() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0202653() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0202654() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0202655() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0202656() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0202657() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0202658() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0202659() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0202660() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0202661() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0202662() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0202663() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0202664() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0202665() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0202666() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0202667() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0202668() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0202669() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0202670() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0202671() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0202672() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0202673() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0202674() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0202675() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0202676() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0202677() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0202678() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0202679() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0202680() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0202681() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0202682() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0202683() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0202684() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0202685() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0202686() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0202687() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0202688() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0202689() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0202690() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0202691() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0202692() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0202693() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0202694() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0202695() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0202696() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0202697() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0202698() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0202699() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0202700() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0202701() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0202702() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0202703() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0202704() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0202705() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0202706() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0202707() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0202708() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0202709() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0202710() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0202711() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0202712() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0202713() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0202714() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0202715() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0202716() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0202717() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0202718() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0202719() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0202720() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0202721() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0202722() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0212723() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0212724() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0212725() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0212726() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0212727() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0212728() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0212729() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0212730() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0212731() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0212732() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0212733() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0212734() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0212735() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0212736() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0212737() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0212738() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0212739() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0212740() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0212741() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0212742() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0212743() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0212744() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0212745() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0212746() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0212747() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0212748() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0212749() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0212750() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0212751() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0212752() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0212753() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0212754() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0212755() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0212756() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0212757() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0212758() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0212759() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0212760() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0212761() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0212762() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0212763() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0212764() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0212765() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0212766() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0212767() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0212768() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0212769() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0212770() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0212771() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0212772() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0212773() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0212774() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0212775() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0212776() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0212777() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0212778() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0212779() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0212780() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0212781() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0212782() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0212783() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0212784() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0222785() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0222786() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0222787() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0222788() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0222789() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0222790() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0222791() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0222792() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0222793() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0222794() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0222795() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0222796() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0222797() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0222798() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0222799() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0222800() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0222801() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0222802() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0222803() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0222804() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0222805() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0222806() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0222807() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0222808() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0222809() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0222810() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0222811() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0222812() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0222813() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0222814() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0222815() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0222816() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0222817() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0222818() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0222819() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0222820() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0222821() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0222822() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0222823() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0222824() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0222825() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0222826() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0222827() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0222828() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0222829() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0222830() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0222831() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0222832() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0222833() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0222834() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0222835() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0222836() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0222837() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0222838() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0222839() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0222840() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0222841() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0222842() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0222843() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0222844() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0222845() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0222846() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0222847() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0222848() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0222849() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0222850() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0222851() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0222852() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0222853() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0222854() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0222855() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0222856() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0222857() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0222858() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0222859() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0222860() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0222861() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0222862() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0222863() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0222864() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0222865() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0222866() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0222867() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0222868() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0222869() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0222870() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0222871() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0222872() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0222873() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0222874() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0222875() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0222876() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0222877() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0222878() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0222879() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0222880() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0222881() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0222882() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0222883() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0222884() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0222885() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0222886() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0222887() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0222888() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0222889() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0222890() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0222891() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0222892() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0222893() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0222894() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0222895() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0222896() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0222897() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0222898() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0222899() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0222900() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0222901() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0222902() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0222903() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0222904() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0222905() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0222906() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0222907() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0222908() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0222909() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0222910() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0222911() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0222912() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0222913() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0222914() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0222915() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0222916() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0222917() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0222918() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0222919() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0222920() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0222921() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0222922() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0222923() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0222924() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0222925() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0222926() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0222927() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0222928() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0222929() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0222930() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0222931() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0222932() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        boolean boolean0 = enumElementType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0232933() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0232934() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0232935() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0232936() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0232937() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0232938() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0232939() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0232940() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0232941() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0232942() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0232943() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0232944() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0232945() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0232946() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0232947() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0232948() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0232949() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0232950() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0232951() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0232952() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0232953() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0232954() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0232955() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0232956() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0232957() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0232958() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0232959() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0232960() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0232961() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0232962() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0232963() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0232964() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0232965() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0232966() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0232967() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0232968() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0232969() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0232970() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0232971() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0232972() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0232973() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0232974() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0232975() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0232976() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0232977() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0232978() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0232979() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0232980() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0232981() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0232982() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0232983() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0232984() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0232985() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0232986() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0232987() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0232988() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0232989() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0232990() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0232991() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0232992() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0232993() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0232994() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0242995() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0242996() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0242997() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0242998() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0242999() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0243000() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0243001() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0243002() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0243003() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0243004() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0243005() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0243006() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0243007() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0243008() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0243009() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0243010() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0243011() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0243012() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0243013() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0243014() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0243015() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0243016() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0243017() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0243018() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0243019() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0243020() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0243021() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0243022() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0243023() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0243024() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0243025() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0243026() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0243027() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0243028() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0243029() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0243030() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0243031() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0243032() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0243033() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0243034() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0243035() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0243036() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0243037() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0243038() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0243039() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0243040() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0243041() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0243042() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0243043() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0243044() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0243045() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0243046() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0243047() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0243048() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0243049() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0243050() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0243051() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0243052() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0243053() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0243054() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0243055() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0243056() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0253057() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0253058() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0253059() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0253060() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0253061() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0253062() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0253063() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0253064() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0253065() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0253066() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0253067() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0253068() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0253069() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0253070() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0253071() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0253072() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0253073() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0253074() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0253075() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0253076() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0253077() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0253078() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0253079() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0253080() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0253081() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0253082() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0253083() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0253084() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0253085() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0253086() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0253087() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0253088() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test0253089() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test0253090() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test0253091() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0253092() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0253093() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0253094() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0253095() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0253096() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0253097() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0253098() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0253099() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0253100() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0253101() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0253102() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0253103() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0253104() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0253105() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0253106() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0253107() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0253108() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0253109() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0253110() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0253111() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0253112() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0253113() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0253114() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0253115() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0253116() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0253117() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0253118() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0253119() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0253120() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0253121() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0253122() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0253123() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0253124() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0253125() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0253126() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0253127() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0253128() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0253129() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0253130() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0253131() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0253132() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0253133() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0253134() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0253135() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0253136() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0253137() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0253138() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0253139() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0253140() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0253141() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0253142() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0253143() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0253144() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0253145() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0253146() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0253147() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test0253148() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test0253149() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test0253150() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test0263151() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0263152() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0263153() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0263154() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0263155() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0263156() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0263157() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0263158() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0263159() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0263160() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0263161() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0263162() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0263163() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0263164() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0263165() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0263166() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0263167() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0263168() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0263169() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0263170() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0263171() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0263172() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0263173() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0263174() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0263175() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0263176() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0263177() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0263178() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0263179() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0263180() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0263181() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0263182() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0263183() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0263184() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0263185() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0263186() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0263187() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0263188() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0263189() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0263190() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0263191() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0263192() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0263193() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0263194() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0263195() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0263196() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0263197() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0263198() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0263199() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0263200() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0263201() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0263202() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0263203() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0263204() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0263205() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0263206() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0263207() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0263208() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0263209() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0263210() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0263211() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0263212() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0263213() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0263214() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0263215() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0263216() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0263217() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0263218() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0263219() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0263220() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0263221() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0263222() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0263223() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0263224() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0263225() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0263226() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0263227() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0263228() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0263229() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0263230() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0263231() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0263232() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0263233() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0263234() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0263235() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0263236() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0263237() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0263238() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0263239() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0263240() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0263241() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0263242() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0263243() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0263244() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0263245() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0263246() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0263247() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0263248() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0263249() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0263250() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0263251() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0263252() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0263253() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0263254() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0263255() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0263256() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0263257() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0263258() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0263259() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0263260() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0263261() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0263262() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0263263() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0263264() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0263265() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0263266() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0263267() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0263268() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0273269() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0273270() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0273271() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0273272() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0273273() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0273274() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0273275() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0273276() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0273277() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0273278() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0273279() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0273280() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0273281() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0273282() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0273283() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0273284() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0273285() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0273286() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0273287() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0273288() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.toString();
    }

    @Test(timeout = 4000)
    public void test0273289() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0273290() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0273291() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0273292() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0273293() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0273294() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0273295() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0273296() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0273297() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0273298() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0273299() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0273300() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0273301() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0273302() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0273303() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0273304() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0273305() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0273306() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0273307() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0273308() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0273309() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0273310() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0273311() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0273312() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0273313() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0273314() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0273315() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0273316() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0273317() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0273318() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.toString();
    }

    @Test(timeout = 4000)
    public void test0273319() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0273320() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0273321() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0273322() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0273323() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0273324() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0273325() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0273326() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
        stringType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0273327() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0273328() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0283329() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0283330() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0283331() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0283332() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0283333() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0283334() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0283335() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0283336() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0283337() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0283338() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0283339() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0283340() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0283341() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0283342() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0283343() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0283344() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0283345() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0283346() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0283347() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0283348() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0283349() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0283350() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0283351() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0283352() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0283353() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0283354() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0283355() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0283356() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0283357() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0283358() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0283359() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0283360() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0283361() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0283362() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0283363() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0283364() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0283365() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0283366() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0283367() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0283368() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0283369() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0283370() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0283371() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0283372() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0283373() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0283374() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0283375() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0283376() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0283377() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0283378() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0283379() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0283380() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0283381() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0283382() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0283383() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0283384() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0283385() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0283386() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0283387() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0283388() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0283389() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0283390() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0283391() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0283392() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0283393() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0283394() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0283395() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0283396() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0283397() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0283398() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0283399() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0283400() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0283401() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0283402() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0283403() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0283404() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0283405() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0283406() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0283407() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0283408() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0283409() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0283410() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0283411() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0283412() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0283413() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0283414() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0283415() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0283416() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0283417() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0283418() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0283419() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0283420() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0283421() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0283422() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0283423() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0283424() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0283425() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0283426() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0283427() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0283428() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0283429() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0283430() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0283431() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0283432() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0283433() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0283434() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0283435() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0283436() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0283437() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0283438() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0283439() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0283440() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0283441() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0283442() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0283443() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0283444() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0283445() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0283446() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.getLeastSupertype(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0293447() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0293448() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0293449() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0293450() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0293451() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0293452() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0293453() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0293454() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0293455() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0293456() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0293457() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0293458() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0293459() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0293460() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0293461() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0293462() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0293463() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0293464() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0293465() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0293466() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0293467() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0293468() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0293469() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0293470() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0293471() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0293472() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0293473() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0293474() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0293475() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0293476() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0293477() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0293478() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0293479() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0293480() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0293481() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0293482() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0293483() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0293484() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0293485() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0293486() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0293487() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0293488() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0293489() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0293490() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0293491() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0293492() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0293493() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0293494() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0293495() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0293496() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0293497() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0293498() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0293499() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0293500() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0293501() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0293502() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0293503() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0293504() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0293505() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0293506() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0293507() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0293508() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0293509() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0293510() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0293511() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0293512() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0293513() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0293514() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0293515() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0293516() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0293517() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0293518() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0293519() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0293520() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0293521() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0293522() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0293523() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0293524() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0293525() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0293526() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0293527() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0293528() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0293529() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0293530() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0293531() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0293532() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0293533() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0293534() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0293535() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0293536() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0293537() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0293538() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0293539() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0293540() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0293541() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0293542() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0293543() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0293544() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0293545() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0293546() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0293547() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0293548() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0293549() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0293550() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0293551() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0293552() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0293553() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0293554() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0293555() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0293556() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0293557() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0293558() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0293559() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0293560() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0293561() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0293562() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0293563() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0293564() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0303565() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0303566() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0303567() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0303568() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0303569() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0303570() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0303571() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0303572() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0303573() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0303574() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0303575() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0303576() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0303577() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0303578() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0303579() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0303580() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0303581() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0303582() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0303583() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0303584() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0303585() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0303586() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0303587() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0303588() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0303589() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0303590() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0303591() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0303592() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0303593() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0303594() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0303595() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0303596() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0303597() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0303598() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0303599() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0303600() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0303601() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0303602() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0303603() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0303604() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
    }

    @Test(timeout = 4000)
    public void test0303605() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
    }

    @Test(timeout = 4000)
    public void test0303606() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
    }

    @Test(timeout = 4000)
    public void test0303607() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0303608() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0303609() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0303610() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0303611() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0303612() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0303613() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0303614() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0303615() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0303616() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0303617() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0303618() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0303619() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0303620() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0303621() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0303622() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0303623() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0303624() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0303625() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0303626() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0303627() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0303628() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0303629() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0303630() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0303631() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0303632() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0303633() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0303634() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0303635() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0303636() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0303637() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0303638() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0303639() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0303640() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0303641() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0303642() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0303643() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0303644() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0303645() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0303646() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0303647() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0303648() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0303649() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0303650() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0303651() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0303652() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0303653() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0303654() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0303655() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0303656() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0303657() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0303658() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0303659() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0303660() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0303661() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0303662() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0303663() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0303664() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0303665() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0303666() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0303667() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0303668() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0303669() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0303670() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0303671() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0303672() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0303673() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0303674() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0303675() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0303676() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0303677() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0303678() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0303679() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
    }

    @Test(timeout = 4000)
    public void test0303680() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
    }

    @Test(timeout = 4000)
    public void test0303681() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
    }

    @Test(timeout = 4000)
    public void test0303682() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        UnknownType unknownType1 = (UnknownType) unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
    }

    @Test(timeout = 4000)
    public void test0313683() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0313684() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0313685() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0313686() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0313687() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0313688() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0313689() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0313690() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0313691() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0313692() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0313693() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0313694() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0313695() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0313696() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0313697() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0313698() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0313699() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0313700() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0313701() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0313702() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0313703() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0313704() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0313705() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0313706() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0313707() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0313708() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0313709() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0313710() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0313711() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0313712() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0313713() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0313714() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0313715() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0313716() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0313717() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0313718() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0313719() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0313720() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0313721() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0313722() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0313723() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0313724() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0313725() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0313726() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0313727() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0313728() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0313729() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0313730() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0313731() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0313732() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0313733() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0313734() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0313735() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0313736() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0313737() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0313738() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0313739() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0313740() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0313741() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0313742() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ObjectType objectType0 = allType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0323743() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0323744() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0323745() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0323746() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0323747() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0323748() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0323749() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0323750() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0323751() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0323752() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0323753() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0323754() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0323755() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0323756() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0323757() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0323758() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0323759() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0323760() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0323761() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0323762() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0323763() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0323764() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0323765() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0323766() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0323767() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0323768() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0323769() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0323770() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0323771() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0323772() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0323773() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0323774() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0323775() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0323776() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0323777() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0323778() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0323779() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0323780() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0323781() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0323782() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0323783() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0323784() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0323785() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0323786() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0323787() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0323788() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0323789() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0323790() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0323791() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0323792() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0323793() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0323794() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0323795() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0323796() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0323797() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0323798() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0323799() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0323800() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0323801() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0323802() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0323803() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0323804() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0323805() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0323806() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0323807() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0323808() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0323809() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0323810() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0323811() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0323812() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0323813() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0323814() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0323815() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0323816() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0323817() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0323818() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0323819() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0323820() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0323821() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0323822() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0323823() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0323824() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0323825() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0323826() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0323827() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0323828() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0323829() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0323830() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0323831() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0323832() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.toString();
    }

    @Test(timeout = 4000)
    public void test0323833() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0323834() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0323835() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0323836() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0323837() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0323838() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0323839() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0323840() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0323841() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0323842() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0323843() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0323844() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0323845() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0323846() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0323847() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0323848() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0323849() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0323850() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0323851() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0323852() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0323853() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0323854() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0323855() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0323856() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0323857() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0323858() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0323859() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0323860() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0333861() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0333862() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0333863() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0333864() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0333865() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0333866() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0333867() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0333868() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0333869() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0333870() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0333871() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0333872() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0333873() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0333874() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0333875() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0333876() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0333877() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0333878() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0333879() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0333880() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0333881() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0333882() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0333883() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0333884() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0333885() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0333886() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0333887() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0333888() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0333889() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0333890() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0333891() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0333892() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.restrictByNotNullOrUndefined();
    }

    @Test(timeout = 4000)
    public void test0343893() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0343894() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0343895() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0343896() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0343897() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0343898() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0343899() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0343900() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0343901() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0343902() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0343903() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0343904() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0343905() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0343906() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0343907() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0343908() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0343909() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0343910() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0343911() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0343912() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0343913() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0343914() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0343915() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0343916() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0343917() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0343918() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0343919() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0343920() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0343921() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0343922() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0343923() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0343924() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType.isSubtype((JSType) numberType0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test0353925() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353926() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test0353927() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test0353928() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0353929() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test0353930() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0353931() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0353932() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test0353933() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0353934() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0353935() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0353936() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test0353937() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0353938() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test0353939() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0353940() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0353941() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353942() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353943() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353944() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353945() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353946() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353947() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353948() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353949() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353950() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353951() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353952() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353953() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353954() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353955() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353956() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353957() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353958() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353959() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353960() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353961() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353962() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353963() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353964() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353965() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353966() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353967() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353968() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353969() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353970() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353971() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353972() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353973() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353974() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353975() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353976() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353977() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353978() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353979() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353980() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353981() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353982() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353983() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353984() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353985() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353986() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353987() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353988() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353989() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353990() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353991() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353992() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353993() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353994() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353995() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353996() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353997() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353998() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0353999() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354000() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354001() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354002() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354003() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354004() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354005() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354006() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354007() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354008() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354009() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354010() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
    }

    @Test(timeout = 4000)
    public void test0354011() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0354012() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0354013() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0354014() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0354015() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0354016() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0354017() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0354018() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0354019() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0354020() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0354021() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0354022() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0354023() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0354024() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0354025() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0354026() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0354027() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0354028() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0354029() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0354030() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0354031() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0354032() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0354033() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0354034() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0354035() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0354036() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0354037() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0354038() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0354039() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0354040() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0354041() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354042() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test0354043() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test0354044() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0354045() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.wasEmptyNode();
    }

    @Test(timeout = 4000)
    public void test0354046() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0354047() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0354048() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test0354049() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0354050() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0354051() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0354052() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test0354053() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test0354054() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test0354055() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test0354056() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0354057() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0354058() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0354059() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0354060() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0354061() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0354062() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0354063() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0354064() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0354065() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0354066() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0354067() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0354068() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0354069() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0354070() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0354071() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0354072() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0354073() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0354074() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0354075() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0354076() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0354077() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0354078() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0354079() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0354080() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0354081() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0354082() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0354083() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0354084() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0354085() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0354086() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0354087() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0354088() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0354089() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0354090() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0354091() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0354092() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0354093() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0354094() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0354095() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0354096() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0354097() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0354098() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0354099() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0354100() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0354101() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0354102() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0354103() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0354104() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0354105() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0354106() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0354107() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354108() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354109() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354110() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354111() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354112() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354113() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354114() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354115() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354116() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354117() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354118() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354119() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354120() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354121() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354122() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354123() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354124() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354125() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354126() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354127() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354128() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354129() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354130() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354131() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354132() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354133() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354134() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354135() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354136() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354137() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354138() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354139() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354140() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354141() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354142() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354143() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354144() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354145() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354146() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354147() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354148() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354149() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354150() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354151() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354152() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354153() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354154() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354155() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354156() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354157() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354158() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354159() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354160() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354161() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354162() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354163() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354164() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354165() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354166() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354167() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354168() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354169() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354170() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354171() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354172() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354173() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354174() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354175() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354176() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354177() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354178() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354179() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354180() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
    }

    @Test(timeout = 4000)
    public void test0354181() throws Throwable {
        Node node0 = Node.newString(991, "", 991, 991);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
        arrowType0.getTypesUnderShallowInequality(arrowType0);
    }

    @Test(timeout = 4000)
    public void test0364182() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0364183() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0364184() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0364185() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0364186() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0364187() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0364188() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0364189() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0364190() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0364191() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0364192() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0364193() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0364194() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0364195() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0364196() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0364197() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0364198() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0364199() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0364200() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0364201() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0364202() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0364203() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0364204() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0364205() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.toString();
    }

    @Test(timeout = 4000)
    public void test0364206() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0364207() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0364208() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0364209() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0364210() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0364211() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0364212() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        stringType0.getTypesUnderShallowEquality((JSType) null);
    }

    @Test(timeout = 4000)
    public void test0374213() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0374214() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0374215() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0374216() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0374217() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0374218() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0374219() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0374220() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0374221() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0374222() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0374223() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0374224() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0374225() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0374226() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0374227() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0374228() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0374229() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0374230() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0374231() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0374232() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0374233() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0374234() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0374235() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0374236() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0374237() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0374238() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0374239() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0374240() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0374241() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0374242() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0374243() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0374244() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0374245() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0374246() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0374247() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0374248() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0374249() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0374250() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0374251() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0374252() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0374253() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0374254() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0374255() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0374256() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0374257() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0374258() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0374259() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0374260() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0374261() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0374262() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0374263() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0374264() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0374265() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0374266() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0374267() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0374268() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0374269() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0374270() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0374271() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0374272() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0374273() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0374274() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0374275() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0374276() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0374277() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0374278() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0374279() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0374280() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0374281() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0374282() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0374283() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getTypesUnderEquality(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0384284() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0384285() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0384286() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0384287() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0384288() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0384289() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0384290() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0384291() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0384292() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0384293() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0384294() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0384295() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0384296() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0384297() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0384298() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0384299() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0384300() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0384301() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0384302() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0384303() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0384304() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0384305() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0384306() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0384307() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0384308() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0384309() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0384310() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0384311() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0384312() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0384313() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0384314() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        allType0.getNativeType(jSTypeNative0);
    }

    @Test(timeout = 4000)
    public void test0394315() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0394316() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0394317() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0394318() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0394319() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0394320() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0394321() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0394322() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0394323() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0394324() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0394325() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0394326() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0394327() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0394328() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0394329() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0394330() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0394331() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0394332() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0394333() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0394334() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0394335() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0394336() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0394337() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0394338() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0394339() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0394340() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0394341() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0394342() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0394343() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0394344() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0394345() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0394346() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.findPropertyType("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test0404347() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0404348() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0404349() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0404350() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0404351() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0404352() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0404353() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0404354() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0404355() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0404356() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0404357() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0404358() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0404359() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0404360() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0404361() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0404362() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0404363() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0404364() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0404365() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0404366() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0404367() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0404368() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0404369() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0404370() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0404371() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0404372() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0404373() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0404374() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0404375() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0404376() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0404377() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0404378() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0404379() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0404380() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0404381() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0404382() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0404383() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0404384() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0404385() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0404386() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0404387() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0404388() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0404389() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0404390() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0404391() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0404392() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0404393() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0404394() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0404395() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0404396() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0404397() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0404398() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0404399() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0404400() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0404401() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0404402() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0404403() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0404404() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0404405() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0404406() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0404407() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0404408() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0404409() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        numberType0.canTestForShallowEqualityWith(nullType0);
    }

    @Test(timeout = 4000)
    public void test0414410() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0414411() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0414412() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0414413() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0414414() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0414415() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0414416() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0414417() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0414418() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0414419() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0414420() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0414421() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0414422() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0414423() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0414424() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0414425() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0414426() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0414427() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0414428() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0414429() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0414430() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0414431() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0414432() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0414433() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0414434() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0414435() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0414436() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0414437() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0414438() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0414439() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0414440() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0414441() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0414442() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0414443() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0414444() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0414445() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0414446() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0414447() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0414448() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0414449() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0414450() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0414451() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0414452() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0414453() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0414454() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0414455() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0414456() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0414457() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0414458() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0414459() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0414460() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0414461() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0414462() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0414463() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0414464() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0414465() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0414466() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0414467() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0414468() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0414469() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0414470() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0414471() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0414472() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        booleanType0.canTestForEqualityWith(nullType0);
    }

    @Test(timeout = 4000)
    public void test0424473() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0424474() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0424475() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0424476() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0424477() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0424478() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0424479() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0424480() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0424481() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0424482() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0424483() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0424484() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0424485() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0424486() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0424487() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0424488() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0424489() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0424490() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0424491() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0424492() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0424493() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0424494() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0424495() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0424496() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0424497() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0424498() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0424499() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0424500() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0424501() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0424502() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0424503() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0424504() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.canAssignTo((JSType) null);
    }

    @Test(timeout = 4000)
    public void test0434505() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0434506() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0434507() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0434508() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0434509() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0434510() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0434511() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0434512() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0434513() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0434514() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0434515() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0434516() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0434517() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0434518() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0434519() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0434520() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0434521() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0434522() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0434523() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0434524() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0434525() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0434526() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0434527() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0434528() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0434529() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0434530() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0434531() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0434532() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0434533() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0434534() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0434535() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0434536() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0434537() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0434538() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0434539() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0434540() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0434541() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0434542() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0434543() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0434544() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0434545() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0434546() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0434547() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0434548() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0434549() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0434550() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0434551() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0434552() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0434553() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0434554() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0434555() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0434556() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0434557() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0434558() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0434559() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0434560() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0434561() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0434562() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0434563() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0434564() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0434565() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0434566() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0434567() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0434568() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0434569() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0434570() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0434571() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0434572() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0434573() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0434574() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0434575() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0434576() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0434577() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0434578() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0434579() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0434580() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0434581() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0434582() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0434583() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0434584() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0434585() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0434586() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0434587() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0434588() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0434589() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0434590() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0434591() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0434592() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0434593() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0434594() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0434595() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0434596() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.canAssignTo(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0444597() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0444598() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0444599() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0444600() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0444601() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0444602() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0444603() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0444604() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0444605() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0444606() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0444607() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0444608() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0444609() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0444610() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0444611() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0444612() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0444613() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0444614() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0444615() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0444616() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0444617() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0444618() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0444619() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0444620() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0444621() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0444622() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0444623() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0444624() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0444625() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0444626() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0444627() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0444628() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0444629() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0444630() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0444631() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0444632() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0444633() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0444634() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0444635() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0444636() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0444637() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0444638() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0444639() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0444640() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0444641() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0444642() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0444643() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0444644() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0444645() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0444646() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0444647() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0444648() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0444649() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0444650() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0444651() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0444652() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0444653() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0444654() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0444655() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0444656() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0444657() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0444658() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0444659() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0444660() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0444661() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0444662() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0444663() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0444664() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0444665() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0444666() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0444667() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        JSType.isSubtype((JSType) unknownType0, (JSType) nullType0);
    }

    @Test(timeout = 4000)
    public void test0454668() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0454669() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0454670() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0454671() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0454672() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0454673() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0454674() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0454675() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0454676() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0454677() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0454678() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0454679() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0454680() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0454681() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0454682() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0454683() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0454684() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0454685() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0454686() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0454687() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0454688() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0454689() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0454690() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0454691() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0454692() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0454693() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0454694() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0454695() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0454696() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0454697() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0454698() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0454699() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0454700() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0454701() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0454702() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0454703() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0454704() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0454705() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0454706() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0454707() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0454708() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0454709() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0454710() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0454711() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0454712() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0454713() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0454714() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0454715() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0454716() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0454717() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0454718() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0454719() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0454720() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0454721() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0454722() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0454723() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0454724() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0454725() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0454726() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0454727() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0454728() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0454729() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0454730() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0454731() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0454732() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0454733() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0454734() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0454735() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0454736() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0454737() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0454738() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0454739() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0454740() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0454741() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0454742() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0454743() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0454744() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0454745() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0454746() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0454747() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0454748() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0454749() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0454750() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0454751() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0454752() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0454753() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0454754() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0454755() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0454756() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0454757() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0454758() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0454759() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0454760() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0454761() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0454762() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0454763() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0454764() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0454765() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0454766() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0454767() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0454768() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0454769() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0454770() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0454771() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0454772() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0454773() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0454774() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0454775() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0454776() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0454777() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0454778() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0454779() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0454780() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0454781() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0454782() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0454783() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0454784() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0454785() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0454786() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0454787() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0454788() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0454789() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0454790() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0454791() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0454792() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0454793() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0454794() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0454795() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0454796() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0454797() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0454798() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0454799() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0454800() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0454801() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0454802() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0454803() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0454804() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0454805() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0454806() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0454807() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0454808() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0454809() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0454810() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0454811() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0454812() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0454813() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0454814() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0454815() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0454816() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0454817() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0454818() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0464819() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0464820() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0464821() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0464822() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0464823() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0464824() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0464825() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0464826() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0464827() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0464828() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0464829() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0464830() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0464831() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0464832() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0464833() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0464834() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0464835() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0464836() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0464837() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0464838() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0464839() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0464840() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0464841() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0464842() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0464843() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0464844() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0464845() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0464846() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0464847() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0464848() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0464849() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0464850() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0464851() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0464852() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0464853() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0464854() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0464855() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0464856() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0464857() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0464858() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0464859() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0464860() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0464861() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0464862() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0464863() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0464864() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0464865() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0464866() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0464867() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0464868() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0464869() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0464870() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0464871() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0464872() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0464873() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0464874() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0464875() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0464876() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0464877() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0464878() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0464879() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0464880() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0464881() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0464882() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0464883() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0464884() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0464885() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0464886() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0464887() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0464888() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0464889() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0464890() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0464891() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0464892() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0464893() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0464894() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0464895() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0464896() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0474897() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0474898() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0474899() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0474900() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0474901() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0474902() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0474903() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0474904() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0474905() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0474906() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0474907() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0474908() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0474909() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0474910() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0474911() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0474912() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0474913() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0474914() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0474915() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0474916() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0474917() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0474918() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0474919() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0474920() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0474921() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0474922() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0474923() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0474924() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0474925() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0474926() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0474927() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0474928() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType.getLeastSupertype((JSType) booleanType0, (JSType) booleanType0);
    }

    @Test(timeout = 4000)
    public void test0484929() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0484930() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0484931() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0484932() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0484933() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0484934() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0484935() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0484936() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0484937() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0484938() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0484939() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0484940() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0484941() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0484942() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0484943() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0484944() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0484945() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0484946() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0484947() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0484948() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0484949() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0484950() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0484951() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0484952() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0484953() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0484954() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0484955() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0484956() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0484957() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0484958() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0484959() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0484960() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0484961() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0484962() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0484963() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0484964() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0484965() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0484966() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0484967() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0484968() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0484969() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0484970() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0484971() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0484972() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0484973() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0484974() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0484975() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0484976() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0484977() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0484978() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0484979() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0484980() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0484981() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0484982() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0484983() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0484984() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0484985() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0484986() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0484987() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0484988() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0484989() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0484990() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0484991() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
    }

    @Test(timeout = 4000)
    public void test0484992() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0484993() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0484994() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0484995() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0484996() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0484997() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0484998() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0484999() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0485000() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0485001() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0485002() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0485003() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0485004() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0485005() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0485006() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0485007() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0485008() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0485009() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0485010() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0485011() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0485012() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0485013() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0485014() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0485015() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0485016() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0485017() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0485018() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0485019() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0485020() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0485021() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0485022() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0485023() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0485024() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0485025() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0485026() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0485027() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0485028() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0485029() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0485030() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0485031() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0485032() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0485033() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0485034() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0485035() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0485036() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0485037() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0485038() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0485039() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0485040() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0485041() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0485042() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0485043() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0485044() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0485045() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0485046() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0485047() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0485048() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
    }

    @Test(timeout = 4000)
    public void test0485049() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
    }

    @Test(timeout = 4000)
    public void test0485050() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
    }

    @Test(timeout = 4000)
    public void test0485051() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isEquivalentTo(nullType0);
    }

    @Test(timeout = 4000)
    public void test0495052() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0495053() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0495054() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0495055() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0495056() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0495057() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0495058() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0495059() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0495060() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0495061() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0495062() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0495063() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0495064() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0495065() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0495066() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0495067() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0495068() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0495069() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0495070() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0495071() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0495072() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0495073() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0495074() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0495075() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0495076() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0495077() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0495078() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0495079() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0495080() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0495081() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0495082() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
    }

    @Test(timeout = 4000)
    public void test0495083() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0495084() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0495085() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0495086() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0495087() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0495088() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0495089() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0495090() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0495091() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0495092() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0495093() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0495094() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0495095() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0495096() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0495097() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0495098() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0495099() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0495100() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0495101() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0495102() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0495103() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0495104() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0495105() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0495106() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0495107() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0495108() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0495109() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0495110() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
    }

    @Test(timeout = 4000)
    public void test0495111() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEquivalentTo(allType0);
    }

    @Test(timeout = 4000)
    public void test0505112() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0505113() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0505114() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0505115() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0505116() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0505117() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0505118() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0505119() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0505120() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0505121() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0505122() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0505123() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0505124() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0505125() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0505126() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0505127() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0505128() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0505129() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0505130() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0505131() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0505132() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0505133() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0505134() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0505135() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0505136() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0505137() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0505138() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0505139() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0505140() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0505141() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0505142() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0505143() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0505144() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0505145() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0505146() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0505147() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0505148() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0505149() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0505150() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0505151() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0505152() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0505153() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0505154() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0505155() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0505156() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0505157() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0505158() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0505159() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0505160() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0505161() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0505162() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0505163() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0505164() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0505165() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0505166() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0505167() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0505168() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0505169() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0505170() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0505171() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0505172() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0505173() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0515174() throws Throwable {
        JSType.TypePair jSType_TypePair0 = new JSType.TypePair((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test0525175() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0525176() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0525177() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0525178() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0525179() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0525180() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0525181() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0525182() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0525183() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0525184() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0525185() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0525186() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0525187() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0525188() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0525189() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0525190() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0525191() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0525192() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0525193() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0525194() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0525195() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0525196() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0525197() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0525198() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0525199() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0525200() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0525201() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0525202() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0525203() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0525204() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0525205() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0525206() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0525207() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0525208() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0525209() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0525210() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0525211() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0525212() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0525213() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0525214() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0525215() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0525216() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0525217() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0525218() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0525219() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0525220() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0525221() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0525222() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0525223() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0525224() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0525225() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0525226() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0525227() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0525228() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0525229() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0525230() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0525231() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0525232() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0525233() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0525234() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0525235() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0525236() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0535237() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0535238() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0535239() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0535240() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0535241() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0535242() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0535243() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0535244() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0535245() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0535246() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0535247() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0535248() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0535249() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0535250() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0535251() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0535252() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0535253() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0535254() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0535255() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0535256() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0535257() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0535258() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0535259() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0535260() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0535261() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0535262() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0535263() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0535264() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0535265() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0535266() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0535267() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0535268() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0535269() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0535270() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0535271() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0535272() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0535273() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0535274() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0535275() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0535276() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
    }

    @Test(timeout = 4000)
    public void test0535277() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0535278() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0535279() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0535280() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0535281() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0535282() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0535283() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0535284() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0535285() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0535286() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0535287() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0535288() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0535289() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0535290() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0535291() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0535292() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0535293() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0535294() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0535295() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0535296() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0535297() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0535298() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0535299() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0535300() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0535301() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0535302() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0535303() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0535304() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0535305() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0535306() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0535307() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0535308() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0535309() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0535310() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0535311() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0535312() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0535313() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
    }

    @Test(timeout = 4000)
    public void test0535314() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        JSType jSType0 = unknownType0.autoboxesTo();
    }

    @Test(timeout = 4000)
    public void test0545315() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0545316() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0545317() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0545318() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0545319() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0545320() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0545321() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0545322() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0545323() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0545324() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0545325() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0545326() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0545327() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0545328() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0545329() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0545330() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0545331() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0545332() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0545333() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0545334() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0545335() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0545336() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0545337() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0545338() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0545339() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0545340() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0545341() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0545342() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0545343() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0545344() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0545345() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0545346() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0545347() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0545348() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0545349() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0545350() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0545351() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0545352() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0545353() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0545354() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0545355() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0545356() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0545357() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0545358() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0545359() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0545360() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0545361() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0545362() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0545363() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0545364() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0545365() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0545366() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0545367() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0545368() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0545369() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0545370() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0545371() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0545372() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0545373() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0545374() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
    }

    @Test(timeout = 4000)
    public void test0545375() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.hashCode();
    }

    @Test(timeout = 4000)
    public void test0555376() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0555377() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0555378() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0555379() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0555380() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0555381() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0555382() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0555383() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0555384() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0555385() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0555386() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0555387() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0555388() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0555389() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0555390() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0555391() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0555392() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0555393() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0555394() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0555395() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0555396() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0555397() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0555398() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0555399() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0555400() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0555401() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0555402() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0555403() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0555404() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0555405() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0555406() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0555407() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
    }

    @Test(timeout = 4000)
    public void test0555408() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0555409() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0555410() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0555411() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0555412() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0555413() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0555414() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0555415() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0555416() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0555417() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0555418() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0555419() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0555420() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0555421() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0555422() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0555423() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0555424() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0555425() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0555426() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0555427() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0555428() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0555429() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0555430() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0555431() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0555432() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0555433() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0555434() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0555435() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0555436() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
    }

    @Test(timeout = 4000)
    public void test0555437() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
    }

    @Test(timeout = 4000)
    public void test0565438() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0565439() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0565440() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0565441() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0565442() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0565443() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0565444() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0565445() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0565446() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0565447() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0565448() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0565449() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0565450() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0565451() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0565452() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0565453() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0565454() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0565455() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0565456() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0565457() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0565458() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0565459() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0565460() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0565461() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0565462() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0565463() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0565464() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0565465() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0565466() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0565467() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0565468() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0565469() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0565470() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0565471() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0565472() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0565473() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0565474() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0565475() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0565476() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0565477() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0565478() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0565479() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0565480() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0565481() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0565482() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0565483() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0565484() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0565485() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0565486() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0565487() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0565488() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0565489() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0565490() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0565491() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0565492() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0565493() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0565494() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0565495() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0565496() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0565497() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0565498() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0565499() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        boolean boolean0 = booleanType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0575500() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0575501() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0575502() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0575503() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0575504() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0575505() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0575506() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0575507() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0575508() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0575509() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0575510() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0575511() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0575512() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0575513() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0575514() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0575515() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0575516() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0575517() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0575518() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0575519() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0575520() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0575521() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0575522() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0575523() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0575524() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0575525() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0575526() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0575527() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0575528() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0575529() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0575530() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0575531() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0575532() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0575533() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0575534() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0575535() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0575536() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0575537() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0575538() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0575539() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0575540() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0575541() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0575542() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0575543() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0575544() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0575545() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0575546() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0575547() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0575548() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0575549() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0575550() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0575551() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0575552() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0575553() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0575554() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0575555() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0575556() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0575557() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0575558() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0575559() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0585560() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0585561() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0585562() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0585563() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0585564() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0585565() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0585566() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0585567() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0585568() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0585569() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0585570() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0585571() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0585572() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0585573() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0585574() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0585575() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0585576() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0585577() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0585578() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0585579() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0585580() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0585581() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0585582() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0585583() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0585584() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0585585() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0585586() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0585587() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0585588() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0585589() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0585590() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0585591() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0585592() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0585593() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0585594() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0585595() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0585596() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0585597() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0585598() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0585599() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0585600() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0585601() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0585602() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0585603() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0585604() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0585605() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0585606() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0585607() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0585608() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0585609() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0585610() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0585611() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0585612() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0585613() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0585614() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0585615() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0585616() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0585617() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0585618() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0585619() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0595620() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0595621() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0595622() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0595623() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0595624() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0595625() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0595626() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0595627() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0595628() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0595629() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0595630() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0595631() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0595632() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0595633() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0595634() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0595635() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0595636() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0595637() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0595638() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0595639() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0595640() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0595641() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0595642() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0595643() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0595644() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0595645() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0595646() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0595647() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0595648() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0595649() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0595650() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0595651() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0595652() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0595653() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0595654() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0595655() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0595656() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0595657() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0595658() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0595659() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0595660() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0595661() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0595662() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0595663() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0595664() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0595665() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0595666() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0595667() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0595668() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0595669() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0595670() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0595671() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0595672() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0595673() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0595674() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0595675() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0595676() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0595677() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0595678() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0595679() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0595680() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0595681() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0595682() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0595683() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0595684() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0595685() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0595686() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0595687() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0595688() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0595689() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0595690() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0595691() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0595692() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0595693() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0595694() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0595695() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0595696() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0595697() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0595698() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0595699() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0595700() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0595701() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0595702() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0595703() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0595704() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0595705() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0595706() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0595707() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0595708() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0595709() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0595710() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595711() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595712() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595713() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0595714() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0595715() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0595716() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0595717() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0595718() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0595719() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0595720() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0595721() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0595722() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0595723() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0595724() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0595725() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0595726() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0595727() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0595728() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0595729() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0595730() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0595731() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0595732() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0595733() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0595734() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0595735() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0595736() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0595737() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0595738() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0595739() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0595740() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0595741() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0595742() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0595743() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0595744() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0595745() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0595746() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0595747() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0595748() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0595749() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0595750() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0595751() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0595752() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0595753() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0595754() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0595755() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0595756() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0595757() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0595758() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0595759() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0595760() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0595761() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0595762() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0595763() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0595764() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0595765() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0595766() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0595767() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0595768() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0595769() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0595770() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0595771() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0595772() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0595773() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0595774() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0595775() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0595776() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0595777() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0595778() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0595779() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0595780() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0595781() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0595782() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0595783() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0595784() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0595785() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0595786() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0595787() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0595788() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0595789() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0595790() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0595791() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0595792() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0595793() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        enumElementType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0595794() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595795() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595796() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595797() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595798() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0595799() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        EnumElementType enumElementType1 = (EnumElementType) JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605800() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0605801() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0605802() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0605803() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0605804() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0605805() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0605806() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0605807() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0605808() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0605809() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0605810() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0605811() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0605812() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0605813() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0605814() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0605815() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0605816() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0605817() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0605818() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0605819() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0605820() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0605821() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0605822() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0605823() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0605824() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0605825() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0605826() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605827() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605828() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0605829() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605830() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0605831() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605832() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0605833() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0605834() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0605835() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0605836() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0605837() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0605838() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0605839() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0605840() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605841() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605842() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605843() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0605844() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0605845() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0605846() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0605847() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0605848() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0605849() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0605850() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0605851() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0605852() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0605853() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0605854() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0605855() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0605856() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0605857() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0605858() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0605859() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0605860() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0605861() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0605862() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0605863() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0605864() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0605865() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0605866() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0605867() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0605868() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605869() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605870() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0605871() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605872() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0605873() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605874() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0605875() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0605876() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0605877() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0605878() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0605879() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0605880() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0605881() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0605882() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0605883() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0605884() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0605885() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0605886() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0605887() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0605888() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0605889() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0605890() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0605891() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0605892() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0605893() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0605894() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0605895() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0605896() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0605897() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0605898() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605899() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0605900() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605901() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0605902() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0605903() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0605904() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0605905() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0605906() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0605907() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0605908() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0605909() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0605910() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0605911() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0605912() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0605913() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605914() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605915() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605916() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605917() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605918() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605919() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605920() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605921() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605922() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605923() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605924() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605925() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0605926() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0605927() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0605928() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0605929() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0605930() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0605931() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0605932() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0605933() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0605934() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0605935() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0605936() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0605937() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0605938() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0605939() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0605940() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0605941() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0605942() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0605943() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0605944() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0605945() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0605946() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0605947() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0605948() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0605949() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0605950() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0605951() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605952() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605953() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0605954() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605955() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0605956() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605957() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0605958() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0605959() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0605960() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0605961() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0605962() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0605963() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0605964() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0605965() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0605966() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0605967() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0605968() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0605969() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0605970() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0605971() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0605972() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0605973() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0605974() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0605975() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0605976() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0605977() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0605978() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0605979() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0605980() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0605981() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605982() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNullable();
    }

    @Test(timeout = 4000)
    public void test0605983() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605984() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0605985() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0605986() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0605987() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isObject();
    }

    @Test(timeout = 4000)
    public void test0605988() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0605989() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0605990() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0605991() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0605992() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.toString();
    }

    @Test(timeout = 4000)
    public void test0605993() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0605994() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0605995() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0605996() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0605997() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0605998() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isInterface();
    }

    @Test(timeout = 4000)
    public void test0605999() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0606000() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0606001() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isNullable();
    }

    @Test(timeout = 4000)
    public void test0606002() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isNoType();
    }

    @Test(timeout = 4000)
    public void test0606003() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0606004() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0606005() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0606006() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0606007() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0606008() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.toString();
    }

    @Test(timeout = 4000)
    public void test0606009() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0606010() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0606011() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0606012() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0606013() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isResolved();
    }

    @Test(timeout = 4000)
    public void test0606014() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0606015() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0606016() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isNullType();
    }

    @Test(timeout = 4000)
    public void test0606017() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isAllType();
    }

    @Test(timeout = 4000)
    public void test0606018() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0606019() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0606020() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0606021() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0606022() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0606023() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0606024() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0606025() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isObject();
    }

    @Test(timeout = 4000)
    public void test0606026() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0606027() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0606028() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0606029() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0606030() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0606031() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0606032() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0606033() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        unknownType2.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0606034() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0606035() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0606036() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0606037() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0606038() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0606039() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        UnknownType unknownType1 = (UnknownType) unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        UnknownType unknownType2 = (UnknownType) unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0616040() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0616041() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0616042() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0616043() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0616044() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0616045() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0616046() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0616047() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0616048() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0616049() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0616050() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0616051() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0616052() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0616053() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0616054() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0616055() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0616056() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0616057() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0616058() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0616059() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0616060() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0616061() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0616062() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0616063() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0616064() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0616065() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0616066() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0616067() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0616068() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0616069() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0616070() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0616071() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0616072() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0616073() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0616074() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0616075() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0616076() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0616077() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0616078() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0616079() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0616080() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0616081() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0616082() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0616083() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0616084() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0616085() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0616086() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0616087() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0616088() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0616089() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0616090() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0616091() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0616092() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0616093() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0616094() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0616095() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0616096() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0616097() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0616098() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0616099() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0616100() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0616101() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0616102() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0616103() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0616104() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0616105() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0616106() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0616107() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0616108() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0616109() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0616110() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0616111() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0616112() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0616113() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0616114() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0616115() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0616116() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0616117() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0616118() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0616119() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0616120() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0616121() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0616122() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0616123() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0616124() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0616125() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0616126() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0616127() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0616128() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0616129() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0616130() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0616131() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0616132() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0616133() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0616134() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0616135() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0616136() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0616137() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0616138() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0616139() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0616140() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0616141() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0616142() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0616143() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0616144() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0616145() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0616146() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0616147() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0616148() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0616149() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0616150() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0616151() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0616152() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0616153() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0616154() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0616155() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0616156() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0616157() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0616158() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0616159() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0616160() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0626161() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0626162() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0626163() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0626164() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0626165() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0626166() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0626167() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0626168() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0626169() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0626170() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0626171() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0626172() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0626173() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0626174() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0626175() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0626176() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0626177() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0626178() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0626179() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0626180() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0626181() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0626182() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0626183() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.toString();
    }

    @Test(timeout = 4000)
    public void test0626184() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0626185() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0626186() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0626187() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0626188() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0626189() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0626190() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0626191() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0626192() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0626193() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0626194() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.toString();
    }

    @Test(timeout = 4000)
    public void test0626195() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0626196() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0626197() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0626198() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0626199() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0626200() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0626201() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0626202() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0626203() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0626204() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0626205() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0626206() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0626207() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0626208() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0626209() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0626210() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0626211() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0626212() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0626213() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0626214() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0626215() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0626216() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0626217() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0626218() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0626219() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        voidType1.equals((Object) voidType0);
    }

    @Test(timeout = 4000)
    public void test0626220() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0626221() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0626222() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
    }

    @Test(timeout = 4000)
    public void test0626223() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
    }

    @Test(timeout = 4000)
    public void test0626224() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
    }

    @Test(timeout = 4000)
    public void test0626225() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0626226() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0626227() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0626228() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0626229() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0626230() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0626231() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0626232() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0626233() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0626234() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0626235() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0626236() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0626237() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0626238() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0626239() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0626240() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0626241() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0626242() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0626243() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0626244() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0626245() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0626246() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.toString();
    }

    @Test(timeout = 4000)
    public void test0626247() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0626248() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0626249() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0626250() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0626251() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0626252() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0626253() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0626254() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.toString();
    }

    @Test(timeout = 4000)
    public void test0626255() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0626256() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0626257() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0626258() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0626259() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0626260() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0626261() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0626262() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test0626263() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0626264() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0626265() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isNullType();
    }

    @Test(timeout = 4000)
    public void test0626266() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0626267() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test0626268() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0626269() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0626270() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0626271() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0626272() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0626273() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0626274() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0626275() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0626276() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test0626277() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0626278() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test0626279() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType0.equals((Object) voidType1);
    }

    @Test(timeout = 4000)
    public void test0626280() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
        voidType1.equals((Object) voidType0);
    }

    @Test(timeout = 4000)
    public void test0626281() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
    }

    @Test(timeout = 4000)
    public void test0626282() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
    }

    @Test(timeout = 4000)
    public void test0626283() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
    }

    @Test(timeout = 4000)
    public void test0626284() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        VoidType voidType1 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.differsFrom(voidType1);
    }

    @Test(timeout = 4000)
    public void test0636285() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0636286() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0636287() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0636288() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0636289() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0636290() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0636291() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0636292() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0636293() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0636294() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0636295() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0636296() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0636297() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0636298() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0636299() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0636300() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0636301() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0636302() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0636303() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0636304() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0636305() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0636306() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0636307() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0636308() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0636309() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0636310() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0636311() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0636312() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0636313() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0636314() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0636315() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0636316() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0636317() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0636318() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0636319() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0636320() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0636321() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0636322() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0636323() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0636324() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0636325() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0636326() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0636327() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0636328() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0636329() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0636330() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0636331() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0636332() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0636333() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0636334() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0636335() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0636336() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0636337() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0636338() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0636339() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0636340() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0636341() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0636342() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0636343() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0636344() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0636345() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0636346() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0636347() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0636348() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0636349() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0636350() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0636351() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0636352() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0636353() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0636354() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0636355() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0636356() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0636357() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0636358() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0636359() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0636360() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0636361() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0636362() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0636363() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0636364() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0636365() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0636366() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0636367() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0636368() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0636369() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0636370() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0636371() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0636372() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0636373() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0636374() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0636375() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0636376() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0636377() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0636378() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0636379() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0636380() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0636381() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0636382() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0636383() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0636384() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0636385() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0636386() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0636387() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0636388() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0636389() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0636390() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0636391() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0636392() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0636393() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0636394() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0636395() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0636396() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0636397() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0636398() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0636399() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0636400() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0636401() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0636402() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0636403() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0636404() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0636405() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0636406() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0636407() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0636408() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0636409() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0636410() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0636411() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0636412() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0636413() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0636414() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0636415() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0636416() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0636417() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0636418() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0636419() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0636420() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0636421() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0636422() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0636423() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0646424() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0646425() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0646426() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0646427() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0646428() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0646429() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0646430() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0646431() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0646432() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0646433() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0646434() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0646435() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0646436() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0646437() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0646438() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0646439() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0646440() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0646441() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0646442() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0646443() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0646444() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0646445() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0646446() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0646447() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0646448() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0646449() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0646450() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0646451() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0646452() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0646453() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0646454() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0646455() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
    }

    @Test(timeout = 4000)
    public void test0646456() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0646457() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0646458() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0646459() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0646460() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0646461() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0646462() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0646463() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0646464() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0646465() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0646466() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0646467() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0646468() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0646469() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0646470() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0646471() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0646472() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0646473() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0646474() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0646475() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0646476() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0646477() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0646478() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0646479() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0646480() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0646481() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0646482() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0646483() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0646484() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
    }

    @Test(timeout = 4000)
    public void test0646485() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.differsFrom(numberType0);
    }

    @Test(timeout = 4000)
    public void test0656486() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0656487() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0656488() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0656489() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0656490() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0656491() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0656492() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0656493() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0656494() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0656495() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0656496() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0656497() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0656498() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0656499() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0656500() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0656501() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0656502() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0656503() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0656504() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0656505() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0656506() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0656507() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0656508() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0656509() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0656510() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0656511() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0656512() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0656513() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0656514() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0656515() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0656516() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0656517() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0656518() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0656519() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0656520() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0656521() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0656522() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0656523() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0656524() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0656525() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.differsFrom((JSType) null);
    }

    @Test(timeout = 4000)
    public void test0666526() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0666527() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0666528() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0666529() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0666530() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0666531() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0666532() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0666533() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0666534() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0666535() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0666536() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0666537() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0666538() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0666539() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0666540() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0666541() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0666542() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0666543() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0666544() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0666545() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0666546() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0666547() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0666548() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0666549() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0666550() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0666551() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0666552() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0666553() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0666554() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0666555() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0666556() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0666557() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test0676558() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0676559() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0676560() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0676561() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0676562() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0676563() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0676564() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0676565() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0676566() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0676567() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0676568() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0676569() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0676570() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0676571() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0676572() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0676573() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0676574() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0676575() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0676576() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0676577() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0676578() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0676579() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0676580() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0676581() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0676582() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0676583() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0676584() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0676585() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0676586() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0676587() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0676588() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0676589() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
    }

    @Test(timeout = 4000)
    public void test0676590() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
    }

    @Test(timeout = 4000)
    public void test0676591() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
    }

    @Test(timeout = 4000)
    public void test0676592() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0676593() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0676594() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0676595() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0676596() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0676597() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0676598() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0676599() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0676600() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0676601() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0676602() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0676603() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0676604() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0676605() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0676606() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0676607() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0676608() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0676609() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0676610() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0676611() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0676612() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0676613() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0676614() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0676615() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0676616() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0676617() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0676618() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0676619() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0676620() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0676621() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0676622() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0676623() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0676624() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0676625() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0676626() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0676627() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0676628() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0676629() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0676630() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0676631() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0676632() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0676633() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0676634() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0676635() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0676636() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0676637() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0676638() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0676639() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0676640() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0676641() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0676642() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0676643() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0676644() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0676645() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0676646() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0676647() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0676648() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
    }

    @Test(timeout = 4000)
    public void test0676649() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
    }

    @Test(timeout = 4000)
    public void test0676650() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
    }

    @Test(timeout = 4000)
    public void test0676651() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
    }

    @Test(timeout = 4000)
    public void test0686652() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0686653() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0686654() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0686655() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0686656() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0686657() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0686658() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0686659() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0686660() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0686661() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0686662() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0686663() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0686664() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0686665() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0686666() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0686667() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0686668() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0686669() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0686670() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0686671() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0686672() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0686673() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0686674() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0686675() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0686676() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0686677() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0686678() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0686679() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0686680() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0686681() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0686682() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0686683() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0686684() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0686685() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0686686() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0686687() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0686688() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0686689() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0686690() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0686691() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0686692() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0686693() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0686694() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0686695() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0686696() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0686697() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0686698() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0686699() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0686700() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0686701() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0686702() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0686703() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0686704() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0686705() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0686706() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0686707() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0686708() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0686709() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0686710() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0686711() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0686712() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0686713() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0686714() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0686715() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0686716() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0686717() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0686718() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0686719() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0686720() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0686721() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0686722() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0686723() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0686724() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test0686725() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0686726() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0686727() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0686728() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0686729() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0686730() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0686731() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0686732() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0686733() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0686734() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0686735() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0686736() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0686737() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0686738() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0686739() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0686740() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0686741() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0686742() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    }

    @Test(timeout = 4000)
    public void test0696743() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0696744() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0696745() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0696746() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0696747() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0696748() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0696749() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0696750() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0696751() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0696752() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0696753() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0696754() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0696755() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0696756() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0696757() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0696758() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0696759() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0696760() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0696761() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0696762() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0696763() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0696764() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0696765() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0696766() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0696767() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0696768() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0696769() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0696770() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0696771() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0696772() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0696773() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0696774() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
    }

    @Test(timeout = 4000)
    public void test0696775() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0696776() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0696777() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0696778() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0696779() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0696780() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0696781() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0696782() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0696783() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0696784() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0696785() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0696786() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0696787() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0696788() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0696789() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0696790() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0696791() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0696792() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0696793() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0696794() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0696795() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0696796() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0696797() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0696798() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0696799() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0696800() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0696801() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0696802() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0696803() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
    }

    @Test(timeout = 4000)
    public void test0696804() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
    }

    @Test(timeout = 4000)
    public void test0706805() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0706806() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0706807() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0706808() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0706809() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0706810() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0706811() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0706812() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0706813() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0706814() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0706815() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0706816() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0706817() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0706818() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0706819() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0706820() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0706821() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0706822() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0706823() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0706824() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0706825() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0706826() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0706827() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0706828() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0706829() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0706830() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0706831() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0706832() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0706833() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0706834() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0706835() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0706836() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0706837() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0706838() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0706839() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0706840() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0706841() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0706842() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0706843() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0706844() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0706845() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0706846() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0706847() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0706848() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0706849() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0706850() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0706851() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0706852() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0706853() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0706854() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0706855() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0706856() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0706857() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0706858() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0706859() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0706860() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0706861() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0706862() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0706863() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0706864() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0706865() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0706866() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0706867() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0706868() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0706869() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0706870() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0706871() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0706872() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0706873() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0706874() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0706875() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0706876() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0706877() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0706878() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0706879() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0706880() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0706881() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0706882() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0706883() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0706884() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0706885() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0706886() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0706887() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0706888() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0706889() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0706890() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0706891() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0706892() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0706893() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0706894() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0706895() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0706896() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.testForEquality(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0716897() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0716898() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0716899() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0716900() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0716901() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0716902() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0716903() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0716904() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0716905() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0716906() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0716907() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0716908() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0716909() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0716910() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0716911() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0716912() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0716913() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0716914() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0716915() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0716916() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0716917() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0716918() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0716919() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0716920() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0716921() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0716922() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0716923() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0716924() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0716925() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0716926() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0716927() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0716928() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0716929() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0716930() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0716931() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0716932() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0716933() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0716934() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0716935() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0716936() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0716937() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0716938() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0716939() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0716940() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0716941() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0716942() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0716943() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0716944() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0716945() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0716946() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0716947() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0716948() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0716949() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0716950() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0716951() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0716952() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0716953() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0716954() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0716955() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0716956() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0716957() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0716958() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0716959() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0716960() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0716961() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0716962() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0716963() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0716964() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0716965() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0716966() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0716967() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0716968() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0716969() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0716970() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0716971() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0716972() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0716973() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0716974() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0716975() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0716976() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0716977() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0716978() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0716979() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0716980() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0716981() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0716982() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0716983() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0716984() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0716985() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0716986() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0716987() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0716988() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0716989() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0716990() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0716991() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0716992() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0716993() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0716994() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0716995() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0716996() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0716997() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0716998() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0716999() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0717000() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0717001() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0717002() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0717003() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0717004() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0717005() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0717006() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0717007() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0717008() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0717009() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0717010() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0717011() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0717012() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0717013() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0717014() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0717015() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0717016() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0717017() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0717018() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0717019() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0717020() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0717021() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0717022() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0717023() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0717024() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0717025() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0717026() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0717027() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0717028() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0717029() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0717030() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0717031() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0717032() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0717033() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0717034() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0717035() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0727036() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0727037() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0727038() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0727039() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0727040() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0727041() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0727042() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0727043() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0727044() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0727045() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0727046() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0727047() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0727048() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0727049() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0727050() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0727051() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0727052() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0727053() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0727054() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0727055() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0727056() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0727057() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0727058() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0727059() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0727060() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0727061() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0727062() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0727063() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0727064() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0727065() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0727066() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0727067() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0727068() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0727069() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0727070() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0727071() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0727072() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0727073() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0727074() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0727075() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0727076() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0727077() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0727078() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0727079() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0727080() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0727081() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0727082() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0727083() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0727084() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0727085() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0727086() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0727087() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0727088() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0727089() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0727090() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0727091() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0727092() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0727093() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0727094() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0727095() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0727096() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0727097() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0727098() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0727099() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0727100() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0727101() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0727102() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0727103() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0727104() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0727105() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0727106() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0727107() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0727108() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0727109() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0727110() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0727111() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0727112() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0727113() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0727114() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0727115() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0727116() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0727117() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0727118() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0727119() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0727120() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0727121() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0727122() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0727123() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0727124() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0727125() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0727126() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0727127() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0727128() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0727129() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0727130() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0727131() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0727132() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0727133() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0727134() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0727135() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0727136() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0727137() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0727138() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0727139() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0727140() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0727141() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0727142() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0727143() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0727144() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0727145() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0727146() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0727147() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0727148() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0727149() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0727150() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0727151() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0727152() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
    }

    @Test(timeout = 4000)
    public void test0727153() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
    }

    @Test(timeout = 4000)
    public void test0727154() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
    }

    @Test(timeout = 4000)
    public void test0727155() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.testForEquality(allType0);
    }

    @Test(timeout = 4000)
    public void test0737156() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0737157() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0737158() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0737159() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0737160() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0737161() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0737162() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0737163() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0737164() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0737165() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0737166() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0737167() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0737168() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0737169() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0737170() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0737171() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0737172() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0737173() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0737174() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0737175() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0737176() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0737177() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0737178() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0737179() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0737180() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0737181() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0737182() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0737183() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0737184() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0737185() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0737186() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0737187() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0737188() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0737189() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0737190() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0737191() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0737192() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0737193() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0737194() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0737195() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0737196() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0737197() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0737198() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0737199() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0737200() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0737201() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0737202() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0737203() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0737204() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0737205() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0737206() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0737207() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0737208() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0737209() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0737210() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0737211() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0737212() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0737213() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0737214() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0737215() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0737216() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0737217() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0737218() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0737219() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0737220() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0737221() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0737222() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0737223() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0737224() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0737225() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0737226() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0737227() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0737228() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0737229() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0737230() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0737231() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0737232() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0737233() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0737234() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0737235() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0737236() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0737237() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0737238() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0737239() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0737240() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0737241() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0737242() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0737243() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0737244() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0737245() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0737246() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0737247() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0737248() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0737249() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.toString();
    }

    @Test(timeout = 4000)
    public void test0737250() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0737251() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0737252() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0737253() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0737254() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0737255() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0737256() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0737257() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0737258() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0737259() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0737260() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0737261() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0737262() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0737263() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0737264() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0737265() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0737266() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0737267() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0737268() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0737269() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
        objectType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0737270() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0737271() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0737272() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0737273() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        ObjectType objectType0 = unknownType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0747274() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0747275() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0747276() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0747277() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0747278() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0747279() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0747280() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0747281() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0747282() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0747283() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0747284() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0747285() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0747286() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0747287() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0747288() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0747289() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0747290() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0747291() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0747292() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0747293() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0747294() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0747295() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0747296() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0747297() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0747298() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0747299() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0747300() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0747301() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0747302() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0747303() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0747304() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0747305() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0747306() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0747307() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0747308() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0747309() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0747310() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0747311() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0747312() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0747313() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0747314() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0747315() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0747316() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0747317() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0747318() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0747319() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0747320() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0747321() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0747322() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0747323() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0747324() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0747325() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0747326() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0747327() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0747328() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0747329() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0747330() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0747331() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0747332() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0747333() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0747334() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0747335() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0747336() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0747337() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0747338() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0747339() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0747340() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0747341() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0747342() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0747343() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0747344() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0747345() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0747346() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0747347() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0747348() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0747349() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0747350() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0747351() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0747352() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0747353() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0747354() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0747355() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0747356() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0747357() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0747358() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0747359() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0747360() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0747361() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0747362() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0747363() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0747364() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0747365() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0747366() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0747367() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0747368() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0747369() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0747370() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0747371() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0747372() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0747373() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0747374() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0747375() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0747376() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0747377() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0747378() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0747379() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0747380() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0747381() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0747382() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0747383() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0747384() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0747385() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0747386() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0747387() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0747388() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0747389() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0747390() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0747391() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0747392() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0747393() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0747394() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0747395() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0747396() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0747397() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0747398() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0747399() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0747400() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0747401() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0747402() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0747403() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0747404() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0747405() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0747406() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0747407() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0747408() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0747409() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0747410() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0747411() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0747412() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.canAssignTo(unknownType0);
    }

    @Test(timeout = 4000)
    public void test0757413() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0757414() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0757415() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0757416() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0757417() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0757418() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0757419() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0757420() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0757421() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0757422() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0757423() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0757424() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0757425() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0757426() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0757427() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0757428() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0757429() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0757430() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0757431() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0757432() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0757433() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0757434() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0757435() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0757436() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0757437() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0757438() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0757439() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0757440() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0757441() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0757442() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0757443() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0757444() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test0757445() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0757446() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0757447() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0757448() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0757449() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0757450() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0757451() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0757452() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0757453() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0757454() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0757455() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0757456() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0757457() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0757458() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0757459() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0757460() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0757461() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0757462() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0757463() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0757464() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0757465() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0757466() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0757467() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0757468() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0757469() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0757470() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0757471() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0757472() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0757473() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test0757474() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test0767475() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test0777476() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0777477() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0777478() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0777479() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0777480() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0777481() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0777482() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0777483() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0777484() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0777485() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0777486() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0777487() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0777488() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0777489() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0777490() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0777491() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0777492() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0777493() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0777494() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0777495() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0777496() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0777497() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0777498() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0777499() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0777500() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0777501() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0777502() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0777503() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0777504() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0777505() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0777506() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0777507() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
    }

    @Test(timeout = 4000)
    public void test0777508() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0777509() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0777510() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0777511() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0777512() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0777513() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0777514() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0777515() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0777516() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0777517() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0777518() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0777519() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0777520() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0777521() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0777522() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0777523() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0777524() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0777525() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0777526() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0777527() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0777528() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0777529() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0777530() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0777531() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0777532() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0777533() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0777534() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0777535() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0777536() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
    }

    @Test(timeout = 4000)
    public void test0777537() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
    }

    @Test(timeout = 4000)
    public void test0787538() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0787539() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0787540() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0787541() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0787542() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0787543() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0787544() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0787545() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0787546() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0787547() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0787548() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0787549() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0787550() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0787551() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0787552() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0787553() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0787554() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0787555() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0787556() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0787557() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0787558() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0787559() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0787560() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0787561() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0787562() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0787563() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0787564() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0787565() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0787566() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0787567() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0787568() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0787569() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0787570() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0787571() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0787572() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0787573() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0787574() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0787575() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0787576() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0787577() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0787578() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0787579() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0787580() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0787581() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0787582() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0787583() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0787584() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0787585() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0787586() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0787587() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.toString();
    }

    @Test(timeout = 4000)
    public void test0787588() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0787589() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0787590() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0787591() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0787592() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0787593() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0787594() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0787595() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0787596() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0787597() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0787598() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0787599() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0787600() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0787601() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0787602() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0787603() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0787604() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0787605() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0787606() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0787607() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0787608() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType.getGreatestSubtype((JSType) booleanType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test0797609() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0797610() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797611() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0797612() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797613() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797614() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797615() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0797616() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797617() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797618() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797619() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797620() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797621() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797622() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797623() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797624() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797625() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797626() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797627() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797628() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797629() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797630() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0797631() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797632() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797633() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0797634() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797635() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797636() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797637() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0797638() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0797639() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0797640() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797641() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0797642() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797643() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797644() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797645() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0797646() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797647() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797648() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797649() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797650() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797651() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797652() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797653() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797654() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797655() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797656() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797657() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797658() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797659() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797660() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0797661() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797662() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797663() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0797664() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797665() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797666() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797667() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797668() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797669() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797670() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797671() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797672() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797673() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797674() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797675() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797676() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797677() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797678() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797679() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797680() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0797681() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797682() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797683() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797684() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797685() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797686() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797687() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797688() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0797689() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797690() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797691() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797692() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797693() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797694() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0797695() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0797696() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0797697() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0797698() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0797699() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797700() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0797701() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797702() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797703() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797704() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0797705() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797706() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797707() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797708() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797709() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797710() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797711() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797712() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797713() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797714() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797715() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797716() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797717() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797718() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797719() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0797720() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797721() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797722() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0797723() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797724() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797725() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797726() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797727() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797728() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797729() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797730() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797731() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797732() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797733() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797734() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797735() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797736() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797737() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797738() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797739() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0797740() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797741() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797742() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797743() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797744() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797745() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797746() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797747() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0797748() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797749() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797750() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797751() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797752() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797753() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797754() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797755() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797756() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797757() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797758() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797759() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797760() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797761() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797762() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797763() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797764() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797765() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797766() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797767() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797768() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797769() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797770() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797771() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797772() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0797773() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797774() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797775() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797776() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797777() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797778() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0797779() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0797780() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0797781() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0797782() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0797783() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0797784() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0797785() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0797786() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
    }

    @Test(timeout = 4000)
    public void test0797787() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797788() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0797789() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797790() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797791() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797792() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0797793() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797794() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797795() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797796() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797797() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797798() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797799() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797800() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797801() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797802() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797803() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797804() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797805() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797806() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797807() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0797808() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797809() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797810() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0797811() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797812() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797813() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797814() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797815() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797816() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797817() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797818() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797819() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797820() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797821() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797822() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797823() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797824() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797825() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797826() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797827() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0797828() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797829() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797830() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797831() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797832() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797833() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797834() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797835() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0797836() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797837() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797838() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797839() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797840() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797841() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0797842() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0797843() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0797844() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0797845() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0797846() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0797847() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0797848() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0797849() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0797850() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0797851() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0797852() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0797853() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0797854() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0797855() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0797856() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0797857() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0797858() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0797859() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0797860() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0797861() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0797862() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0797863() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0797864() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0797865() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0797866() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0797867() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
        indexedType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0797868() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
    }

    @Test(timeout = 4000)
    public void test0797869() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
    }

    @Test(timeout = 4000)
    public void test0797870() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
    }

    @Test(timeout = 4000)
    public void test0797871() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
    }

    @Test(timeout = 4000)
    public void test0797872() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
    }

    @Test(timeout = 4000)
    public void test0797873() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = allType0.equals(indexedType0);
    }

    @Test(timeout = 4000)
    public void test0807874() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0807875() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0807876() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0807877() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0807878() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0807879() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0807880() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0807881() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0807882() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0807883() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0807884() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0807885() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0807886() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0807887() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0807888() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0807889() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0807890() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0807891() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0807892() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0807893() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0807894() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0807895() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0807896() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0807897() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0807898() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0807899() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0807900() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0807901() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0807902() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0807903() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0807904() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0807905() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0807906() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0807907() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0807908() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0807909() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0807910() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0807911() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0807912() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0807913() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0807914() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0807915() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0807916() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0807917() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0807918() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0807919() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0807920() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0807921() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0807922() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0807923() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0807924() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0807925() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0807926() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0807927() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0807928() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0807929() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0807930() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0807931() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0807932() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0807933() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0807934() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0807935() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0807936() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0807937() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0807938() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0807939() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0807940() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0807941() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0807942() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0807943() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0807944() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0807945() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0807946() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0807947() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0807948() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0807949() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0807950() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0807951() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0807952() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0807953() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0807954() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0807955() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0807956() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0807957() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0807958() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0807959() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0807960() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0807961() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0807962() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
    }

    @Test(timeout = 4000)
    public void test0807963() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0807964() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0807965() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0807966() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0807967() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0807968() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0807969() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0807970() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0807971() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0807972() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0807973() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0807974() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0807975() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0807976() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0807977() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0807978() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0807979() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0807980() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0807981() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0807982() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0807983() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0807984() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0807985() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0807986() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0807987() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0807988() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0807989() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0807990() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0807991() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0807992() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0807993() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0807994() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0807995() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0807996() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0807997() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0807998() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0807999() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0808000() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0808001() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0808002() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0808003() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0808004() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0808005() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0808006() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0808007() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0808008() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0808009() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0808010() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0808011() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0808012() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0808013() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0808014() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0808015() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0808016() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0808017() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0808018() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0808019() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0808020() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0808021() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0808022() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0808023() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0808024() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0808025() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0808026() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0808027() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0808028() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0808029() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808030() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0808031() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0808032() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0808033() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0808034() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0808035() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0808036() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0808037() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0808038() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0808039() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0808040() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0808041() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0808042() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0808043() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0808044() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        indexedType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0808045() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0808046() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0808047() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0808048() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0808049() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0808050() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
    }

    @Test(timeout = 4000)
    public void test0808051() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808052() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0808053() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0808054() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0808055() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0808056() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0808057() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0808058() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0808059() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0808060() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808061() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0808062() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0808063() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0808064() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0808065() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0808066() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0808067() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0808068() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0808069() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0808070() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0808071() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0808072() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0808073() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0808074() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0808075() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0808076() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0808077() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0808078() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0808079() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0808080() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808081() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0808082() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0808083() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0808084() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0808085() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0808086() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0808087() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0808088() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0808089() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0808090() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0808091() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0808092() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0808093() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0808094() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0808095() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0808096() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0808097() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0808098() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0808099() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0808100() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0808101() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0808102() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0808103() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0808104() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0808105() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0808106() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0808107() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0808108() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0808109() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0808110() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0808111() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0808112() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0808113() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0808114() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0808115() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0808116() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0808117() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808118() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0808119() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0808120() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0808121() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0808122() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0808123() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0808124() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0808125() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0808126() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0808127() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0808128() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0808129() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0808130() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0808131() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0808132() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
        indexedType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0808133() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808134() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808135() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808136() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808137() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0808138() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0818139() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0818140() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0818141() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0818142() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0818143() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0818144() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0818145() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0818146() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0818147() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0818148() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0818149() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0818150() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0818151() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0818152() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0818153() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0818154() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0818155() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0818156() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0818157() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0818158() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0818159() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0818160() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0818161() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0818162() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0818163() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0818164() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0818165() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0818166() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0818167() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0818168() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0818169() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0818170() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0818171() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0818172() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0818173() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0818174() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0818175() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0818176() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0818177() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    }

    @Test(timeout = 4000)
    public void test0818178() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0818179() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0818180() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0818181() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0818182() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0818183() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0818184() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0818185() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0818186() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0818187() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0818188() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0818189() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0818190() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0818191() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0818192() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0818193() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0818194() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0818195() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0818196() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0818197() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0818198() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0818199() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0818200() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0818201() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0818202() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0818203() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0818204() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0818205() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0818206() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0818207() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0818208() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0818209() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0818210() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0818211() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0818212() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0818213() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0818214() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
    }

    @Test(timeout = 4000)
    public void test0818215() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.clearResolved();
    }

    @Test(timeout = 4000)
    public void test0828216() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0828217() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0828218() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0828219() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0828220() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0828221() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0828222() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0828223() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0828224() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0828225() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0828226() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0828227() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0828228() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0828229() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0828230() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0828231() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0828232() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0828233() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0828234() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0828235() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0828236() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0828237() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0828238() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0828239() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0828240() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0828241() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0828242() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0828243() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0828244() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0828245() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0828246() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0828247() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0828248() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0828249() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0828250() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0828251() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0828252() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0828253() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0828254() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0828255() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0828256() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0828257() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0828258() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0828259() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0828260() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0828261() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0828262() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0828263() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0828264() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0828265() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0828266() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0828267() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0828268() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0828269() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0828270() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0828271() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0828272() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0828273() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0828274() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0828275() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0828276() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0828277() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0828278() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0828279() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0828280() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0828281() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0828282() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0828283() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0828284() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0828285() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0828286() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0828287() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0828288() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0828289() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0828290() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0828291() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
    }

    @Test(timeout = 4000)
    public void test0828292() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.forgiveUnknownNames();
    }

    @Test(timeout = 4000)
    public void test0838293() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0838294() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0838295() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0838296() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0838297() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0838298() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0838299() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0838300() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0838301() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0838302() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0838303() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0838304() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0838305() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0838306() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0838307() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0838308() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0838309() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0838310() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0838311() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0838312() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0838313() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0838314() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0838315() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0838316() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0838317() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0838318() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0838319() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0838320() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0838321() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0838322() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0838323() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test0838324() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        allType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test0848325() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0848326() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0848327() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0848328() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0848329() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0848330() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0848331() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0848332() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0848333() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0848334() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0848335() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0848336() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0848337() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0848338() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0848339() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0848340() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0848341() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0848342() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0848343() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0848344() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0848345() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0848346() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0848347() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0848348() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0848349() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0848350() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0848351() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0848352() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0848353() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0848354() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0848355() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0848356() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0848357() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0848358() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0848359() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0848360() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0848361() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0848362() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0848363() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0848364() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0848365() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0848366() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0848367() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0848368() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0848369() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0848370() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0848371() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0848372() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0848373() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0848374() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0848375() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0848376() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0848377() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0848378() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0848379() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0848380() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0848381() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0848382() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0848383() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0848384() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0858385() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0858386() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0858387() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0858388() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0858389() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0858390() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0858391() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0858392() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0858393() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0858394() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0858395() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0858396() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0858397() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0858398() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0858399() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0858400() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0858401() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0858402() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0858403() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0858404() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0858405() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0858406() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0858407() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0858408() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0858409() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0858410() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0858411() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0858412() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0858413() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0858414() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0858415() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0858416() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0858417() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0858418() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0858419() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0858420() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0858421() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0858422() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0858423() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0858424() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0858425() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0858426() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0858427() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0858428() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0858429() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0858430() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0858431() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0858432() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0858433() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0858434() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0858435() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0858436() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0858437() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0858438() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0858439() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0858440() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0858441() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0858442() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0858443() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0858444() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0868445() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0868446() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0868447() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0868448() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0868449() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0868450() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0868451() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0868452() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0868453() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0868454() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0868455() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0868456() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0868457() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0868458() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0868459() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0868460() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0868461() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0868462() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0868463() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0868464() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0868465() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0868466() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0868467() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0868468() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0868469() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0868470() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0868471() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0868472() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0868473() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0868474() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0868475() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0868476() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0868477() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.toString();
    }

    @Test(timeout = 4000)
    public void test0868478() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0868479() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0868480() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0868481() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0868482() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0868483() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0868484() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0868485() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0868486() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0868487() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0868488() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0868489() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0868490() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0868491() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0868492() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0868493() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0868494() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0868495() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0868496() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0868497() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0868498() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0868499() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0868500() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0868501() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0868502() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0868503() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0868504() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        numberType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0868505() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0868506() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0868507() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0868508() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0868509() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0868510() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0868511() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0868512() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0868513() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0868514() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0868515() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0868516() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0868517() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0868518() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0868519() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0868520() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0868521() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0868522() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0868523() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0868524() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0868525() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0868526() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0868527() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0868528() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0868529() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0868530() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0868531() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0868532() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0868533() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0868534() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0868535() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test0868536() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        enumElementType0.getTypesUnderShallowEquality(numberType0);
    }

    @Test(timeout = 4000)
    public void test0878537() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0878538() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0878539() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0878540() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0878541() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0878542() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0878543() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0878544() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0878545() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0878546() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0878547() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0878548() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0878549() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0878550() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0878551() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0878552() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0878553() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0878554() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0878555() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0878556() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0878557() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0878558() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0878559() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0878560() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0878561() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0878562() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0878563() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0878564() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0878565() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0878566() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0878567() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0878568() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0878569() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0878570() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0878571() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0878572() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0878573() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0878574() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0878575() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0878576() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0878577() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0878578() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0878579() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0878580() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0878581() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0878582() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0878583() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0878584() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0878585() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0878586() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0878587() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.toString();
    }

    @Test(timeout = 4000)
    public void test0878588() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0878589() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0878590() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0878591() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0878592() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0878593() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0878594() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0878595() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0878596() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0888597() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0888598() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0888599() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0888600() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0888601() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0888602() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0888603() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0888604() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0888605() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0888606() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0888607() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.toString();
    }

    @Test(timeout = 4000)
    public void test0888608() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0888609() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0888610() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0888611() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0888612() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0888613() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0888614() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0888615() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0888616() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0888617() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0888618() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0888619() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0888620() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0888621() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0888622() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0888623() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0888624() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0888625() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0888626() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0888627() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test0888628() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0888629() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0888630() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0888631() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0888632() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0888633() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0888634() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0888635() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0888636() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0888637() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.toString();
    }

    @Test(timeout = 4000)
    public void test0888638() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0888639() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0888640() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0888641() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0888642() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0888643() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0888644() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0888645() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0888646() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0888647() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0888648() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0888649() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0888650() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0888651() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0888652() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0888653() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0888654() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0888655() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test0888656() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test0898657() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0898658() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0898659() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0898660() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0898661() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0898662() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0898663() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0898664() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0898665() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0898666() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0898667() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0898668() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0898669() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0898670() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0898671() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0898672() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0898673() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0898674() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0898675() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0898676() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0898677() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0898678() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0898679() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0898680() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0898681() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0898682() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0898683() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0898684() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0898685() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0898686() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0898687() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0898688() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0898689() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0898690() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0898691() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0898692() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0898693() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0898694() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0898695() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    }

    @Test(timeout = 4000)
    public void test0898696() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0898697() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0898698() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0898699() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0898700() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.toString();
    }

    @Test(timeout = 4000)
    public void test0898701() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0898702() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0898703() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0898704() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0898705() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0898706() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0898707() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0898708() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0898709() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0898710() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0898711() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0898712() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0898713() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0898714() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0898715() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0898716() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0898717() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0898718() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0898719() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0898720() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0898721() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isUnknownType();
    }

    @Test(timeout = 4000)
    public void test0898722() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0898723() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0898724() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0898725() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0898726() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0898727() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0898728() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test0898729() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isObject();
    }

    @Test(timeout = 4000)
    public void test0898730() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0898731() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0898732() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
        unknownType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0898733() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0898734() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0908735() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0908736() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0908737() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0908738() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0908739() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0908740() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0908741() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0908742() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0908743() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0908744() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0908745() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0908746() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0908747() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0908748() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0908749() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0908750() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0908751() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0908752() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0908753() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0908754() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0908755() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0908756() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0908757() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0908758() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0908759() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0908760() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0908761() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0908762() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0908763() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0908764() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0908765() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
    }

    @Test(timeout = 4000)
    public void test0908766() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test0908767() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test0908768() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test0908769() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test0908770() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0908771() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0908772() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0908773() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0908774() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.toString();
    }

    @Test(timeout = 4000)
    public void test0908775() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0908776() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0908777() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0908778() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test0908779() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test0908780() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0908781() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test0908782() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test0908783() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test0908784() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test0908785() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test0908786() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test0908787() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test0908788() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test0908789() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0908790() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0908791() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test0908792() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0908793() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test0908794() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test0908795() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test0908796() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test0918797() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0918798() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve(numberType0, simpleErrorReporter0, (StaticScope<JSType>) null);
        JSType.getGreatestSubtype((JSType) numberType0, jSType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0928799() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isInstanceType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0928800() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test0938801() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0938802() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isInterface();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0948803() throws Throwable {
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
        indexedType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test0958804() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0968805() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.getTypesUnderShallowInequality((JSType) null);
    }

    @Test(timeout = 4000)
    public void test0978806() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test0978807() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.isNamedType();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0988808() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, unknownType0, unknownType0);
        nullType0.getLeastSupertype(parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test0998809() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test1008810() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.canBeCalled();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1008811() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1018812() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test1018813() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isBooleanValueType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1028814() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        boolean boolean0 = unknownType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test1028815() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        boolean boolean0 = unknownType0.isArrayType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1038816() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1038817() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
        boolean boolean0 = indexedType0.isConstructor();
        indexedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1048818() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.canTestForEqualityWith((JSType) null);
    }

    @Test(timeout = 4000)
    public void test1058819() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        unknownType0.unboxesTo();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1068820() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test1078821() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isObject();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1078822() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isObject();
    }

    @Test(timeout = 4000)
    public void test1088823() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberObjectType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1088824() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isNumberObjectType();
    }

    @Test(timeout = 4000)
    public void test1098825() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        boolean boolean0 = unknownType0.isStringObjectType();
    }

    @Test(timeout = 4000)
    public void test1098826() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        boolean boolean0 = unknownType0.isStringObjectType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1108827() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isDateType();
    }

    @Test(timeout = 4000)
    public void test1108828() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isDateType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1118829() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isString();
    }

    @Test(timeout = 4000)
    public void test1128830() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isRegexpType();
    }

    @Test(timeout = 4000)
    public void test1128831() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isRegexpType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1138832() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        String string0 = unknownType0.toDebugHashCodeString();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1138833() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        String string0 = unknownType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test1148834() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.findPropertyType("Unknown class name");
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1158835() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isBooleanObjectType();
    }

    @Test(timeout = 4000)
    public void test1158836() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = unknownType0.isBooleanObjectType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1168837() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        unknownType0.getTypesUnderShallowEquality((JSType) null);
        unknownType0.isResolved();
    }
}
