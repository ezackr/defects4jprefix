/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:29:41 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.junit.runner.RunWith;

public class ParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Properties properties0 = new Properties();
        basicParser0.processProperties(properties0);
        properties0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        List list0 = basicParser0.getRequiredOptions();
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "[ option: ";
        Properties properties0 = new Properties();
        basicParser0.parse(options0, stringArray0, properties0);
        List list0 = basicParser0.getRequiredOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = gnuParser0.getOptions();
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        stringArray0[6] = "";
        stringArray0[7] = "";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        posixParser0.parse(options0, stringArray0, properties0, false);
        Options options1 = posixParser0.getOptions();
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        basicParser0.setOptions((Options) null);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        properties0.put("@", gnuParser0);
        gnuParser0.processProperties(properties0);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Properties properties0 = new Properties();
        OptionGroup optionGroup0 = new OptionGroup();
        properties0.put(optionGroup0, posixParser0);
        posixParser0.processProperties(properties0);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "[ option: ";
        stringArray0[1] = "[ option: ";
        basicParser0.parse(options0, stringArray0, false);
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        basicParser0.processOption("gGP=V4ae/dBVy90?$", listIterator0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        ListIterator<Option> listIterator0 = (ListIterator<Option>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        basicParser0.processOption("^oD|XB", listIterator0);
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
        Options options1 = options0.addOption("", "", true, "");
        posixParser0.setOptions(options1);
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn(option0).when(listIterator0).next();
        posixParser0.processOption("", listIterator0);
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        posixParser0.processArgs((Option) null, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "yes";
        stringArray0[1] = "d'o{~mjS6QcVuxJzIO";
        stringArray0[2] = "s^/1y.@j7,";
        Properties properties0 = new Properties();
        properties0.put(options0, "yes");
        gnuParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0);
        GnuParser gnuParser0 = new GnuParser();
        OptionGroup optionGroup0 = new OptionGroup();
        properties0.put(commandLine0, optionGroup0);
        gnuParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "true";
        stringArray0[1] = "-org.apache.commons.cli.Parser";
        basicParser0.parse(options0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test1615() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        posixParser0.checkRequiredOptions();
    }

    @Test(timeout = 4000)
    public void test1716() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        GnuParser gnuParser0 = new GnuParser();
        gnuParser0.parse(options0, stringArray0, false);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn((Object) null).when(listIterator0).next();
        doReturn((Object) null).when(listIterator0).previous();
        gnuParser0.processArgs(option0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1817() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
        options0.addOption(option0);
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        GnuParser gnuParser0 = new GnuParser();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("").when(listIterator0).next();
        doReturn((Object) null).when(listIterator0).previous();
        gnuParser0.parse(options0, stringArray0, properties0, true);
        gnuParser0.processArgs(option0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Integer integer0 = new Integer(1);
        ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn(integer0).when(listIterator0).next();
        gnuParser0.processArgs((Option) null, listIterator0);
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "[ option: ";
        stringArray0[1] = "S";
        stringArray0[2] = "[ option: ";
        stringArray0[3] = "-[ option: ";
        Properties properties0 = new Properties();
        basicParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        Options options0 = new Options();
        String[] stringArray0 = new String[5];
        options0.addOption(" ", "[ option: ", true, "gGP=V4ae/dBVy90?$");
        stringArray0[0] = "-[ option: ";
        stringArray0[1] = "[ option: ";
        stringArray0[2] = "[ option: ";
        stringArray0[3] = "[ option: ";
        stringArray0[4] = "-[ option: ";
        PosixParser posixParser0 = new PosixParser();
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, (Properties) null, true);
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "-[ option: ";
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test2322() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
        String[] stringArray0 = new String[6];
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        gnuParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test2623() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Option option0 = new Option("", "gGP=V4ae/dBVy90?$", false, "--");
        option0.setOptionalArg(true);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        basicParser0.processArgs(option0, listIterator0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test2724() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[5];
        options0.addOption(" ", "[ option: ", true, "gGP=V4ae/dBVy90?$");
        stringArray0[0] = "-[ option: ";
        stringArray0[1] = "-[ option: ";
        basicParser0.parse(options0, stringArray0, true);
    }

    @Test(timeout = 4000)
    public void test2825() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[5];
        options0.addOption(" ", "[ option: ", true, "S");
        stringArray0[0] = "-[ option: ";
        stringArray0[1] = "[ option: ";
        basicParser0.parse(options0, stringArray0, true);
    }

    @Test(timeout = 4000)
    public void test2926() throws Throwable {
        Options options0 = new Options();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        options0.addOptionGroup(optionGroup0);
        gnuParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test3027() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        Object object0 = new Object();
        properties0.put("", object0);
        posixParser0.parse(options0, (String[]) null, properties0, true);
    }

    @Test(timeout = 4000)
    public void test3128() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "--";
        stringArray0[1] = "--";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test3229() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "org.apache.commons.cli.CommandLine";
        stringArray0[1] = "-";
        stringArray0[2] = "r4cb8j*O";
        stringArray0[3] = "1";
        stringArray0[4] = "-";
        stringArray0[5] = "dBS$[o5~6]";
        stringArray0[6] = "k(|?spuz#>o";
        stringArray0[7] = "S)ne)L/";
        stringArray0[8] = "(.vl?P]})Ye)okq3&";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test3330() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
        String[] stringArray0 = new String[6];
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        gnuParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test3431() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
        options0.addOption(option0);
        String[] stringArray0 = new String[6];
        posixParser0.parse(options0, stringArray0);
    }
}
