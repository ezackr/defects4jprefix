/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:47:37 GMT 2023
 */
package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.apache.commons.cli2.validation.Validator;
import org.junit.runner.RunWith;

public class GroupImplTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false, false, false).when(listIterator0).hasNext();
        doReturn("Unexpected.token", (Object) null, (Object) null, (Object) null, (Object) null).when(listIterator0).next();
        doReturn("Unexpected.token", (Object) null, (Object) null).when(listIterator0).previous();
        DateValidator dateValidator0 = new DateValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Unexpected.token", "w1n:9", 312, 312, 'g', 'j', dateValidator0, "w1n:9", linkedList0, 312);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 312, 312, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false, false, false).when(listIterator0).hasNext();
        doReturn("Unexpected.token", (Object) null, (Object) null, (Object) null, (Object) null).when(listIterator0).next();
        doReturn("Unexpected.token", (Object) null, (Object) null).when(listIterator0).previous();
        DateValidator dateValidator0 = new DateValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Unexpected.token", "w1n:9", 312, 312, 'g', 'j', dateValidator0, "w1n:9", linkedList0, 312);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 312, 312, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getDescription();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 91, 91, true);
        int int0 = groupImpl0.getMaximum();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 91, 91, true);
        int int0 = groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-931), (-931), true);
        groupImpl0.findOption("-D");
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-931), (-931), true);
        groupImpl0.findOption("-D");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 809, 809, true);
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 809, 809, true);
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 809, 809, true);
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D (-D<property>=<value>)");
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 809, 809, true);
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D (-D<property>=<value>)");
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 809, 809, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 809, 809, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "2dK7j!21Y9#@- `g S", 32, 32, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getDescription();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "2dK7j!21Y9#@- `g S", 32, 32, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "2dK7j!21Y9#@- `g S", 32, 32, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "2dK7j!21Y9#@- `g S", 32, 32, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test0823() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "2dK7j!21Y9#@- `g S", 32, 32, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
    }

    @Test(timeout = 4000)
    public void test0924() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, 'd', 'd', numberValidator0, "Unexpected.token", linkedList0, 97);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "9F?66Q|Y\"#*");
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test0925() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, 'd', 'd', numberValidator0, "Unexpected.token", linkedList0, 97);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "9F?66Q|Y\"#*");
    }

    @Test(timeout = 4000)
    public void test1026() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Argument.too.many.values", "Argument.too.many.values").when(listIterator0).next();
        doReturn("Argument.too.many.values").when(listIterator0).previous();
        PropertyOption propertyOption0 = new PropertyOption("Argument.too.many.values", "Argument.too.many.values", 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "--", "~[B)]6@\"J||?Wg#5S5", 712, 842, true);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Argument.too.many.values").when(listIterator0).next();
        doReturn("Argument.too.many.values").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        PropertyOption propertyOption0 = new PropertyOption("Argument.too.many.values", "Argument.too.many.values", 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1128() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Argument.too.many.values").when(listIterator0).next();
        doReturn("Argument.too.many.values").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        PropertyOption propertyOption0 = new PropertyOption("Argument.too.many.values", "Argument.too.many.values", 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Unexpected.token").when(listIterator0).next();
        doReturn("Unexpected.token").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 312, 312, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Unexpected.token").when(listIterator0).next();
        doReturn("Unexpected.token").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 312, 312, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.isRequired();
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1534() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1635() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "kYk", "9<iME\nW^T", (-2596), 1882, false);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1736() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        UrlValidator urlValidator0 = new UrlValidator("");
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", (-1), (-1), 'g', 'g', urlValidator0, " ", linkedList0, 0);
        linkedList0.offerLast(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " ", " ", 0, (-1), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1837() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2863), (-4282), true);
        linkedList1.add(groupImpl0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "", (-4282), 1458, true);
        String string0 = groupImpl1.toString();
        linkedList1.size();
    }

    @Test(timeout = 4000)
    public void test1838() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2863), (-4282), true);
        linkedList1.add(groupImpl0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "", (-4282), 1458, true);
        String string0 = groupImpl1.toString();
    }

    @Test(timeout = 4000)
    public void test1939() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, (-653), (-653), true);
        String string0 = groupImpl0.toString();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1940() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, (-653), (-653), true);
        String string0 = groupImpl0.toString();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, (-653), (-653), true);
        String string0 = groupImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 992, 992, false);
        groupImpl0.validate((WriteableCommandLine) null);
    }

    @Test(timeout = 4000)
    public void test2143() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "|", "|", 96, 96, false);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        StringBuffer stringBuffer0 = new StringBuffer("|");
        groupImpl0.appendUsage(stringBuffer0, displaySetting0.ALL, comparator0, "|");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test2144() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "|", "|", 96, 96, false);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        StringBuffer stringBuffer0 = new StringBuffer("|");
        groupImpl0.appendUsage(stringBuffer0, displaySetting0.ALL, comparator0, "|");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test2245() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 1638, 1638, true);
        String string0 = groupImpl0.toString();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test2246() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 1638, 1638, true);
        String string0 = groupImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2347() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        DateValidator dateValidator0 = DateValidator.getTimeInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", (String) null, 842, 842, 'g', 'G', dateValidator0, (String) null, linkedList0, (-2550));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '\u0000', (String) null, linkedList0);
        linkedList0.offerFirst(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        groupImpl0.toString();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test2448() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2449() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2450() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2651() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        DateValidator dateValidator0 = DateValidator.getTimeInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", (String) null, 842, 842, 'g', 'G', dateValidator0, (String) null, linkedList0, (-2550));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '\u0000', (String) null, linkedList0);
        linkedList0.offerFirst(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(223, displaySetting0.ALL, (Comparator) null);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test2652() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        DateValidator dateValidator0 = DateValidator.getTimeInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", (String) null, 842, 842, 'g', 'G', dateValidator0, (String) null, linkedList0, (-2550));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '\u0000', (String) null, linkedList0);
        linkedList0.offerFirst(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(223, displaySetting0.ALL, (Comparator) null);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2753() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, false);
        ArgumentImpl argumentImpl0 = new ArgumentImpl("N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, 'Y', 'Y', (Validator) null, "N4hr$9|djnLV!", linkedList0, 50);
        linkedList0.add(argumentImpl0);
        groupImpl0.findOption("N4hr$9|djnLV!");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2754() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, false);
        ArgumentImpl argumentImpl0 = new ArgumentImpl("N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, 'Y', 'Y', (Validator) null, "N4hr$9|djnLV!", linkedList0, 50);
        linkedList0.add(argumentImpl0);
        groupImpl0.findOption("N4hr$9|djnLV!");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2855() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        Boolean boolean0 = Boolean.valueOf("Passes properties and values to the application");
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 809, 809, (boolean) boolean0);
        groupImpl0.setParent(propertyOption0);
        groupImpl0.toString();
        groupImpl0.isRequired();
    }

    @Test(timeout = 4000)
    public void test2956() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        Boolean boolean0 = new Boolean("Passes properties and values to the application");
        linkedList0.addFirst(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-1592), (-1592), (boolean) boolean0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test2957() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        Boolean boolean0 = new Boolean("Passes properties and values to the application");
        linkedList0.addFirst(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-1592), (-1592), (boolean) boolean0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test3058() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "DISPLAY_GROUP_OUTER", (-3969), (-431), 'N', 'N', (Validator) null, "Argument.too.few.defaults", linkedList0, 46);
        LinkedList<ArgumentImpl> linkedList1 = new LinkedList<ArgumentImpl>();
        linkedList1.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "Argument.too.few.defaults", "i#<x0zt", (-431), 255, true);
        groupImpl0.defaults((WriteableCommandLine) null);
    }
}
