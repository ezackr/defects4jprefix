/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:39:33 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.junit.runner.RunWith;

public class ParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Option option0 = new Option("1", true, "1");
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn((Object) null).when(listIterator0).next();
        basicParser0.processArgs(option0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Option option0 = new Option("9xhx", true, "");
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) option0);
        ListIterator<Object> listIterator0 = linkedList0.listIterator();
        gnuParser0.processArgs(option0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-NO_ARGS_ALLOWED";
        basicParser0.parse(options0, stringArray0, false);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[0];
        Properties properties0 = new Properties();
        Object object0 = new Object();
        properties0.put(object0, object0);
        posixParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        Properties properties0 = new Properties();
        properties0.put(gnuParser0, gnuParser0);
        gnuParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "Unrecognized option: ";
        stringArray0[1] = "Unrecognized option: ";
        stringArray0[2] = "-org.apache.commons.cli.AlreadySelectedException";
        basicParser0.parse(options0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        gnuParser0.parse(options0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[3] = "-";
        stringArray0[4] = "";
        stringArray0[5] = "";
        Properties properties0 = new Properties();
        basicParser0.parse(options0, stringArray0, properties0);
        Option option0 = new Option("", true, "");
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false).when(listIterator0).hasNext();
        doReturn("[").when(listIterator0).next();
        basicParser0.processArgs(option0, listIterator0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-NO_ARGS_ALLOWED";
        Properties properties0 = new Properties();
        basicParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "-";
        stringArray0[1] = "+&'5t0I7^`#G'%sP&D";
        stringArray0[2] = "yes";
        stringArray0[3] = "org.apache.commons.cli.Parser";
        stringArray0[4] = "k_RM6Sk6}q";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, false);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Options options0 = new Options();
        PosixParser posixParser0 = new PosixParser();
        Properties properties0 = new Properties();
        CommandLine commandLine0 = posixParser0.parse(options0, (String[]) null, properties0, false);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Option option0 = new Option("", "", false, "0>X(yiF]");
        option0.setOptionalArg(true);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        posixParser0.processArgs(option0, listIterator0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        options0.addOption("", true, "");
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "org.apache.commons.cli.AlreadySelecteExce&tion";
        stringArray0[2] = "";
        stringArray0[3] = "-";
        stringArray0[4] = "zw.m/F";
        stringArray0[5] = "zw.m/F";
        Option option0 = new Option("", "");
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("-").when(listIterator0).next();
        doReturn("t?I;wjc").when(listIterator0).previous();
        basicParser0.parse(options0, stringArray0);
        basicParser0.processArgs(option0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "org.apache.commons.cli.AlreadySelebtedExcep{ion";
        stringArray0[2] = "";
        stringArray0[3] = "org.apache.commons.cli.AlreadySelebtedExcep{ion";
        stringArray0[4] = "zw.m/F";
        stringArray0[5] = "";
        Properties properties0 = new Properties();
        basicParser0.parse(options1, stringArray0, properties0);
        Option option0 = new Option("", false, "");
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("").when(listIterator0).next();
        doReturn("").when(listIterator0).previous();
        basicParser0.processArgs(option0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        Option option0 = new Option("NO_ARGS_ALLOWED", true, "gucL<BIkE ");
        options0.addOption(option0);
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "gucL<BIkE ";
        stringArray0[1] = "-NO_ARGS_ALLOWED";
        stringArray0[2] = "%";
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        options0.addOptionGroup(optionGroup0);
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "org.apache.commons.cli.AlreadySelectedException";
        stringArray0[2] = "";
        stringArray0[3] = "-";
        stringArray0[4] = "zw.m/F";
        stringArray0[5] = "[]";
        Properties properties0 = new Properties();
        basicParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        Option option0 = new Option("", "", true, "");
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        Properties properties0 = new Properties();
        properties0.put("", option0);
        basicParser0.parse(options0, stringArray0, properties0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, true);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        Option option0 = new Option("NO_ARGS_ALLOWED", true, "gucL<BIkE ");
        options0.addOption(option0);
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-NO_ARGS_ALLOWED";
        Properties properties0 = new Properties();
        basicParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-NO_ARGS_ALLOWED";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "-";
        stringArray0[1] = " ";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Options options0 = new Options();
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, true);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        basicParser0.parse(options0, stringArray0, true);
    }
}
