/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:56:46 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class HelpFormatterTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptSeparator();
        helpFormatter0.getOptPrefix();
        byte[] byteArray0 = new byte[0];
        helpFormatter0.getWidth();
        char[] charArray0 = new char[5];
        charArray0[0] = 'o';
        charArray0[1] = 'O';
        charArray0[2] = 'D';
        charArray0[3] = '$';
        charArray0[4] = 'p';
        helpFormatter0.printHelp((PrintWriter) null, 74, "-", "A CloneNotSupportedException was thrown: ", (Options) null, (int) '$', (-2), "A CloneNotSupportedException was thrown: ");
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.printOptions((PrintWriter) null, 9, (Options) null, 54, 2042);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 731;
        String string0 = "Z=[}&6?W3q}|";
        Options options0 = new Options();
        boolean boolean0 = true;
        helpFormatter0.getLongOptSeparator();
        options0.addOption("arg", true, "usage: ");
        helpFormatter0.printHelp((-5273), ";e:>N!=pZ1f< 1nug", "Z=[}&6?W3q}|", options0, ";e:>N!=pZ1f< 1nug", false);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
        helpFormatter0.getWidth();
        Options options0 = new Options();
        String string0 = "";
        options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", true);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        MockFile mockFile0 = null;
        mockFile0 = new MockFile(uRI1);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$OptionComparator");
        helpFormatter0.renderOptions(stringBuffer0, 861, (Options) null, 2180, 760);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "w+9Lr#}&r&(e";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string1 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        int int0 = (-742);
        String string2 = null;
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " | ", false, "4VR7TPcK=;`0%6t");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 47, "w+9Lr#}&r&(e", "", options1, (-1), (-742), "", false);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "D*");
        helpFormatter0.printHelp("D*", options1);
        int int0 = 0;
        helpFormatter0.findWrapPos("D*", 0, 0);
        MockURI.URI("", "D*", "-");
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        stringBuffer1.insert((-328), true);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        options0.getMatchingOptions("[ option: ");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, false);
        helpFormatter0.printWrapped((PrintWriter) null, (-2), 408, "[ option: ");
    }

    @Test(timeout = 4000)
    public void test169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        objectArray0[2] = (Object) "\":`9;";
        objectArray0[3] = (Object) "Cannot add value, list full.";
        mockPrintWriter0.print((Object) "Cannot add value, list full.");
        PrintWriter printWriter0 = mockPrintWriter0.format("Cannot add value, list full.", objectArray0);
        helpFormatter0.printUsage(printWriter0, (-1788), "[ Options: [ short ");
    }

    @Test(timeout = 4000)
    public void test1710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        objectArray0[1] = object1;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) mockPrintWriter0;
        objectArray0[4] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printHelp(printWriter0, (-740), "K-|PUWPd2<)?~", "[ARG...]", (Options) null, (-4322), (-1104), ", ", false);
    }

    @Test(timeout = 4000)
    public void test1811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("--");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        helpFormatter0.getWidth();
        helpFormatter0.getLongOptSeparator();
        helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        helpFormatter0.printHelp("x'W67qe @qB{Zsu", "", (Options) null, "b7kS}sflFb)p>vjSM", true);
    }

    @Test(timeout = 4000)
    public void test2012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.printHelp("*x)9%vnL=", (Options) null);
    }

    @Test(timeout = 4000)
    public void test2113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        options0.helpOptions();
        String string0 = "org.apache.commons.cli.HelpFormatter";
        helpFormatter0.printHelp((-3055), "", "", options0, "org.apache.commons.cli.HelpFormatter");
    }

    @Test(timeout = 4000)
    public void test2314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        options0.getOption("");
        Option option0 = new Option("", "", false, "");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("", "", options1, "FMI(?zcf");
    }

    @Test(timeout = 4000)
    public void test2615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        helpFormatter0.rtrim("");
        Options options0 = null;
        helpFormatter0.printHelp("", (Options) null, true);
    }

    @Test(timeout = 4000)
    public void test2916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        Options options0 = null;
        boolean boolean0 = false;
        helpFormatter0.printHelp("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, "", false);
    }

    @Test(timeout = 4000)
    public void test3017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = ", ";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<V");
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
        helpFormatter0.printUsage(printWriter0, (-2), "<-2z'j@xi_AAjO/6{De", options0);
    }

    @Test(timeout = 4000)
    public void test3218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        helpFormatter0.getLeftPadding();
        String string2 = "8h>p(.EE|pW";
        helpFormatter0.findWrapPos("8h>p(.EE|pW", 1, (-1087));
    }

    @Test(timeout = 4000)
    public void test3319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getNewLine();
        helpFormatter0.printHelp(0, "\n", "", (Options) null, (String) null, true);
    }

    @Test(timeout = 4000)
    public void test3420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        options0.addOption(option0);
        helpFormatter0.printHelp("", options0, false);
    }

    @Test(timeout = 4000)
    public void test3521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        objectArray0[2] = object1;
        PrintWriter printWriter0 = mockPrintWriter0.format(",\u0000Twq9", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printHelp(printWriter0, (-3982), "[ARG...]", "[ARG...]", options0, (-1), 1856, "Se.[_)1;/X@GA&__", true);
    }

    @Test(timeout = 4000)
    public void test3622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp((-412), "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided");
    }

    @Test(timeout = 4000)
    public void test3723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        int int0 = (-1834);
        String string0 = null;
        helpFormatter0.printHelp((-1834), "&?\nKwz}_", (String) null, options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
    }

    @Test(timeout = 4000)
    public void test3924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}4P");
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
        int int0 = (-1087);
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1087), "}4P", (Options) null);
    }

    @Test(timeout = 4000)
    public void test4025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "9F");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-742), (String) null, "", options1, (-742), 1, "w+9Lr#}&r&(e", false);
    }

    @Test(timeout = 4000)
    public void test4126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
        int int0 = (-8);
        Options options0 = new Options();
        helpFormatter1.renderOptions(stringBuffer0, (-8), options0, (-35), 864);
    }

    @Test(timeout = 4000)
    public void test4427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Ubi*BVLuS\"c%";
        MockFile mockFile0 = new MockFile("Ubi*BVLuS\"c%");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        String string1 = "5=7fPIIQs.f`";
        mockPrintWriter0.close();
        mockFile0.setLastModified(1130L);
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) "5=7fPIIQs.f`";
        objectArray0[1] = (Object) helpFormatter0;
        objectArray0[2] = (Object) "5=7fPIIQs.f`";
        objectArray0[3] = (Object) mockFile0;
        PrintWriter printWriter0 = mockPrintWriter0.format("5=7fPIIQs.f`", objectArray0);
        int int0 = (-539);
        String string2 = " ";
        helpFormatter0.printWrapped(printWriter0, (-539), " ");
    }

    @Test(timeout = 4000)
    public void test4628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        helpFormatter0.printWrapped((PrintWriter) null, 4427, "_CV-qOcIV1>'8E9");
    }

    @Test(timeout = 4000)
    public void test4729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (-3300), "1f :5WD-yg@*Yk8");
    }

    @Test(timeout = 4000)
    public void test4830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = 0;
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
    }

    @Test(timeout = 4000)
    public void test4931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-76);
        helpFormatter0.createPadding((-76));
    }

    @Test(timeout = 4000)
    public void test5132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        PrintWriter printWriter0 = mockPrintWriter0.append('E');
        Options options0 = new Options();
        int int0 = (-502);
        helpFormatter0.printOptions(printWriter0, 0, options0, 0, (-502));
    }

    @Test(timeout = 4000)
    public void test5333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.Options";
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
        helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string0 = "ac:cA74j";
        Options options0 = null;
        mockFile0.mkdir();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "ac:cA74j", "ac:cA74j", (Options) null, 2360, (-2), "");
    }

    @Test(timeout = 4000)
    public void test5534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "Cannot add value, list full.";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-511), "", "", options0, 0, (-511), (String) null);
    }

    @Test(timeout = 4000)
    public void test5735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
        helpFormatter0.getWidth();
        Options options0 = new Options();
        String string0 = "";
        options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        MockFile mockFile0 = null;
        mockFile0 = new MockFile(uRI1);
    }

    @Test(timeout = 4000)
    public void test5936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "[ Options: [ short ";
        helpFormatter0.setOptPrefix("");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        String string0 = "/y<.b,";
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "/y<.b,", options0, 1, (-150), "p`Dsm&J5{CpnN|`", false);
    }

    @Test(timeout = 4000)
    public void test6037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
        helpFormatter0.getWidth();
        Options options0 = new Options();
        String string0 = "";
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        MockFile mockFile0 = null;
        mockFile0 = new MockFile(uRI1);
    }

    @Test(timeout = 4000)
    public void test6138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.printHelp(3, "[ARG...]", (String) null, (Options) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test6339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        helpFormatter0.printHelp("]-&vg[49`Hc", ")*C'", (Options) null, ")*C'");
    }

    @Test(timeout = 4000)
    public void test6640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.chars();
        int int0 = (-391);
        String string1 = "NO_ARGS_ALLOWED";
        helpFormatter0.renderWrappedText(stringBuffer0, (-391), (-224), "NO_ARGS_ALLOWED");
    }

    @Test(timeout = 4000)
    public void test6741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        helpFormatter0.printHelp((-1818), (String) null, "--", options2, "--", false);
    }

    @Test(timeout = 4000)
    public void test6942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        helpFormatter0.getLongOptSeparator();
        helpFormatter0.getWidth();
        helpFormatter0.findWrapPos((String) null, 74, 74);
    }

    @Test(timeout = 4000)
    public void test7043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("", options1);
    }

    @Test(timeout = 4000)
    public void test7344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getArgName();
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('U');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) mockPrintWriter0;
        objectArray0[1] = (Object) null;
        objectArray0[2] = (Object) null;
        Object object0 = new Object();
        objectArray0[3] = object0;
        objectArray0[4] = (Object) "";
        objectArray0[5] = (Object) comparator0;
        objectArray0[6] = (Object) comparator0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.setRequired(true);
        helpFormatter0.printHelp(printWriter0, (-3659), "arg", "`#G'%sP&D4qWO N a", options1, (-274), 10, ">/0Z$y&Aic");
    }

    @Test(timeout = 4000)
    public void test7445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = true;
        options0.addOption("\n", "arg", true, ", ");
    }

    @Test(timeout = 4000)
    public void test7646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1836);
        String string0 = ":\\/C}";
        Options options0 = new Options();
        boolean boolean0 = false;
        String string1 = "";
        options0.addOption("usage: ", false, "");
    }

    @Test(timeout = 4000)
    public void test7747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 731;
        String string0 = "Z=[}&6?W3q}|";
        Options options0 = new Options();
        boolean boolean0 = true;
        options0.addOption("-", "usage: ", true, "arg");
    }

    @Test(timeout = 4000)
    public void test7848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        StringBuffer stringBuffer0 = new StringBuffer("");
        helpFormatter0.renderOptions(stringBuffer0, 1708, options4, (-1), (-2));
    }

    @Test(timeout = 4000)
    public void test7949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        String string0 = "'";
        helpFormatter0.setOptPrefix("'");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
        int int0 = (-1226);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1226), "");
    }

    @Test(timeout = 4000)
    public void test8050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("R");
        helpFormatter0.defaultSyntaxPrefix = "R";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
        Options options0 = null;
        helpFormatter0.printHelp("--", (Options) null, true);
    }
}
