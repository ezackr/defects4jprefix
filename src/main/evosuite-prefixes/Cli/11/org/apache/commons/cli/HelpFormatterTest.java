/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:54:55 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.stream.IntStream;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class HelpFormatterTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ", "");
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ", "");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ", "");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ", "");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ", "");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test0120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test0122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test0126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test0128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test0135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test0136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
    }

    @Test(timeout = 4000)
    public void test0137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test0139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test0140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test0141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test0142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
    }

    @Test(timeout = 4000)
    public void test0143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
    }

    @Test(timeout = 4000)
    public void test0144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
    }

    @Test(timeout = 4000)
    public void test0145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
    }

    @Test(timeout = 4000)
    public void test0146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
    }

    @Test(timeout = 4000)
    public void test0147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
    }

    @Test(timeout = 4000)
    public void test0148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test0151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test0152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test0153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test0155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test0157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test0164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test0166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test0167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test0168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test0169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test0171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test0173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test0174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test0175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test0176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test0177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test0178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test0181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test0182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test0183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test0184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test0186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test0187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test0193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test0194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
    }

    @Test(timeout = 4000)
    public void test0196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test01100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test01101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test01102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test01107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test01108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test01109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test01110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test01114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test01115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test01116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test01117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test01118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test01119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test01120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test01121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test01122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test01123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test01124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test01125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test01126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test01127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test01128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        mockPrintWriter1.equals((Object) mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test01129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        mockPrintWriter1.equals((Object) printWriter0);
    }

    @Test(timeout = 4000)
    public void test01130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
    }

    @Test(timeout = 4000)
    public void test01131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
    }

    @Test(timeout = 4000)
    public void test01132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockPrintWriter1.equals((Object) mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test01133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockPrintWriter1.equals((Object) printWriter0);
    }

    @Test(timeout = 4000)
    public void test01134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        printWriter1.equals((Object) mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test01135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        printWriter1.equals((Object) printWriter0);
    }

    @Test(timeout = 4000)
    public void test01136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockPrintWriter0.equals((Object) mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test01137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        printWriter0.equals((Object) mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test01138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test01152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test01153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test01154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test01155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test01156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test01157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test01158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test01159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test01160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test01161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test01162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test01163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test01164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test01165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test01166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test01167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test01168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test01169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test01170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test01171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test01172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test01173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("", true, "");
        String string0 = options1.toString();
        Option option0 = options1.getOption("S%ki4g/]-a1Rq+A-sS");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        int int0 = helpFormatter0.getLeftPadding();
        MockFile mockFile0 = new MockFile("Z.u0-?t4:L-", "Z.u0-?t4:L-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Locale locale0 = Locale.ITALY;
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) ">";
        objectArray0[1] = (Object) "S%ki4g/]-a1Rq+A-sS";
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test02174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test02175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test02176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test02177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test02178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test02179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test02180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test02181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test02182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test02183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test02184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test02185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test02186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test02187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test02188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test02189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
    }

    @Test(timeout = 4000)
    public void test02190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test02191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test02192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
    }

    @Test(timeout = 4000)
    public void test02193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
    }

    @Test(timeout = 4000)
    public void test02194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
    }

    @Test(timeout = 4000)
    public void test02195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test02196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test02197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
    }

    @Test(timeout = 4000)
    public void test02198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
    }

    @Test(timeout = 4000)
    public void test02199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
    }

    @Test(timeout = 4000)
    public void test02200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test02201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test02202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test02203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test02204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test02205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test02206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test02207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test02208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test02211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test02212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test02213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test02214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test02215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test02216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test02217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test02218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test02219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.defaultSyntaxPrefix = ".E^|YbFb@Ba";
        helpFormatter0.printUsage(printWriter0, 3834, ".E^|YbFb@Ba");
        int int1 = 1;
        helpFormatter0.printHelp(1, "w./oaE", "w./oaE", options0, ">[\"$Ys#n*~oCCzboZv", false);
    }

    @Test(timeout = 4000)
    public void test03226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test03227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test03229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test03230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test03233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test03238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test03239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test03240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test03241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test03242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test03243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test03244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test03246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test03247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test03248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test03249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test03251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test03253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test03254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test03256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test03257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test03259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test03260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test03261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test03262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test03263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test03264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test03265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test03266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test03267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test03269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test03270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test03272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test03274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test03275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test03276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test03277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test03278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test03279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
    }

    @Test(timeout = 4000)
    public void test03280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test03281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
    }

    @Test(timeout = 4000)
    public void test03283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test03284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test03286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test03287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test03288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test03289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test03290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test03291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test03292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test03293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test03294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test03295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test03296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test03297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test03298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
    }

    @Test(timeout = 4000)
    public void test03299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
    }

    @Test(timeout = 4000)
    public void test03300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        collection1.equals((Object) collection0);
    }

    @Test(timeout = 4000)
    public void test03301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test03302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test03303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test03304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test03305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test03307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test03309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test03310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test03311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test03312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test03313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test03314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test03315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test03316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test03317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test03318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test03319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test03320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test03321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
    }

    @Test(timeout = 4000)
    public void test03322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
    }

    @Test(timeout = 4000)
    public void test03323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test03325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test03326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test03327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test03328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test03329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test03330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test03331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test03332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test03337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test03338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test03339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test03340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
    }

    @Test(timeout = 4000)
    public void test03341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
    }

    @Test(timeout = 4000)
    public void test03342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
    }

    @Test(timeout = 4000)
    public void test03343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
    }

    @Test(timeout = 4000)
    public void test03344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
    }

    @Test(timeout = 4000)
    public void test03345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
    }

    @Test(timeout = 4000)
    public void test03346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
    }

    @Test(timeout = 4000)
    public void test03347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
    }

    @Test(timeout = 4000)
    public void test03348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
    }

    @Test(timeout = 4000)
    public void test03349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test03352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test03353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test03355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test03356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test03357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test03358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test03365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        Options options2 = options0.addOption("", true, "n/j5?~");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = (-1);
        mockPrintWriter0.println();
        String string0 = helpFormatter0.getSyntaxPrefix();
        int int1 = 2735;
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test04366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test04367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test04368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test04369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test04370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test04371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test04372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test04373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test04374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test04375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test04376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test04377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test04378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test04379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test04380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test04381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.findWrapPos("", (-618), (-618));
    }

    @Test(timeout = 4000)
    public void test05382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test05383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test05384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test05385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test05386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test05387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test05388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test05389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test05390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test05391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test05392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test05393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test05394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test05395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test05396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test05397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
    }

    @Test(timeout = 4000)
    public void test05398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test05399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test05400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test05401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test05402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test05403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test05404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test05405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test05406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test05407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test05408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test05409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test05410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test05411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test05412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test05413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test05414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
    }

    @Test(timeout = 4000)
    public void test05415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) stringBuffer0;
        mockFileOutputStream0.close();
        objectArray0[2] = (Object) mockFileOutputStream0;
        objectArray0[3] = (Object) stringBuffer0;
        objectArray0[4] = (Object) stringBuffer0;
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 2083, 0);
    }

    @Test(timeout = 4000)
    public void test06416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test06417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test06418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test06419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test06421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test06423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test06425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test06426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test06427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test06428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test06429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test06430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test06431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test06433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test06434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test06436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test06438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test06440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test06447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test06449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test06451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test06453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test06454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test06455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test06456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test06457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test06458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test06459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test06460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test06461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test06462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test06463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test06466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test06467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test06468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test06470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test06472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test06473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test06474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test06475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
    }

    @Test(timeout = 4000)
    public void test06481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = 7;
        helpFormatter0.defaultLeftPad = 7;
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp(434, "o<b;fS'e4YBg", "o<b;fS'e4YBg", options1, "");
        String string0 = " ";
        MockFile.createTempFile("", " ");
    }

    @Test(timeout = 4000)
    public void test07482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test07483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test07484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test07485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test07486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test07487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test07488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test07489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test07490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test07491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test07492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test07493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test07494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test07495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test07496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test07497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
    }

    @Test(timeout = 4000)
    public void test07498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "vj{-1G~G*>a^4", "oZ kaeo]{?DNG6gK?U", (Options) null, 32, 171, "JL1wAik/`");
    }

    @Test(timeout = 4000)
    public void test08499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test08500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test08501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test08502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test08503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test08504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test08505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test08506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test08507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test08508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test08509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test08510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test08511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test08512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test08513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test08514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test08515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test08516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test08517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test08518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test08519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test08520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test08521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test08522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
    }

    @Test(timeout = 4000)
    public void test08523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
    }

    @Test(timeout = 4000)
    public void test08524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
    }

    @Test(timeout = 4000)
    public void test08525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
    }

    @Test(timeout = 4000)
    public void test08526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
    }

    @Test(timeout = 4000)
    public void test08527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
    }

    @Test(timeout = 4000)
    public void test08528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
    }

    @Test(timeout = 4000)
    public void test08529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test08530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
    }

    @Test(timeout = 4000)
    public void test08531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
    }

    @Test(timeout = 4000)
    public void test08532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        mockPrintWriter1.equals((Object) mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test08533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test08534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test08535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(7530);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3698, "", (String) null, options0, 10, 10, (String) null);
    }

    @Test(timeout = 4000)
    public void test09536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test09537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test09538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test09539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test09540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test09541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test09542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test09543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test09544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test09545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test09546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test09547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test09548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test09549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test09550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test09551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test09552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test09553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test09554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test09555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test09556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test09557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test09558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test09559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test09560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test09561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test09562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test09563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test09564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test09565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test09566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
    }

    @Test(timeout = 4000)
    public void test09567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
    }

    @Test(timeout = 4000)
    public void test09568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
    }

    @Test(timeout = 4000)
    public void test09569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
    }

    @Test(timeout = 4000)
    public void test09570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test09571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test09572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test09573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test09574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test09575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test09576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test09577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test09578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test09579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test09580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test09581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test09582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test09583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test09584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
    }

    @Test(timeout = 4000)
    public void test09585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
    }

    @Test(timeout = 4000)
    public void test09586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test09594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test09596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test09597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test09598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test09599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test09600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test09601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test09602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test09603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test09604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test09605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test09606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test09607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test09609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        String string0 = "XNsVA&wzjU3egexf6?'";
        Options options0 = new Options();
        boolean boolean0 = false;
        Options options1 = options0.addOption("", false, "G");
        Option option0 = new Option((String) null, false, "-");
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp("XNsVA&wzjU3egexf6?'", options1);
    }

    @Test(timeout = 4000)
    public void test10610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test10611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test10612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test10613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test10615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test10616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test10617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test10618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test10620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test10621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test10622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test10623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test10624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test10625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test10626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test10627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test10629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test10630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test10631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test10632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test10634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test10635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test10636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test10638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test10639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test10640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test10644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test10645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test10646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test10648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test10649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test10650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test10651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
    }

    @Test(timeout = 4000)
    public void test10657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.defaultWidth = 31;
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos("", 31, 0);
        Options options0 = null;
        helpFormatter0.printHelp("", "Q7_eh7$MfB&N*a", (Options) null, "", true);
    }

    @Test(timeout = 4000)
    public void test11658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test11659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test11660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test11663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test11665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test11666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test11667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test11668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test11669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test11670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test11671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test11672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test11673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test11676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test11679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test11681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test11682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test11683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test11690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test11691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test11694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test11696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test11697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
    }

    @Test(timeout = 4000)
    public void test11698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
    }

    @Test(timeout = 4000)
    public void test11699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
    }

    @Test(timeout = 4000)
    public void test11700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
    }

    @Test(timeout = 4000)
    public void test11701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
    }

    @Test(timeout = 4000)
    public void test11702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
    }

    @Test(timeout = 4000)
    public void test11703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test11704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test11706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test11707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test11708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test11709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test11710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test11711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.setWidth(3);
        String string1 = "]/5RA34e";
        helpFormatter0.defaultLongOptPrefix = "]/5RA34e";
        String string2 = "";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test12712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test12713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test12714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test12716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test12718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test12721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test12722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test12723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test12724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test12725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test12726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test12727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test12728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test12730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test12733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test12735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test12736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test12740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test12742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test12743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
    }

    @Test(timeout = 4000)
    public void test12744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
    }

    @Test(timeout = 4000)
    public void test12745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
    }

    @Test(timeout = 4000)
    public void test12746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
    }

    @Test(timeout = 4000)
    public void test12747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
    }

    @Test(timeout = 4000)
    public void test12748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
    }

    @Test(timeout = 4000)
    public void test12749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test12752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test12756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test12758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test12759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test12766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test12769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test12771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test12773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
    }

    @Test(timeout = 4000)
    public void test12774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
    }

    @Test(timeout = 4000)
    public void test12775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
    }

    @Test(timeout = 4000)
    public void test12776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
    }

    @Test(timeout = 4000)
    public void test12777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
    }

    @Test(timeout = 4000)
    public void test12778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
    }

    @Test(timeout = 4000)
    public void test12779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test12780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test12781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test12782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test12784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test12785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test12786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test12788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test12789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test12790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
    }

    @Test(timeout = 4000)
    public void test12792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
    }

    @Test(timeout = 4000)
    public void test12793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
    }

    @Test(timeout = 4000)
    public void test12794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
    }

    @Test(timeout = 4000)
    public void test12795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
    }

    @Test(timeout = 4000)
    public void test12796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test12797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test12798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
    }

    @Test(timeout = 4000)
    public void test12799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test12800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test12801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test12803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test12804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test12805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test12807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test12808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test12811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test12812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test12813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
    }

    @Test(timeout = 4000)
    public void test12814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
    }

    @Test(timeout = 4000)
    public void test12815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test12816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test12817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test12818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test12819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test12821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test12822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test12824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test12825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test12826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test12828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test12829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test12832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test12833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test12834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup1.getSelected();
    }

    @Test(timeout = 4000)
    public void test12835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup1.isRequired();
    }

    @Test(timeout = 4000)
    public void test12836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test12837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test12838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test12846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test12848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test12849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test12851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test12852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test12853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test12855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test12856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test12859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test12860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test12861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        optionGroup1.getSelected();
    }

    @Test(timeout = 4000)
    public void test12862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        optionGroup1.isRequired();
    }

    @Test(timeout = 4000)
    public void test12863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test12865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
    }

    @Test(timeout = 4000)
    public void test12866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test12867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test12868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test12870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test12871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test12872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test12874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test12875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test12878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test12879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test12880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
    }

    @Test(timeout = 4000)
    public void test12881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
    }

    @Test(timeout = 4000)
    public void test12882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        string3.equals((Object) string2);
    }

    @Test(timeout = 4000)
    public void test12883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        string3.equals((Object) string1);
    }

    @Test(timeout = 4000)
    public void test12884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test12892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test12894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test12895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test12897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test12898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test12899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test12901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test12902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test12905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test12906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test12907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        optionGroup1.getSelected();
    }

    @Test(timeout = 4000)
    public void test12908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        optionGroup1.isRequired();
    }

    @Test(timeout = 4000)
    public void test12909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
    }

    @Test(timeout = 4000)
    public void test12911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test12919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test12921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test12922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test12923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test12924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test12925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test12926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test12928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test12929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test12930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test12931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test12932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test12933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test12934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        optionGroup1.getSelected();
    }

    @Test(timeout = 4000)
    public void test12935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        optionGroup1.isRequired();
    }

    @Test(timeout = 4000)
    public void test12936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
    }

    @Test(timeout = 4000)
    public void test12938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.defaultLongOptPrefix = null;
        helpFormatter0.setWidth((-1328));
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setArgName("usage: ");
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-1328);
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = true;
        String string2 = "";
        Options options1 = options0.addOption((String) null, true, "");
        List list0 = options0.helpOptions();
        Option option0 = new Option((String) null, true, (String) null);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = option0.getValues();
        String string3 = options2.toString();
        Option option1 = options2.getOption("--");
        String string4 = "an option from this group has already been selected: '";
        helpFormatter0.printHelp((String) null, "usage: ", options2, "an option from this group has already been selected: '");
    }

    @Test(timeout = 4000)
    public void test13939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test13940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test13943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test13944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test13946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test13947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test13948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test13949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test13950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test13951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test13952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test13953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test13954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test13958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test13959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test13960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test13961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test13962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test13963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test13964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test13965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test13966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test13967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test13968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test13972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test13973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test13974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test13975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test13976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test13982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test13983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test13984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test13985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test13986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test13994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test13995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test13996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test13997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test13998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test13999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test131000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test131007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
    }

    @Test(timeout = 4000)
    public void test131008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test131011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test131012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test131013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test131016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
    }

    @Test(timeout = 4000)
    public void test131017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
    }

    @Test(timeout = 4000)
    public void test131018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
    }

    @Test(timeout = 4000)
    public void test131019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
    }

    @Test(timeout = 4000)
    public void test131020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
    }

    @Test(timeout = 4000)
    public void test131021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
    }

    @Test(timeout = 4000)
    public void test131022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        string2.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test131023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        string2.equals((Object) string1);
    }

    @Test(timeout = 4000)
    public void test131024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test131029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test131030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test131031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test131034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test131040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test131043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test131044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test131045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test131048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
    }

    @Test(timeout = 4000)
    public void test131049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
    }

    @Test(timeout = 4000)
    public void test131050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
    }

    @Test(timeout = 4000)
    public void test131051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
    }

    @Test(timeout = 4000)
    public void test131052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
    }

    @Test(timeout = 4000)
    public void test131053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
    }

    @Test(timeout = 4000)
    public void test131054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test131058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test131059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test131060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test131063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test131071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test131072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test131073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test131075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test131076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test131078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test131079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test131081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test131083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test131084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test131085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test131086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test131087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test131088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test131089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
    }

    @Test(timeout = 4000)
    public void test131091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test131092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test131093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test131094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test131095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test131096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test131098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test131099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test131101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test131103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test131104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test131105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test131106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test131107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test131108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test131109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test131110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test131111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test131119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test131120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test131122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test131123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test131125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test131127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test131128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test131129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test131130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test131132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test131133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test131135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test131146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test131147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test131148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test131149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test131151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test131152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test131153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test131154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test131155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test131156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test131158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test131159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test131160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test131161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test131162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test131163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test131164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test131165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test131166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test131167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test131168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test131169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test131176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("hH/)%o");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("hH/)%o");
        String string1 = helpFormatter0.createPadding(2227);
        String string2 = helpFormatter0.rtrim("");
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(comparator1).toString();
        doReturn(0, 0).when(comparator1).compare(any(), any());
        helpFormatter0.setOptionComparator(comparator1);
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer("hH/)%o");
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "hH/)%o");
        Options options1 = options0.addOption(option0);
        String string3 = "";
        Options options2 = options1.addOption("", true, "");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2227, options2, 1, 1);
    }

    @Test(timeout = 4000)
    public void test141177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test141178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test141179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test141180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test141181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test141182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test141183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test141184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test141185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test141186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test141187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test141188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test141189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test141190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test141191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test141192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "&,n(sDN_E\\UH";
        Options options0 = null;
        helpFormatter0.printHelp("&,n(sDN_EUH", (Options) null, true);
    }

    @Test(timeout = 4000)
    public void test151193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test151194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test151195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test151196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test151197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test151198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test151199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test151200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test151201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test151202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test151203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test151204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test151205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test151206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test151207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test151208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test151209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test151210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test151211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test151212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test151213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test151214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test151215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test151216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test151217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
    }

    @Test(timeout = 4000)
    public void test151218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
    }

    @Test(timeout = 4000)
    public void test151219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
    }

    @Test(timeout = 4000)
    public void test151220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
    }

    @Test(timeout = 4000)
    public void test151221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
    }

    @Test(timeout = 4000)
    public void test151222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
    }

    @Test(timeout = 4000)
    public void test151223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test151224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test151225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test151226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test151227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test151228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test151229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test151230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test151231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test151232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test151233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test151234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test151235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test151236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test151237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test151238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test151239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test151240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test151241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test151242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test151243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test151244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test151245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test151246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.setDescPadding(3);
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        helpFormatter0.defaultSyntaxPrefix = "";
        helpFormatter0.printHelp("", options1, true);
    }

    @Test(timeout = 4000)
    public void test161247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test161248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test161249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test161250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test161251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test161252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test161253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test161254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test161255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test161256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test161257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test161258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test161259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test161260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test161261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test161262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test161263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test161264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test161265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test161266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test161267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test161268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test161269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test161270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test161271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test161272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test161273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test161274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test161275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test161276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test161277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        String string0 = "";
        helpFormatter0.printWrapped((PrintWriter) null, 0, 8, "");
    }

    @Test(timeout = 4000)
    public void test171278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test171279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test171280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test171281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test171282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test171283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test171284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test171285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test171286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test171287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test171288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test171289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test171290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test171291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test171292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test171293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H]KlKpwf");
    }

    @Test(timeout = 4000)
    public void test171294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H]KlKpwf");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
    }

    @Test(timeout = 4000)
    public void test171295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H]KlKpwf");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test171296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H]KlKpwf");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test171297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H]KlKpwf");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test171298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H]KlKpwf");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test171299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H]KlKpwf");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        Options options0 = new Options();
        helpFormatter0.printHelp(printWriter0, 0, "", "", options0, 0, 0, "", true);
    }

    @Test(timeout = 4000)
    public void test181300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test181301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test181302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test181303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test181304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test181305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test181306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test181307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test181308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test181309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test181310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test181311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test181312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test181313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test181314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test181315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 3;
        String string0 = "";
        Options options0 = null;
        helpFormatter0.printHelp("", (Options) null);
    }

    @Test(timeout = 4000)
    public void test191316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test191317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test191318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test191319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test191320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test191321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test191322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test191323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test191324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test191325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test191326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test191327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test191328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test191329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test191330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test191331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test191332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test191333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test191334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test191335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test191336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test191337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test191338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test191339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
    }

    @Test(timeout = 4000)
    public void test191340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
    }

    @Test(timeout = 4000)
    public void test191341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
    }

    @Test(timeout = 4000)
    public void test191342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
    }

    @Test(timeout = 4000)
    public void test191343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
    }

    @Test(timeout = 4000)
    public void test191344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
    }

    @Test(timeout = 4000)
    public void test191345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "#l)'1?5GBr";
        helpFormatter0.setNewLine("line.separator");
        Options options0 = null;
        helpFormatter0.printUsage((PrintWriter) null, 0, "#l)'1?5GBr", (Options) null);
    }

    @Test(timeout = 4000)
    public void test201346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test201347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test201349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test201350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test201352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test201353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test201354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test201356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test201357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test201358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test201359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test201360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test201361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test201365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test201366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test201368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test201369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test201370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
    }

    @Test(timeout = 4000)
    public void test201378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test201379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test201380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test201381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test201382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test201383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test201384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test201385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test201386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test201387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test201388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test201389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test201390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test201391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test201392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test201393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test201394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test201395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test201396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
    }

    @Test(timeout = 4000)
    public void test201397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
    }

    @Test(timeout = 4000)
    public void test201398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
    }

    @Test(timeout = 4000)
    public void test201399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test201400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test201401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test201402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test201403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test201404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test201405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test201406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test201407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test201408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test201409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test201410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test201411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test201412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test201413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test201414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test201415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test201416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
    }

    @Test(timeout = 4000)
    public void test201417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test201418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test201419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test201420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test201421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test201422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test201423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test201424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test201425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
    }

    @Test(timeout = 4000)
    public void test201426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test201427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test201428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test201429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test201430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test201431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test201432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test201433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test201434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test201435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test201436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test201437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test201438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test201439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test201440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test201441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test201442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test201443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test201444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test201445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test201446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test201447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test201448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
    }

    @Test(timeout = 4000)
    public void test201449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test201450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test201451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test201452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test201453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test201454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test201455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test201456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test201457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test201458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test201459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test201460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test201461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test201462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test201463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test201464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test201465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getRawPath();
    }

    @Test(timeout = 4000)
    public void test201466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.toString();
    }

    @Test(timeout = 4000)
    public void test201467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getRawUserInfo();
    }

    @Test(timeout = 4000)
    public void test201468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test201469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getRawFragment();
    }

    @Test(timeout = 4000)
    public void test201470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.isOpaque();
    }

    @Test(timeout = 4000)
    public void test201471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getPort();
    }

    @Test(timeout = 4000)
    public void test201472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getRawAuthority();
    }

    @Test(timeout = 4000)
    public void test201473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getScheme();
    }

    @Test(timeout = 4000)
    public void test201474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getRawQuery();
    }

    @Test(timeout = 4000)
    public void test201475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        uRI0.getHost();
    }

    @Test(timeout = 4000)
    public void test201476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test201480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test201481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test201483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test201484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test201485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test201487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test201488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test201489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test201490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test201491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test201492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test201493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test201494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test201495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test201496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test201497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test201498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test201499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test201500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test201501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test201502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
    }

    @Test(timeout = 4000)
    public void test201508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test201509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test201510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test201511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test201512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test201513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test201514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test201515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test201516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test201517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test201518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test201519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test201520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test201521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test201522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test201523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test201524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test201525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test201526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test201527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test201528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test201529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test201530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test201537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test201538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test201540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test201541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test201542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test201544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test201545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test201546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test201547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test201548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test201549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test201550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test201551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test201552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test201553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test201554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test201555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test201556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test201557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test201558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test201559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test201560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test201561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
    }

    @Test(timeout = 4000)
    public void test201567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test201568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test201572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test201573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test201575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test201576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test201577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test201585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test201586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test201587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test201589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test201590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test201591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test201592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
    }

    @Test(timeout = 4000)
    public void test201593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
    }

    @Test(timeout = 4000)
    public void test201594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
    }

    @Test(timeout = 4000)
    public void test201595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
    }

    @Test(timeout = 4000)
    public void test201596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
    }

    @Test(timeout = 4000)
    public void test201597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
    }

    @Test(timeout = 4000)
    public void test201598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockFile mockFile0 = new MockFile("v%e)&i7_BZ(%L.wD^u", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        mockPrintStream0.println(true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
        int int0 = 2889;
        Options options0 = new Options();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        PrintStream printStream0 = mockPrintStream0.printf(locale0, "--", (Object[]) null);
        URI uRI0 = mockFile0.toURI();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2889, "");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(false);
        Options options1 = options0.addOptionGroup(optionGroup0);
        List list0 = options1.helpOptions();
        Collection collection0 = options1.getOptions();
        helpFormatter0.printUsage(printWriter0, 2889, (String) null, options1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setOptPrefix("'G)/4>");
        MockPrintWriter mockPrintWriter1 = null;
        mockPrintWriter1 = new MockPrintWriter("'G)/4>", "   ");
    }

    @Test(timeout = 4000)
    public void test211599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test211600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test211601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test211602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test211603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test211604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test211605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test211606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test211607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test211608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test211609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test211610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test211611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test211612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test211613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test211614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test211615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test211616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test211617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test211618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test211619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test211620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test211621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test211622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test211623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test211624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test211625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test211626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test211627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test211628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test211629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
    }

    @Test(timeout = 4000)
    public void test211630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
    }

    @Test(timeout = 4000)
    public void test211631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test211632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test211633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test211634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test211635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test211636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test211637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
    }

    @Test(timeout = 4000)
    public void test211638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
    }

    @Test(timeout = 4000)
    public void test211639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
    }

    @Test(timeout = 4000)
    public void test211640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
    }

    @Test(timeout = 4000)
    public void test211641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
    }

    @Test(timeout = 4000)
    public void test211642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
    }

    @Test(timeout = 4000)
    public void test211643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test211644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test211645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test211646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test211647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test211648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test211649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        String string0 = "";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g}#^)O/'{? <g5U.rd");
        Locale locale0 = Locale.PRC;
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) " <";
        objectArray0[1] = (Object) "g}#^)O/'{? <g5U.rd";
        objectArray0[2] = (Object) locale0;
        objectArray0[3] = (Object) helpFormatter0;
        boolean boolean0 = options0.hasOption(" <");
        objectArray0[4] = (Object) "";
        Object object0 = new Object();
        objectArray0[5] = object0;
        objectArray0[6] = (Object) " <";
        objectArray0[7] = (Object) " <";
        objectArray0[8] = (Object) "";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " <", objectArray0);
        helpFormatter0.printHelp(printWriter0, 0, (String) null, "g}#^)O/'{? <g5U.rd", options0, 0, 1681, "!L3bRU&FDz& E>Tc^", true);
    }

    @Test(timeout = 4000)
    public void test221650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test221651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test221652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test221653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test221654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test221655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test221656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test221657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test221658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test221659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test221660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test221661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test221662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test221663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test221664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test221665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test221666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test221667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test221668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test221669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test221670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test221671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test221672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test221673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test221674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
    }

    @Test(timeout = 4000)
    public void test221675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
    }

    @Test(timeout = 4000)
    public void test221676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
    }

    @Test(timeout = 4000)
    public void test221677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
    }

    @Test(timeout = 4000)
    public void test221678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
    }

    @Test(timeout = 4000)
    public void test221679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
    }

    @Test(timeout = 4000)
    public void test221680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "Iz(|jl/k|<!?mr-&";
        Options options0 = new Options();
        helpFormatter0.printHelp("Iz(|jl/k|<!?mr-&", (String) null, options0, (String) null);
        String string1 = "piiv2O!YE3";
        MockFile.createTempFile((String) null, "piiv2O!YE3");
    }

    @Test(timeout = 4000)
    public void test231681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test231682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test231683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test231684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test231685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test231687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test231688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test231689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test231690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test231691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test231692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test231693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test231694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test231695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test231696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test231699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test231700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test231701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test231703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test231704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test231705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test231706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test231713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test231714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test231715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test231716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test231717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test231718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test231719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test231720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test231721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test231722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test231723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test231724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test231725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test231726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        Options options0 = null;
        String string1 = "~&7|VL5id8(Mai";
        helpFormatter0.printHelp((-1177), "arg", "arg", (Options) null, "~&7|VL5id8(Mai");
    }

    @Test(timeout = 4000)
    public void test241727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test241728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test241729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test241730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test241731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test241732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test241733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test241734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test241735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test241736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test241737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test241738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test241739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test241740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test241741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test241742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
    }

    @Test(timeout = 4000)
    public void test241743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test241744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test241745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
    }

    @Test(timeout = 4000)
    public void test241746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
    }

    @Test(timeout = 4000)
    public void test241747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
    }

    @Test(timeout = 4000)
    public void test241748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test241749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        String string0 = ".E^|YbFb@Ba";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test241750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        String string0 = ".E^|YbFb@Ba";
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
    }

    @Test(timeout = 4000)
    public void test241751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        String string0 = ".E^|YbFb@Ba";
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
    }

    @Test(timeout = 4000)
    public void test241752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        String string0 = ".E^|YbFb@Ba";
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
    }

    @Test(timeout = 4000)
    public void test241753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 1);
        String string0 = ".E^|YbFb@Ba";
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "--");
        helpFormatter0.printUsage(printWriter0, (-437), ".E^|YbFb@Ba", options1);
    }

    @Test(timeout = 4000)
    public void test251754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test251755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test251756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test251757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test251758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test251759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test251760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test251761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test251762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test251763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test251764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test251765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test251766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test251767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test251768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test251769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
    }

    @Test(timeout = 4000)
    public void test251770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test251771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test251772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test251773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test251775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test251776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test251777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test251778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test251779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test251780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test251781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
    }

    @Test(timeout = 4000)
    public void test251782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
    }

    @Test(timeout = 4000)
    public void test251783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
    }

    @Test(timeout = 4000)
    public void test251784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
    }

    @Test(timeout = 4000)
    public void test251785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test251786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test251787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test251788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test251789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test251790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test251791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test251793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test251794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
    }

    @Test(timeout = 4000)
    public void test251795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test251796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test251797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test251799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test251800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test251801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test251802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test251803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test251805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test251806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test251807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test251808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test251809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
    }

    @Test(timeout = 4000)
    public void test251811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
    }

    @Test(timeout = 4000)
    public void test251812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test251813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test251814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test251815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test251816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test251818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test251819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test251821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test251822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test251823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test251824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test251825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test251827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test251828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test251829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test251830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test251831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup1.isRequired();
    }

    @Test(timeout = 4000)
    public void test251833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup1.getSelected();
    }

    @Test(timeout = 4000)
    public void test251834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test251835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test251836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test251837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test251838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test251839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test251840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test251841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test251842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test251844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test251845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test251847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test251848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test251849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test251850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test251851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test251853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test251854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test251855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test251856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test251857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.isRequired();
    }

    @Test(timeout = 4000)
    public void test251859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.getSelected();
    }

    @Test(timeout = 4000)
    public void test251860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test251861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test251862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        list1.equals((Object) list0);
    }

    @Test(timeout = 4000)
    public void test251863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        list1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test251870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        list1.size();
    }

    @Test(timeout = 4000)
    public void test251871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test251872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test251874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test251875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test251877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test251878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test251879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test251880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test251881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test251882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test251883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test251884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test251885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test251886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test251887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test251888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        optionGroup1.isRequired();
    }

    @Test(timeout = 4000)
    public void test251889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        optionGroup1.getSelected();
    }

    @Test(timeout = 4000)
    public void test251890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test251892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
        List list0 = options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list1 = options1.helpOptions();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3497, "_J>8xxG", "e7\"*nKh*WTr2Vv", options1, (-2), 3497, "c?'\"YGR4\"<zYp >", true);
    }

    @Test(timeout = 4000)
    public void test261893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test261894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test261895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test261896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test261897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test261898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test261899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test261900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test261901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test261902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test261903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test261904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test261905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test261906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test261907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test261908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 3845;
        String string0 = "hT}GOIbqW";
        String string1 = "hY";
        Options options0 = null;
        helpFormatter0.printHelp(3845, "hT}GOIbqW", "hY", (Options) null, ":lZ3;Uw<LIr%i\"+");
    }

    @Test(timeout = 4000)
    public void test271909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test271910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test271911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test271912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test271913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test271914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test271915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test271916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test271917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test271918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test271919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test271920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test271921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test271922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test271923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test271924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
    }

    @Test(timeout = 4000)
    public void test271925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test271926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test271927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test271928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test271929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test271930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
    }

    @Test(timeout = 4000)
    public void test271931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test271932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test271933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test271934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test271935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test271936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        String string0 = null;
        helpFormatter0.printUsage(printWriter0, 0, (String) null);
    }

    @Test(timeout = 4000)
    public void test281937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test281938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test281939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test281940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test281941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test281942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test281943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test281944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test281945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test281946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test281947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test281948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test281949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test281950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test281951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test281952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    }

    @Test(timeout = 4000)
    public void test281953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test281954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test281955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
    }

    @Test(timeout = 4000)
    public void test281956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test281957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test281958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test281959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test281960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test281961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
    }

    @Test(timeout = 4000)
    public void test281962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
    }

    @Test(timeout = 4000)
    public void test281963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
    }

    @Test(timeout = 4000)
    public void test281964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
    }

    @Test(timeout = 4000)
    public void test281965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test281966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test281967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test281968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
    }

    @Test(timeout = 4000)
    public void test281969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
    }

    @Test(timeout = 4000)
    public void test281970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
    }

    @Test(timeout = 4000)
    public void test281971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test281972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test281973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test281974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test281975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test281976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test281977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test281978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test281979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test281980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test281981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test281982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "iQ[D=n&^*_N,]XwD[Z0", true, "31,5wk");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options2 = options1.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test291983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test291984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test291985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test291986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test291987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test291988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test291989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test291990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test291991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test291992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test291993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test291994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test291995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test291996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test291997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test291998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
    }

    @Test(timeout = 4000)
    public void test291999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test292000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test292001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test292002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        Options options0 = new Options();
        List list0 = options0.helpOptions();
    }

    @Test(timeout = 4000)
    public void test292003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test292004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test292005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("arg", false, "arg");
    }

    @Test(timeout = 4000)
    public void test292006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("arg", false, "arg");
    }

    @Test(timeout = 4000)
    public void test292007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption("arg", false, "arg");
    }

    @Test(timeout = 4000)
    public void test302008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test302009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test302010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test302011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test302012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test302013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test302014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test302015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test302016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test302017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test302018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test302019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test302020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test302021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test302022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test302023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
    }

    @Test(timeout = 4000)
    public void test302024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
    }

    @Test(timeout = 4000)
    public void test302025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
    }

    @Test(timeout = 4000)
    public void test302026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
    }

    @Test(timeout = 4000)
    public void test302027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
    }

    @Test(timeout = 4000)
    public void test302028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test302031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test302032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test302033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test302034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test302035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test302036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test302037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test302038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
    }

    @Test(timeout = 4000)
    public void test302044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test302045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test302046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test302047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test302048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test302049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test302050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test302051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test302052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
    }

    @Test(timeout = 4000)
    public void test302053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
    }

    @Test(timeout = 4000)
    public void test302054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
    }

    @Test(timeout = 4000)
    public void test302055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
    }

    @Test(timeout = 4000)
    public void test302056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
    }

    @Test(timeout = 4000)
    public void test302057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
    }

    @Test(timeout = 4000)
    public void test302058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kwV@W>g>^(D`^");
        String string0 = "";
        mockPrintWriter0.print((Object) "");
        PrintWriter printWriter0 = mockPrintWriter0.append('P');
        mockPrintWriter0.println(1.0F);
        helpFormatter0.printWrapped(printWriter0, 788, "{!z,}k");
        helpFormatter0.setWidth((-737));
        helpFormatter0.createPadding((-737));
    }

    @Test(timeout = 4000)
    public void test312059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test312060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test312061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test312062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test312063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test312064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test312065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test312066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test312067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test312068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test312069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test312070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test312071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test312072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test312073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test312074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
    }

    @Test(timeout = 4000)
    public void test312075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test312076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test312077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test312078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test312079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test312080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test312081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test312082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test312083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test312084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test312085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test312086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test312087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test312088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test312089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test312090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test312091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
    }

    @Test(timeout = 4000)
    public void test312092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test312093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
    }

    @Test(timeout = 4000)
    public void test312094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) stringBuffer0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockFileOutputStream0;
        objectArray0[3] = (Object) stringBuffer0;
        objectArray0[4] = (Object) stringBuffer0;
        objectArray0[5] = (Object) filterOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test312095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) stringBuffer0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockFileOutputStream0;
        objectArray0[3] = (Object) stringBuffer0;
        objectArray0[4] = (Object) stringBuffer0;
        objectArray0[5] = (Object) filterOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test312096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) stringBuffer0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockFileOutputStream0;
        objectArray0[3] = (Object) stringBuffer0;
        objectArray0[4] = (Object) stringBuffer0;
        objectArray0[5] = (Object) filterOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test312097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("eQ^IDa[)ys~KhJ6C|P");
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) stringBuffer0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockFileOutputStream0;
        objectArray0[3] = (Object) stringBuffer0;
        objectArray0[4] = (Object) stringBuffer0;
        objectArray0[5] = (Object) filterOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
    }

    @Test(timeout = 4000)
    public void test322098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test322099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test322100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test322101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test322102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test322103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test322104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test322105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test322106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test322107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test322108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test322109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test322110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test322111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test322112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test322113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test322114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
    }

    @Test(timeout = 4000)
    public void test322115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
    }

    @Test(timeout = 4000)
    public void test322116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
    }

    @Test(timeout = 4000)
    public void test322117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
    }

    @Test(timeout = 4000)
    public void test322118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
    }

    @Test(timeout = 4000)
    public void test322119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test322120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test322121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test322122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test322123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test322124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test322125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test322126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test322127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
    }

    @Test(timeout = 4000)
    public void test322128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
    }

    @Test(timeout = 4000)
    public void test322129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
    }

    @Test(timeout = 4000)
    public void test322130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
    }

    @Test(timeout = 4000)
    public void test322131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
    }

    @Test(timeout = 4000)
    public void test322132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
    }

    @Test(timeout = 4000)
    public void test322133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test322134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test322135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test322136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test322137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test322138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test322139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test322140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test322141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test322142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test322143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test322144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test322145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test322146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test322147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = options0.toString();
        Options options1 = options0.addOption((String) null, "arg", false, "[ Options: [ short ");
        helpFormatter0.printHelp("Fdsp2(mp", options0, false);
        helpFormatter0.setWidth(0);
        helpFormatter0.printHelp(3242, "Fdsp2(mp", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "Fdsp2(mp", false);
    }

    @Test(timeout = 4000)
    public void test332148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test332149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test332151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test332152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test332153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test332154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test332156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test332158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test332159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test332160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test332161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test332162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test332163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test332164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test332166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test332167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test332168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test332170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test332172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test332173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test332174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test332175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test332176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
    }

    @Test(timeout = 4000)
    public void test332177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test332179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test332181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test332182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test332183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test332185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test332195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test332197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test332198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test332199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test332201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test332209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test332210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test332211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test332212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test332213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test332215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test332216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test332217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test332218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test332219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test332220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test332221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test332222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
    }

    @Test(timeout = 4000)
    public void test332223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test332224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test332225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("T*bzu`", objectArray0);
    }

    @Test(timeout = 4000)
    public void test332226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("T*bzu`", objectArray0);
    }

    @Test(timeout = 4000)
    public void test332227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("T*bzu`", objectArray0);
    }

    @Test(timeout = 4000)
    public void test332228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("T*bzu`", objectArray0);
    }

    @Test(timeout = 4000)
    public void test332229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("T*bzu`", objectArray0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test332230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(0);
        int int0 = helpFormatter0.getLeftPadding();
        String string0 = helpFormatter0.getLongOptPrefix();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("T*bzu`", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 0, 0, "--");
    }

    @Test(timeout = 4000)
    public void test342231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test342232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test342233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test342234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test342235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test342236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test342237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test342238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test342239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test342240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test342241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test342242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test342243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test342244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test342245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test342246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test342247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test342248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test342249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test342250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test342251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test342252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test342253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        helpFormatter0.defaultArgName = "";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test352254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test352255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test352256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test352257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test352258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test352259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test352261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test352262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test352264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test352265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test352266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test352267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test352268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test352269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test352270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test352271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test352273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test352274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test352275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test352276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test352278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test352279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test352280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test352281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test352282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test352283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test352285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test352286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test352288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test352289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test352290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test352291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test352292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
    }

    @Test(timeout = 4000)
    public void test352293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test352294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test352295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test352296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test352297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test352299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test352300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test352302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test352303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test352304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test352305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test352306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test352307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
    }

    @Test(timeout = 4000)
    public void test352308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test352310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
    }

    @Test(timeout = 4000)
    public void test352311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test352313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test352314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test352315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test352316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test352317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test352318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test352319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test352320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test352321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test352322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test352323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test352324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test352325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test352326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
    }

    @Test(timeout = 4000)
    public void test352327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
    }

    @Test(timeout = 4000)
    public void test352328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        collection1.equals((Object) collection0);
    }

    @Test(timeout = 4000)
    public void test352329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test352330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test352331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
    }

    @Test(timeout = 4000)
    public void test352332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test352334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test352336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test352337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test352338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test352339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test352340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test352341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test352342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test352343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test352344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test352345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test352346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test352347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test352348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test352349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
    }

    @Test(timeout = 4000)
    public void test352350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
    }

    @Test(timeout = 4000)
    public void test352351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test352352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test352354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test352355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test352356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test352357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test352358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test352359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test352360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test352361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test352362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test352363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test352364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test352365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test352366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test352367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test352368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
    }

    @Test(timeout = 4000)
    public void test352369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
    }

    @Test(timeout = 4000)
    public void test352370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
    }

    @Test(timeout = 4000)
    public void test352371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
    }

    @Test(timeout = 4000)
    public void test352372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test352373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test352374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test352375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test352376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test352377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test352379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test352380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test352381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test352382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test352383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test352384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test352385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test352386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
    }

    @Test(timeout = 4000)
    public void test352387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "q#Ry";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q#Ry", options0);
        helpFormatter0.setSyntaxPrefix("");
        Collection collection0 = optionGroup0.getNames();
        String string1 = "Dq)(VNMr";
        String string2 = "";
        Option option0 = new Option("arg", "Dq)(VNMr", false, "");
        Collection collection1 = options1.getOptions();
        option0.setArgName("9:09sxc?1>u8j]awS");
        optionGroup0.setSelected(option0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("a=fT}2ru86SS1=`2Po");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        mockPrintWriter0.println();
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 2735, 2735);
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options1, (-1), 2735);
    }

    @Test(timeout = 4000)
    public void test362388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test362389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test362391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test362392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test362393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test362396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test362398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test362399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test362400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test362401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test362402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test362403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
    }

    @Test(timeout = 4000)
    public void test362404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
    }

    @Test(timeout = 4000)
    public void test362405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test362406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test362407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test362408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test362409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test362410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test362411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test362412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test362413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test362414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test362415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test362416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test362417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test362418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test362419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test362420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test362421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    }

    @Test(timeout = 4000)
    public void test362422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test362423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test362424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test362425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test362426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test362427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test362428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test362429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test362430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test362431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test362432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test362433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test362434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test362435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test362436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test362437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test362438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
    }

    @Test(timeout = 4000)
    public void test362439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
    }

    @Test(timeout = 4000)
    public void test362440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test362441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test362442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test362443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test362444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test362445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test362446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test362447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test362448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test362449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test362450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test362451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test362452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test362453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test362454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test362455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test362456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test362457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test362458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test362459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test362460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test362461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test362462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test362463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test362464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test362465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test362466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test362467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test362468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test362469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test362470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test362471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test362472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test362474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test362475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test362476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test362479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test362481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test362482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test362483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test362484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test362485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test362486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test362488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test362489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test362490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test362493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test362495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test362496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test362497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test362498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test362499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test362500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test362501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test362502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test362503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test362504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test362505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test362506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test362507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test362508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test362509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test362510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
    }

    @Test(timeout = 4000)
    public void test362511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
    }

    @Test(timeout = 4000)
    public void test362512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
    }

    @Test(timeout = 4000)
    public void test362513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
    }

    @Test(timeout = 4000)
    public void test362514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
    }

    @Test(timeout = 4000)
    public void test362515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
    }

    @Test(timeout = 4000)
    public void test362516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test362517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test362521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test362522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test362523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test362526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test362537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test362538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test362539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test362541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test362542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test362549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test362550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test362551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test362552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test362553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
    }

    @Test(timeout = 4000)
    public void test362554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test362555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test362556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test362558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test362559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test362560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test362561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test362562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test362563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test362564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test362565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test362566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test362567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test362568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
    }

    @Test(timeout = 4000)
    public void test362569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
    }

    @Test(timeout = 4000)
    public void test362570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test362571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test362572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test362573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test362574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test362575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test362577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test362578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test362579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test362580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test362581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test362582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test362583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test362584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test362585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test362586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test362587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test362588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test362589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test362597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test362598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test362599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test362600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test362601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test362602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test362603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test362604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test362605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test362606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test362607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test362608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test362609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test362610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test362612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("usage: ");
        boolean boolean0 = mockFile0.setExecutable(true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.close();
        int int0 = 1217;
        boolean boolean1 = mockFile0.setWritable(false);
        mockPrintWriter0.println(0L);
        String string0 = "";
        helpFormatter0.setOptPrefix("");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1217, "");
        String string1 = helpFormatter0.getOptPrefix();
        int int1 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        int int2 = (-665);
        String string2 = "<-2z'j@xi_AAjO/6{De";
        int int3 = 0;
        String string3 = "";
        String string4 = "cmdLineSyntax not provided";
        Options options0 = new Options();
        Option option0 = new Option("", "--");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", true, "");
        options2.addOption("+OJq9i?", "[ Options: [ short ", true, "[ARG...]");
    }

    @Test(timeout = 4000)
    public void test372613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test372614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test372616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test372618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test372619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test372620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test372621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test372622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test372623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test372624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test372625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test372626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test372627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test372628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test372630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test372632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test372633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test372634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test372635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test372636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
    }

    @Test(timeout = 4000)
    public void test372637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
    }

    @Test(timeout = 4000)
    public void test372638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
    }

    @Test(timeout = 4000)
    public void test372639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
    }

    @Test(timeout = 4000)
    public void test372640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
    }

    @Test(timeout = 4000)
    public void test372641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
    }

    @Test(timeout = 4000)
    public void test372642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test372643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test372644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test372645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test372650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test372652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test372653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test372654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test372655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test372656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test372657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test372658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test372659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test372660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
    }

    @Test(timeout = 4000)
    public void test372666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test372675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test372677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test372678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test372679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test372680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test372681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test372682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test372683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test372684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test372685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        stringBuffer2.length();
    }

    @Test(timeout = 4000)
    public void test372686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        stringBuffer2.toString();
    }

    @Test(timeout = 4000)
    public void test372687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
    }

    @Test(timeout = 4000)
    public void test372693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test372700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test372701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test372702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test372703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test372704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test372705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test372706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test372707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test372708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test372709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test372710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
    }

    @Test(timeout = 4000)
    public void test372716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2));
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2338, "");
        StringBuffer stringBuffer2 = stringBuffer1.append(3);
        IntStream intStream0 = stringBuffer1.chars();
        helpFormatter0.renderWrappedText(stringBuffer1, (-776), (-132), "");
    }

    @Test(timeout = 4000)
    public void test382717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test382718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test382719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test382720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test382721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test382722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test382723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test382724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test382725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test382726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test382727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test382728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test382729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test382730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test382731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test382732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test382733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test382734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test382735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test382736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test382737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test382738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test382739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test382740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test382747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("--");
    }

    @Test(timeout = 4000)
    public void test382748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("--");
        Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("--");
        Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test382750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "org.apache.commons.cli.OptionGroup";
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("--");
        Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.OptionGroup");
    }

    @Test(timeout = 4000)
    public void test392751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test392752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test392753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test392754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test392755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test392756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test392759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test392760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test392761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test392762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test392763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test392764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test392765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test392766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test392767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test392768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test392769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test392770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test392773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test392774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test392775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test392776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test392777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test392778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test392781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test392782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
    }

    @Test(timeout = 4000)
    public void test392783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
    }

    @Test(timeout = 4000)
    public void test392784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
    }

    @Test(timeout = 4000)
    public void test392785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
    }

    @Test(timeout = 4000)
    public void test392786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
    }

    @Test(timeout = 4000)
    public void test392787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
    }

    @Test(timeout = 4000)
    public void test392788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
    }

    @Test(timeout = 4000)
    public void test392789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test392790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test392791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test392792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test392793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test392795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test392796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test392797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
    }

    @Test(timeout = 4000)
    public void test392798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
    }

    @Test(timeout = 4000)
    public void test392799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
    }

    @Test(timeout = 4000)
    public void test392800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
    }

    @Test(timeout = 4000)
    public void test392801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
    }

    @Test(timeout = 4000)
    public void test392802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
    }

    @Test(timeout = 4000)
    public void test392803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        String string1 = "!Ax vLZ+4G<]pe5";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test392804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        String string1 = "!Ax vLZ+4G<]pe5";
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test392805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        String string1 = "!Ax vLZ+4G<]pe5";
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test392806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        String string1 = "!Ax vLZ+4G<]pe5";
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test392807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-3745);
        helpFormatter0.setNewLine("*sVi&Kx`)w&4Qfj%S");
        String string0 = helpFormatter0.createPadding(1651);
        String string1 = "!Ax vLZ+4G<]pe5";
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        boolean boolean0 = false;
        helpFormatter0.printHelp("!Ax vLZ+4G<]pe5", "!Ax vLZ+4G<]pe5", options0, "%c:73/EKA{", false);
    }

    @Test(timeout = 4000)
    public void test402808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test402809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test402810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test402811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test402812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test402813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test402814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test402815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test402816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test402817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test402818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test402819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test402820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test402821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test402822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test402823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
    }

    @Test(timeout = 4000)
    public void test402824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test402825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test402826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test402830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test402831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test402832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test402833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test402834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test402835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test402836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test402837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test402838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test402839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test402840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test402841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test402846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
    }

    @Test(timeout = 4000)
    public void test412847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test412848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test412849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test412851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test412853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test412854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test412855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test412856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test412857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test412858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test412859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test412860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test412861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test412862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test412863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test412866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test412867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test412868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test412869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test412870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test412871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test412872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test412873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test412874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test412875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test412876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test412879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test412882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test412883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test412884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test412885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test412886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test412892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
    }

    @Test(timeout = 4000)
    public void test412893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    }

    @Test(timeout = 4000)
    public void test412894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test412895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test412896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test412897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test412898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test412899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test412900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test412901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test412902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test412903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test412904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test412905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test412906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test412907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test412908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test412909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test412910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test412911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test412912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test412913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.equals((Object) mockFile0);
    }

    @Test(timeout = 4000)
    public void test412914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
    }

    @Test(timeout = 4000)
    public void test412915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
    }

    @Test(timeout = 4000)
    public void test412916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.canWrite();
    }

    @Test(timeout = 4000)
    public void test412917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.isFile();
    }

    @Test(timeout = 4000)
    public void test412918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.toString();
    }

    @Test(timeout = 4000)
    public void test412919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.isHidden();
    }

    @Test(timeout = 4000)
    public void test412920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test412921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.getName();
    }

    @Test(timeout = 4000)
    public void test412922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.getParent();
    }

    @Test(timeout = 4000)
    public void test412923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test412924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test412925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.lastModified();
    }

    @Test(timeout = 4000)
    public void test412926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test412927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.exists();
    }

    @Test(timeout = 4000)
    public void test412928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.canRead();
    }

    @Test(timeout = 4000)
    public void test412929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test412930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.length();
    }

    @Test(timeout = 4000)
    public void test412931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        file0.canExecute();
    }

    @Test(timeout = 4000)
    public void test412932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix((String) null);
        String string0 = helpFormatter0.getLongOptPrefix();
        MockFile mockFile0 = new MockFile("f($");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 31;
        File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", "arg");
        Options options0 = null;
        int int1 = 13;
        boolean boolean0 = true;
        helpFormatter0.printHelp(printWriter0, 31, "--", (String) null, (Options) null, 31, 13, (String) null, true);
    }

    @Test(timeout = 4000)
    public void test422933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test422934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test422935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test422936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test422937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test422938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test422939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test422940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test422941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test422942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test422943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test422944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test422945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test422946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test422947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test422948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
    }

    @Test(timeout = 4000)
    public void test422949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test422950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test422951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
    }

    @Test(timeout = 4000)
    public void test422952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
    }

    @Test(timeout = 4000)
    public void test422953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
    }

    @Test(timeout = 4000)
    public void test422954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test422955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test422956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test422957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test422958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test422959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test422960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test422961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test422962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test422963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test422964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test422965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test422966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
    }

    @Test(timeout = 4000)
    public void test422967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
    }

    @Test(timeout = 4000)
    public void test422968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
    }

    @Test(timeout = 4000)
    public void test422969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
    }

    @Test(timeout = 4000)
    public void test422970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
    }

    @Test(timeout = 4000)
    public void test422971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
    }

    @Test(timeout = 4000)
    public void test422972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test422978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test422979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test422980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test422981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test422982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test422983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test422984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test422985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test422986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test422987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        stringBuffer2.length();
    }

    @Test(timeout = 4000)
    public void test422988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        stringBuffer2.toString();
    }

    @Test(timeout = 4000)
    public void test422989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
    }

    @Test(timeout = 4000)
    public void test422995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        StringBuffer stringBuffer1 = stringBuffer0.append((float) 1);
        helpFormatter0.setOptionComparator((Comparator) null);
        String string0 = "#JlOuDBz";
        StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 798, 1, "#JlOuDBz");
        MockPrintWriter mockPrintWriter0 = null;
        mockPrintWriter0 = new MockPrintWriter("");
    }

    @Test(timeout = 4000)
    public void test432996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test432997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test432998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test432999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test433000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test433001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test433002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test433003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test433004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test433005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test433006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test433007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test433008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test433009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test433010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test433011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test433012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test433013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test433014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test433015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test433016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test433017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test433018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test433019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
    }

    @Test(timeout = 4000)
    public void test433020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
    }

    @Test(timeout = 4000)
    public void test433021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
    }

    @Test(timeout = 4000)
    public void test433022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
    }

    @Test(timeout = 4000)
    public void test433023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
    }

    @Test(timeout = 4000)
    public void test433024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
    }

    @Test(timeout = 4000)
    public void test433025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test433028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test433029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test433030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test433031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test433032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test433033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test433034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test433035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
    }

    @Test(timeout = 4000)
    public void test433041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        String string1 = " ]";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test433042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " | ";
        helpFormatter0.setNewLine(" | ");
        int int0 = 0;
        int int1 = helpFormatter0.findWrapPos(" | ", 0, 0);
        String string1 = " ]";
        Options options0 = new Options();
        boolean boolean0 = true;
        options0.addOption("--", true, "");
    }

    @Test(timeout = 4000)
    public void test443043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test443044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test443045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test443046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test443047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test443048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test443049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test443050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test443051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test443052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test443053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test443054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test443055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test443056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test443057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test443058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), 10, (String) null);
    }

    @Test(timeout = 4000)
    public void test453059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test453060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test453061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test453062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test453063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test453064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test453065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test453066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test453067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test453068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test453069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test453070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test453071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test453072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test453073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test453074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test453075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test453078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test453079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test453080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test453081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test453082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test453083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test453084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test453085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
    }

    @Test(timeout = 4000)
    public void test453091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        String string2 = "mqixfNh2D";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test453092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        String string2 = "mqixfNh2D";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test453093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        String string2 = "mqixfNh2D";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test453094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        String string2 = "mqixfNh2D";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test453095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        int int0 = 0;
        String string1 = helpFormatter0.createPadding(0);
        String string2 = "mqixfNh2D";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = null;
        option0 = new Option("~]u2ddMg?|Dx1Ht", true, "arg");
    }

    @Test(timeout = 4000)
    public void test463096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test463097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test463098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test463099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test463100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test463101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test463102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test463103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test463104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test463105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test463106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test463107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test463108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test463109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test463110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test463111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = null;
        helpFormatter0.printHelp((-692), (String) null, ">", (Options) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test473112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test473113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test473115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test473116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test473117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test473119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test473120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test473122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test473123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test473124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test473125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test473126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test473127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test473131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test473132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test473133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test473135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test473136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test473147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test473148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test473149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test473151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test473152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test473160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test473162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test473163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test473164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test473165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test473166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test473167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test473168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
    }

    @Test(timeout = 4000)
    public void test473169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
    }

    @Test(timeout = 4000)
    public void test473170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
    }

    @Test(timeout = 4000)
    public void test473171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
    }

    @Test(timeout = 4000)
    public void test473172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
    }

    @Test(timeout = 4000)
    public void test473173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
    }

    @Test(timeout = 4000)
    public void test473174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.getNewLine();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        int int0 = (-642);
        ByteArrayOutputStream byteArrayOutputStream0 = null;
        byteArrayOutputStream0 = new ByteArrayOutputStream((-642));
    }

    @Test(timeout = 4000)
    public void test483175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test483176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test483177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test483178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test483179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test483180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test483181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test483182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test483183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test483184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test483185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test483186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test483187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test483188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test483189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test483190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test483191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test483192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test483193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test483194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test483195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test483196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test483197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test483198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test483199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
    }

    @Test(timeout = 4000)
    public void test483200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
    }

    @Test(timeout = 4000)
    public void test483201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
    }

    @Test(timeout = 4000)
    public void test483202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
    }

    @Test(timeout = 4000)
    public void test483203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
    }

    @Test(timeout = 4000)
    public void test483204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("I`CJ$", options0, false);
    }

    @Test(timeout = 4000)
    public void test493205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test493206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test493207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test493208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test493209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test493210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test493211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test493212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test493213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test493214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test493215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test493216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test493217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test493218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test493219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test493220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1R:H.2k");
    }

    @Test(timeout = 4000)
    public void test493221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1R:H.2k");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-540), "LlvXn=}5@\"rMHcw|cN");
    }

    @Test(timeout = 4000)
    public void test503222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test503223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test503224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test503225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test503226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test503227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test503228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test503229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test503230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test503231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test503232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test503233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test503234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test503235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test503236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test503237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test503238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test503239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test503240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test503241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test503245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test503246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test503247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test503248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test503249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test503250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test503251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test503252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test503253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test503254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test503255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test503256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
    }

    @Test(timeout = 4000)
    public void test503262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "jc.STC3[Euail03_";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = (-458);
        Options options0 = new Options();
        int int1 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-458), options0, 1552, 0);
        options0.addOption("-", false, " ]");
    }

    @Test(timeout = 4000)
    public void test513263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test513264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test513265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test513266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test513267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test513268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test513269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test513270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test513271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test513272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test513273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test513274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test513275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test513276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test513277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test513278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test513279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test513280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test513281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test513282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test513283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test513284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test513285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test513286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
    }

    @Test(timeout = 4000)
    public void test513287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
    }

    @Test(timeout = 4000)
    public void test513288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
    }

    @Test(timeout = 4000)
    public void test513289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
    }

    @Test(timeout = 4000)
    public void test513290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
    }

    @Test(timeout = 4000)
    public void test513291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
    }

    @Test(timeout = 4000)
    public void test513292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
    }

    @Test(timeout = 4000)
    public void test513293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test513294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test513295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test513296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test513297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test513298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test513299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test513300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test513301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test513302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test513303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test513304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test513305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test513306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test513307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test513308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
    }

    @Test(timeout = 4000)
    public void test513309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test513310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test513311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test513312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test513313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test513314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test513315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test513316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test513317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test513319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test513320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test513321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test513322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test513324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
    }

    @Test(timeout = 4000)
    public void test513325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
    }

    @Test(timeout = 4000)
    public void test513326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test513330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test513331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test513332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test513333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test513334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test513335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test513336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test513337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test513339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test513340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test513341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test513342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test513344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test513347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test513348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test513349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test513350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test513351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test513352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test513353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test513354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test513355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test513356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test513357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test513359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test513360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test513361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test513362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test513364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test513365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test513366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test513367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
    }

    @Test(timeout = 4000)
    public void test513368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.hasArg();
    }

    @Test(timeout = 4000)
    public void test513376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getLongOpt();
    }

    @Test(timeout = 4000)
    public void test513377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getArgName();
    }

    @Test(timeout = 4000)
    public void test513378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getArgs();
    }

    @Test(timeout = 4000)
    public void test513379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getValue();
    }

    @Test(timeout = 4000)
    public void test513380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getOpt();
    }

    @Test(timeout = 4000)
    public void test513381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.isRequired();
    }

    @Test(timeout = 4000)
    public void test513382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.hasArgs();
    }

    @Test(timeout = 4000)
    public void test513383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.hasValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getId();
    }

    @Test(timeout = 4000)
    public void test513385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getDescription();
    }

    @Test(timeout = 4000)
    public void test513386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.hasOptionalArg();
    }

    @Test(timeout = 4000)
    public void test513387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.hasLongOpt();
    }

    @Test(timeout = 4000)
    public void test513388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.getValueSeparator();
    }

    @Test(timeout = 4000)
    public void test513389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        option0.hasArgName();
    }

    @Test(timeout = 4000)
    public void test513390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
    }

    @Test(timeout = 4000)
    public void test513392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("C:-Jp!Es`>V?t\"qpp^V");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = (-956);
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "--");
        Options options1 = options0.addOption(option0);
        List list0 = options1.helpOptions();
        Options options2 = options1.addOption(option0);
        helpFormatter0.printOptions(mockPrintWriter0, (-956), options1, 0, (-2));
    }

    @Test(timeout = 4000)
    public void test523393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test523394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test523396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test523398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test523400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test523401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test523402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test523403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test523404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test523405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test523406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test523407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test523408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test523410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test523412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test523413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test523414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test523416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
    }

    @Test(timeout = 4000)
    public void test523417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
    }

    @Test(timeout = 4000)
    public void test523418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
    }

    @Test(timeout = 4000)
    public void test523419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
    }

    @Test(timeout = 4000)
    public void test523420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
    }

    @Test(timeout = 4000)
    public void test523421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
    }

    @Test(timeout = 4000)
    public void test523422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test523423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test523426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test523427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test523428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test523430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
    }

    @Test(timeout = 4000)
    public void test523431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
    }

    @Test(timeout = 4000)
    public void test523432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
    }

    @Test(timeout = 4000)
    public void test523433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
    }

    @Test(timeout = 4000)
    public void test523434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
    }

    @Test(timeout = 4000)
    public void test523435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
    }

    @Test(timeout = 4000)
    public void test523436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test523439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test523441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test523442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test523443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test523444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test523446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test523451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("cmdLineSyntax not provided");
        helpFormatter0.setLongOptPrefix("%v0'?,S*mCuP");
        String string0 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test533452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test533453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test533454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test533455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test533457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test533458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test533459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test533460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test533461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test533462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test533463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test533464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test533465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test533466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test533467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test533469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test533470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test533472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test533473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test533474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test533475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test533476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
    }

    @Test(timeout = 4000)
    public void test533483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test533484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test533485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test533489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test533490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test533491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test533492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test533493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test533494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test533495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test533496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test533497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test533498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test533499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test533500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
    }

    @Test(timeout = 4000)
    public void test533506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, (-3151), "");
        stringBuffer1.insert(74, 0);
    }

    @Test(timeout = 4000)
    public void test543507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test543508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test543509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test543510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test543511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test543512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test543513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test543514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test543515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test543516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test543517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test543518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test543519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test543520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test543521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test543522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test543523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test543524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test543525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test543526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test543527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test543528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test543529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test543530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test543531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
    }

    @Test(timeout = 4000)
    public void test543532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
    }

    @Test(timeout = 4000)
    public void test543533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
    }

    @Test(timeout = 4000)
    public void test543534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
    }

    @Test(timeout = 4000)
    public void test543535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
    }

    @Test(timeout = 4000)
    public void test543536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
    }

    @Test(timeout = 4000)
    public void test543537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test543538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test543539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test543540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test543541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test543542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test543543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test543544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test543545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test543546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test543547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test543548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test543549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test543550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test543551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(1451, "x\"4'y/eiUx", (String) null, options0, "2b|W", false);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
    }

    @Test(timeout = 4000)
    public void test553552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test553553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test553554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test553555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test553556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test553557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test553558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test553559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test553560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test553561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test553562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test553563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test553564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test553565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test553566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test553567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = null;
        helpFormatter0.findWrapPos((String) null, (-73), 0);
    }

    @Test(timeout = 4000)
    public void test563568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test563569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test563570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test563571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test563572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test563573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test563574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test563575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test563576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test563577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test563578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test563579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test563580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test563581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test563582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test563583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test563584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test563585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test563586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test563587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test563588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test563589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test563590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test563591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
    }

    @Test(timeout = 4000)
    public void test563592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
    }

    @Test(timeout = 4000)
    public void test563593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
    }

    @Test(timeout = 4000)
    public void test563594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
    }

    @Test(timeout = 4000)
    public void test563595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
    }

    @Test(timeout = 4000)
    public void test563596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
    }

    @Test(timeout = 4000)
    public void test563597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        helpFormatter0.createPadding((-2005));
    }

    @Test(timeout = 4000)
    public void test573598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test573599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test573600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test573601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test573602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test573603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test573604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test573605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test573606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test573607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test573608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test573609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test573610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test573611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test573612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test573613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test573614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        helpFormatter0.printHelp(0, "", "", options0, "", false);
    }

    @Test(timeout = 4000)
    public void test583615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test583616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test583617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test583618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test583619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test583620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test583621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test583622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test583623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test583624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test583625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test583626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test583627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test583628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test583629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test583630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test583631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp((-1), "", "", options0, "", true);
    }

    @Test(timeout = 4000)
    public void test593632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test593633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test593634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test593635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test593636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test593637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test593638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test593639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test593640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test593641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test593642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test593643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test593644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test593645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test593646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test593647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test593648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test593649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test593650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test593651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test593652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test593653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test593654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test593655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
    }

    @Test(timeout = 4000)
    public void test593656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
    }

    @Test(timeout = 4000)
    public void test593657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
    }

    @Test(timeout = 4000)
    public void test593658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
    }

    @Test(timeout = 4000)
    public void test593659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
    }

    @Test(timeout = 4000)
    public void test593660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("[");
    }

    @Test(timeout = 4000)
    public void test603661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test603662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test603663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test603664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test603665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test603666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test603667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test603668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test603671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test603672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test603673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test603674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test603675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test603676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test603677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test603678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test603679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test603680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test603681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test603682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
    }

    @Test(timeout = 4000)
    public void test603685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
    }

    @Test(timeout = 4000)
    public void test603686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
    }

    @Test(timeout = 4000)
    public void test603687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
    }

    @Test(timeout = 4000)
    public void test603688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
    }

    @Test(timeout = 4000)
    public void test603689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
    }

    @Test(timeout = 4000)
    public void test603690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test603693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test603694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test603695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test603696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test603697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test603698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test603706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
    }

    @Test(timeout = 4000)
    public void test603707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix(">");
        String string0 = helpFormatter0.getLongOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        mockPrintWriter0.flush();
        mockPrintWriter0.print(2836L);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3659), "");
    }

    @Test(timeout = 4000)
    public void test613708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test613709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test613710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test613711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test613712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test613713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test613714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test613715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test613716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test613717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test613718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test613719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test613720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test613721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test613722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test613723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "j,}|CpPA~eQJ]~?O";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "j,}|CpPA~eQJ]~?O");
    }

    @Test(timeout = 4000)
    public void test613724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "j,}|CpPA~eQJ]~?O";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "j,}|CpPA~eQJ]~?O");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test613725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "j,}|CpPA~eQJ]~?O";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "j,}|CpPA~eQJ]~?O");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test613726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "j,}|CpPA~eQJ]~?O";
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "j,}|CpPA~eQJ]~?O");
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "j,}|CpPA~eQJ]~?O");
    }

    @Test(timeout = 4000)
    public void test623727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test623728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test623729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test623730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test623731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test623732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test623733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test623735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test623737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test623738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test623739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test623740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test623741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test623742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test623743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test623744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test623745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test623746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test623747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test623748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test623751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test623752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test623753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test623754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test623755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test623756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test623761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test623762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test623763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test623764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test623765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test623766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
    }

    @Test(timeout = 4000)
    public void test623774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
    }

    @Test(timeout = 4000)
    public void test623775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test623776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test623777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test623778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test623779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test623780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test623781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test623783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
    }

    @Test(timeout = 4000)
    public void test623784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
    }

    @Test(timeout = 4000)
    public void test623785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
    }

    @Test(timeout = 4000)
    public void test623786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
    }

    @Test(timeout = 4000)
    public void test623787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
    }

    @Test(timeout = 4000)
    public void test623788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        helpFormatter0.defaultDescPad = 8;
        String string0 = helpFormatter0.rtrim(" [ARG]");
        int int0 = helpFormatter0.findWrapPos(" [ARG]", 79, 3992);
    }

    @Test(timeout = 4000)
    public void test633789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test633790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test633791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test633792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test633793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test633794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test633795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test633796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test633797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test633798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test633799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test633800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test633801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test633802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test633803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test633804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test633805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test633806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test633807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test633808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test633809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test633810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test633811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test633812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test633813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test633814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test633815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test633816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test633817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test633818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test633819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test633820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test633821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test633822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test633823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test633824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test633825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test633826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test633827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test633828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test633829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test633830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("q", "", options1, "q", true);
    }

    @Test(timeout = 4000)
    public void test643831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test643832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test643835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test643836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test643837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test643838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test643839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test643841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test643842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test643843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test643844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test643845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test643846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test643848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test643849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test643850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test643851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test643853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test643856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test643857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test643858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test643859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test643861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test643866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test643867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test643868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test643869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test643871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test643879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test643883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test643884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test643885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test643886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test643888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
    }

    @Test(timeout = 4000)
    public void test643895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test643898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test643899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test643900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test643901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test643902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
    }

    @Test(timeout = 4000)
    public void test643904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
    }

    @Test(timeout = 4000)
    public void test643905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
    }

    @Test(timeout = 4000)
    public void test643906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
    }

    @Test(timeout = 4000)
    public void test643907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
    }

    @Test(timeout = 4000)
    public void test643908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
    }

    @Test(timeout = 4000)
    public void test643909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test643910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test643912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test643913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test643914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test643915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test643916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test643917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test643918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test643919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test643920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test643921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test643922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLongOptPrefix = "1]dg";
        helpFormatter0.defaultDescPad = 0;
        String string0 = helpFormatter0.getNewLine();
        String string1 = helpFormatter0.rtrim("");
        helpFormatter0.setLongOptPrefix("--");
        helpFormatter0.setSyntaxPrefix("");
    }

    @Test(timeout = 4000)
    public void test653923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test653924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test653925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test653927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test653928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test653929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test653930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test653931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test653932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test653933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test653934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test653935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test653936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test653937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test653938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test653940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test653942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test653943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test653944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test653945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test653946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test653947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test653952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test663953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test663954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test663955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test663956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test663957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test663958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test663959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test663960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test663961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test663962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test663963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test663964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test663965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test663966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test663967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test663968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test663969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test663970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test663971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test663972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test663973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test663974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test663975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test663976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test663979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test663980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test663981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test663982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test663983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test663984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test663985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test663986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
    }

    @Test(timeout = 4000)
    public void test663992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test663993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test663994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test663995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test663996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test663997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test663998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test663999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test664000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test664001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test664002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test664003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test664004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test664005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test664006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test664007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test664008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test664009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test664010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test664011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test664012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test664013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test664014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test664015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test664016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test664017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "O'3:/*2";
        helpFormatter0.optionComparator = null;
        int int0 = 1046;
        int int1 = helpFormatter0.findWrapPos("O'3:/*2", 1046, 74);
        String string1 = helpFormatter0.getSyntaxPrefix();
        Options options0 = null;
        int int2 = 2335;
        helpFormatter0.optionComparator = null;
        helpFormatter0.printHelp(2335, "usage: ", "usage: ", (Options) null, "O'3:/*2", true);
    }

    @Test(timeout = 4000)
    public void test674018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test674019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test674020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test674021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test674022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test674023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test674024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test674025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test674026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test674027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test674028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test674029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test674030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test674031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test674032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test674033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test674034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test674035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test674036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test674037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test674038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test674039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test674040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test674041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test674042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test674043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test674044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test674045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test674046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test674047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = " ";
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
    }

    @Test(timeout = 4000)
    public void test674048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = " ";
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test674049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = " ";
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test674050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = " ";
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
    }

    @Test(timeout = 4000)
    public void test674051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = " ";
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
        int int0 = 0;
        helpFormatter0.printWrapped(printWriter0, 0, 0, "org.apache.commons.cli.ParseException");
    }

    @Test(timeout = 4000)
    public void test684052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test684053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test684054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test684055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test684056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test684057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test684058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test684061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test684062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test684063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test684064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test684065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test684066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test684067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test684070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test684071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test684072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test684073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test684074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test684077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test684084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test684085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test684086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test684087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test684089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test684090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test684091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test684092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test684093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test684094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test684095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test684096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setLongOptPrefix("");
    }

    @Test(timeout = 4000)
    public void test694097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test694098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test694099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test694100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test694101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test694103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test694104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test694105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test694106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test694107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test694108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test694109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test694110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test694111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test694112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test694115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test694116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test694117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test694119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test694120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test694121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test694122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test694129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test694130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test694131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test694132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test694133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test694134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test694135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test694136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test694137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test694138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test694139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test694140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test694141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
    }

    @Test(timeout = 4000)
    public void test694142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setWidth(0);
        String string1 = "org.apache.commons.cli.Options";
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2218), (-2218), "org.apache.commons.cli.Options");
    }

    @Test(timeout = 4000)
    public void test704143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test704144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test704145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test704146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test704147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test704148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test704149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test704150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test704151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test704152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test704153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test704154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test704155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test704156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test704157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test704158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test704159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test704160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test704161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
    }

    @Test(timeout = 4000)
    public void test704162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test704165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test704166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test704167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test704168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test704169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test704170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test704171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test704172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
    }

    @Test(timeout = 4000)
    public void test704178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test704179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test704180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test704181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test704182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test704183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test704184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test704185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test704186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test704187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test704188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test704189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test704190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test704191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        helpFormatter0.printHelp(">", options1);
        helpFormatter0.setOptPrefix("Z.u0-?t4:L-");
    }

    @Test(timeout = 4000)
    public void test714192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test714193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test714202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test714203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test714204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test714205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test714206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test714207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
    }

    @Test(timeout = 4000)
    public void test714247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
    }

    @Test(timeout = 4000)
    public void test714248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
    }

    @Test(timeout = 4000)
    public void test714249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
    }

    @Test(timeout = 4000)
    public void test714250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
    }

    @Test(timeout = 4000)
    public void test714251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
    }

    @Test(timeout = 4000)
    public void test714252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test714269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
    }

    @Test(timeout = 4000)
    public void test714285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        string2.equals((Object) string1);
    }

    @Test(timeout = 4000)
    public void test714286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        string2.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test714287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        string3.equals((Object) string2);
    }

    @Test(timeout = 4000)
    public void test714312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        string3.equals((Object) string1);
    }

    @Test(timeout = 4000)
    public void test714313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        string3.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test714314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
    }

    @Test(timeout = 4000)
    public void test714347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        string4.equals((Object) string3);
    }

    @Test(timeout = 4000)
    public void test714348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        string4.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test714349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        string4.equals((Object) string1);
    }

    @Test(timeout = 4000)
    public void test714350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        string5.equals((Object) string4);
    }

    @Test(timeout = 4000)
    public void test714385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        string5.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test714386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        string5.equals((Object) string1);
    }

    @Test(timeout = 4000)
    public void test714387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        string5.equals((Object) string3);
    }

    @Test(timeout = 4000)
    public void test714388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        string5.equals((Object) string2);
    }

    @Test(timeout = 4000)
    public void test714389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test714392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test714393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test714396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test714397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test714398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test714399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test714404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setNewLine("--");
        int int1 = helpFormatter0.getDescPadding();
        String string1 = helpFormatter0.rtrim("--");
        String string2 = helpFormatter0.getArgName();
        helpFormatter0.defaultWidth = 1959;
        String string3 = helpFormatter0.getOptPrefix();
        int int2 = helpFormatter0.findWrapPos("arg", 3, 3);
        String string4 = helpFormatter0.getArgName();
        int int3 = helpFormatter0.getDescPadding();
        String string5 = helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test724405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test724406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test724407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test724408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test724409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test724410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test724411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test724412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test724413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test724415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test724416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test724417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test724418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test724419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test724420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test724422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test724423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test724424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test724425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test724426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test724427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test724428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test724435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        MockFile mockFile0 = new MockFile("-", "usage: ");
    }

    @Test(timeout = 4000)
    public void test724436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        MockFile mockFile0 = new MockFile("-", "usage: ");
        String string0 = "Jhy'cJ$";
        MockPrintWriter mockPrintWriter0 = null;
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "Jhy'cJ$");
    }

    @Test(timeout = 4000)
    public void test734437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test734438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test734439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test734440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test734441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test734444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test734445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test734446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test734447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test734448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test734449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test734450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test734451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test734452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test734455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test734456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test734457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test734460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test734461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test734462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test734468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test734469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
    }

    @Test(timeout = 4000)
    public void test734470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test734471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test734472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test734473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test734474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test734475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.isRequired();
    }

    @Test(timeout = 4000)
    public void test734476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.getSelected();
    }

    @Test(timeout = 4000)
    public void test734477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        String string1 = "{g1";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        boolean boolean0 = false;
        options1.addOption(":(A@J4g4a", ":(A@J4g4a", false, "--");
    }

    @Test(timeout = 4000)
    public void test744478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test744479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test744480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test744481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test744482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test744483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test744485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test744487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test744488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test744489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test744490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test744491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test744492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test744493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test744494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test744495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test744496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test744497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test744499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test744501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test744502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test744503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test744504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test744505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test744506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
    }

    @Test(timeout = 4000)
    public void test744507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test744508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test744509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test744510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test744511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test744513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test744514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test744516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test744517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test744518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test744519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test744521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test744522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test744524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test744525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test744526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test744527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test744529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test744530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
    }

    @Test(timeout = 4000)
    public void test744532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
    }

    @Test(timeout = 4000)
    public void test744533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
    }

    @Test(timeout = 4000)
    public void test744534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
    }

    @Test(timeout = 4000)
    public void test744535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
    }

    @Test(timeout = 4000)
    public void test744536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
    }

    @Test(timeout = 4000)
    public void test744537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test744538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test744539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test744540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test744541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test744544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test744545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test744546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test744547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test744548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test744549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test744551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test744552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test744553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test744554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test744555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test744556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test744557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test744558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
    }

    @Test(timeout = 4000)
    public void test744559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test744560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultLongOptPrefix = "";
        String string0 = "'";
        helpFormatter0.defaultArgName = "'";
        helpFormatter0.setArgName("");
        helpFormatter0.defaultLongOptPrefix = "'";
        helpFormatter0.setDescPadding(0);
        Options options0 = new Options();
        Option option0 = null;
        option0 = new Option("-", "-");
    }

    @Test(timeout = 4000)
    public void test754561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test754562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test754563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test754564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test754565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test754566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test754567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test754568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test754569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test754570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test754571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test754572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test754573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test754574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test754575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test754576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    }

    @Test(timeout = 4000)
    public void test754577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test754578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test754579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test754580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
    }

    @Test(timeout = 4000)
    public void test754581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
    }

    @Test(timeout = 4000)
    public void test754582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
    }

    @Test(timeout = 4000)
    public void test754583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test754584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test754585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
    }

    @Test(timeout = 4000)
    public void test754586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
        byteArrayOutputStream0.flush();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test754587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
        byteArrayOutputStream0.flush();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test754588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
        byteArrayOutputStream0.flush();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test754589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        PrintStream printStream0 = mockPrintStream0.append('-');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
        byteArrayOutputStream0.flush();
        Options options0 = new Options();
        Option option0 = options0.getOption("-");
    }

    @Test(timeout = 4000)
    public void test764590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test764591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test764592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test764593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test764594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test764595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test764596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test764597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test764598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test764599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test764600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test764601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test764602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test764603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test764604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test764605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "hgN/)r_nIoK^P";
        MockPrintStream mockPrintStream0 = new MockPrintStream("hgN/)r_nIoK^P");
    }

    @Test(timeout = 4000)
    public void test764606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "hgN/)r_nIoK^P";
        MockPrintStream mockPrintStream0 = new MockPrintStream("hgN/)r_nIoK^P");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
    }

    @Test(timeout = 4000)
    public void test764607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "hgN/)r_nIoK^P";
        MockPrintStream mockPrintStream0 = new MockPrintStream("hgN/)r_nIoK^P");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 0, 3);
    }

    @Test(timeout = 4000)
    public void test764608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "hgN/)r_nIoK^P";
        MockPrintStream mockPrintStream0 = new MockPrintStream("hgN/)r_nIoK^P");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 0, 3);
    }

    @Test(timeout = 4000)
    public void test764609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "hgN/)r_nIoK^P";
        MockPrintStream mockPrintStream0 = new MockPrintStream("hgN/)r_nIoK^P");
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        int int0 = 0;
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ", 0, 3);
    }

    @Test(timeout = 4000)
    public void test774610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test774611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getNewLine();
    }

    @Test(timeout = 4000)
    public void test774612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getArgName();
    }

    @Test(timeout = 4000)
    public void test774613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getDescPadding();
    }

    @Test(timeout = 4000)
    public void test774614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getWidth();
    }

    @Test(timeout = 4000)
    public void test774615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptPrefix();
    }

    @Test(timeout = 4000)
    public void test774616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLeftPadding();
    }

    @Test(timeout = 4000)
    public void test774617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getLongOptPrefix();
    }

    @Test(timeout = 4000)
    public void test774618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getSyntaxPrefix();
    }

    @Test(timeout = 4000)
    public void test774619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test774620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test774621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test774622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test774623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test774624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
    }

    @Test(timeout = 4000)
    public void test774625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
    }

    @Test(timeout = 4000)
    public void test774626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "usage: ");
    }

    @Test(timeout = 4000)
    public void test774627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "usage: ");
    }

    @Test(timeout = 4000)
    public void test774628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "usage: ");
    }

    @Test(timeout = 4000)
    public void test774629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "usage: ");
        helpFormatter0.printHelp((String) null, options1, false);
    }

    @Test(timeout = 4000)
    public void test784630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Locale locale0 = Locale.GERMANY;
        Object[] objectArray0 = new Object[6];
        mockPrintWriter0.checkError();
        objectArray0[0] = (Object) "_J>8xxG";
        objectArray0[1] = (Object) optionGroup0;
        objectArray0[2] = (Object) " ";
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) "e7\"*nKh*WTr2Vv";
        mockPrintWriter0.printf(locale0, "arg", objectArray0);
        options0.helpOptions();
        Option option0 = new Option(" ", "7\".", true, "6PZC78@@uYO>uIL");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        options1.helpOptions();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3497, "_J>8xxG", "e7\"*nKh*WTr2Vv", options1, (-2), 3497, "c?'\"YGR4\"<zYp >", true);
    }

    @Test(timeout = 4000)
    public void test794631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.rtrim("|7]L$EZ$[\u0003\"");
        int int0 = (-2696);
        helpFormatter0.setLeftPadding((-2696));
        String string0 = "}:\\/C}";
        helpFormatter0.setLongOptPrefix("}:/C}");
        MockFile.createTempFile("-", "usage: ");
    }
}
