/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:36:54 GMT 2023
 */
package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.ZoneId;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.validation.DateValidator;
import org.junit.runner.RunWith;

public class WriteableCommandLineImplTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        String string0 = writeableCommandLineImpl0.getProperty("Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Set set0 = writeableCommandLineImpl0.getOptionTriggers();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Set set0 = writeableCommandLineImpl0.getProperties();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getOptions();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getNormalised();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.hasOption("-D");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, (Object) null);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, (Object) null);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, (Object) null);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
        list1.size();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        DateValidator dateValidator0 = DateValidator.getTimeInstance();
        LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, (-2692), (-2692), 'r', 'r', dateValidator0, (String) null, linkedList0, (-2692));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        PropertyOption propertyOption0 = new PropertyOption();
        writeableCommandLineImpl0.addValue(argumentImpl0, propertyOption0);
        propertyOption0.isRequired();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addValue(propertyOption0, (Object) null);
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        propertyOption0.getDescription();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
        boolean boolean0 = writeableCommandLineImpl0.hasOption("-D");
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList linkedList1 = (LinkedList) writeableCommandLineImpl0.getValue((Option) propertyOption0, (Object) linkedList0);
        linkedList1.size();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        LinkedList<String> linkedList1 = new LinkedList<String>(set0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList1);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("Passes properties and values to the application", "Passes properties and values to the application");
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D", "Passes properties and values to the application");
        propertyOption0.getDescription();
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("Passes properties and values to the application", "Passes properties and values to the application");
        String string0 = writeableCommandLineImpl0.getProperty((Option) propertyOption0, "-D");
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("-D", "Passes properties and values to the application");
        Set set0 = writeableCommandLineImpl0.getProperties();
        set0.size();
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-D");
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        linkedList0.add("-D");
        linkedList0.add("Passes properties and values to the application");
        String string0 = writeableCommandLineImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
        propertyOption0.isRequired();
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = Boolean.TRUE;
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
        propertyOption0.getId();
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
        propertyOption0.getId();
    }
}
