/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 19:45:10 GMT 2023
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.junit.runner.RunWith;

public class StdDateFormatTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition((-2407));
        stdDateFormat0.parseAsISO8601("ooc*|_", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Locale locale0 = Locale.ROOT;
        ParsePosition parsePosition0 = new ParsePosition((-1803));
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        stdDateFormat0.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("", "7$@{0)7d@9 2zNlqO");
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        ParsePosition parsePosition0 = new ParsePosition(1754);
        stdDateFormat0.parse("l861[", parsePosition0);
        parsePosition0.toString();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("", "7$@{0)7d@9 2zNlqO");
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        ParsePosition parsePosition0 = new ParsePosition(1754);
        stdDateFormat0.parse("l861[", parsePosition0);
        parsePosition0.getErrorIndex();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseObject(")");
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(0);
        Object object0 = stdDateFormat0.parseObject("@O+s>U,9", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = new Locale("!i~Th\"F/C6'~!KB^FU", "$\"E7XTYr", "g>.");
        Boolean boolean0 = new Boolean("$\"E7XTYr");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        stdDateFormat0.parse("RG9");
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("o#%3BL<3c(Z04");
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0._clearFormats();
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(4169);
        Date date0 = stdDateFormat0.parse("6427-11-05T15:29:00.000+0000", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.looksLikeISO8601("1582-10-15T00:00:00.000+0000");
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        boolean boolean0 = stdDateFormat0.looksLikeISO8601("");
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1242, "hH/)%o");
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = new Boolean((String) null);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1242, "hH/)%o");
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = new Boolean((String) null);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "A\"Sxk#");
        Locale locale0 = Locale.GERMANY;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        timeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        MockDate mockDate0 = new MockDate(0L);
        StringBuffer stringBuffer0 = new StringBuffer("");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        MockDate mockDate0 = new MockDate(0L);
        StringBuffer stringBuffer0 = new StringBuffer("");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1242, "hH/)%o");
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = new Boolean((String) null);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.withLocale((Locale) null);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.setTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1039);
        parsePosition0.setIndex((-921));
        stdDateFormat0.parseAsRFC1123("", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseAsRFC1123((String) null, (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        stdDateFormat0.parse("");
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        Boolean boolean0 = new Boolean((String) null);
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        stdDateFormat0.parse((String) null);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.looksLikeISO8601((String) null);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        StdDateFormat.getISO8601Format(timeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("X'ASH!O`_}4P");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(" (timezone: ");
        FieldPosition fieldPosition0 = new FieldPosition(1);
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(2274);
        stdDateFormat0.parseAsISO8601("(locale: ", parsePosition0, false);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parseAsISO8601("a/pH3WEFS ", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition((-475));
        stdDateFormat0.parse("6  LU~)n)qM", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("yyyyM-dtld");
        Locale locale0 = Locale.KOREA;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(timeZone0, locale0);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        Locale locale0 = Locale.ROOT;
        ParsePosition parsePosition0 = new ParsePosition((-1803));
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        stdDateFormat0.parseAsISO8601("RVJ>J", parsePosition0, false);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("QeJT.wQQ)J3t@");
        Boolean boolean0 = new Boolean("");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null, boolean0);
        ParsePosition parsePosition0 = new ParsePosition(4169);
        stdDateFormat0.parseAsISO8601("QeJT.wQQ)J3t@", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        ParsePosition parsePosition0 = new ParsePosition((-496));
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("6 cs 1LU~)E)qM", parsePosition0, false);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(4169);
        stdDateFormat0.parseAsISO8601("yyy-MM-d", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(4169);
        stdDateFormat0.parseAsISO8601("yyyyt$!-MM-dd", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(4169);
        stdDateFormat0.parseAsISO8601("yyyy-MM-dd", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(4130);
        stdDateFormat0.parseAsISO8601("yyyyMM-dd", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parseAsISO8601("7Ezh(E?gEOhVPD+t+", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(4169);
        stdDateFormat0.parseAsISO8601("QeJT.wQQ@)wJ3t@", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        String string0 = "EqMYMj.\\e(q+cYT";
        TimeZone timeZone0 = TimeZone.getTimeZone("EqMYMj.e(q+cYT");
        StdDateFormat.getISO8601Format(timeZone0);
        String string1 = "ooc|Z";
        ParsePosition parsePosition0 = new ParsePosition((-2407));
        stdDateFormat0.parseAsISO8601("ooc|Z", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parseAsISO8601(".000", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(4130);
        stdDateFormat0.parseAsISO8601("yyyyM-dtld", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition((-475));
        stdDateFormat0.parse("6  1LU~)mY)qM", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        String string0 = stdDateFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        String string0 = "QeJT.wQQ@)wJ3t@";
        TimeZone timeZone0 = TimeZone.getTimeZone("QeJT.wQQ@)wJ3t@");
        Boolean boolean0 = new Boolean("V");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null, boolean0);
        Locale locale0 = Locale.KOREA;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(timeZone0);
        MockDate mockDate0 = new MockDate(4169, 4169, 4169, 90, 4169);
        stdDateFormat2.instance.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition(4169);
        Boolean.compare(true, false);
        stdDateFormat0.parse("6427-11-05T15:29:00.000+0000", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2031, 10, 2031, 2031, 2031);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        String string0 = stdDateFormat0.instance.format(date0);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(0);
        Date date0 = stdDateFormat0.parse(".000", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parse("4", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("k~uQ3)");
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("G");
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("4");
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        stdDateFormat0.parse("%");
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("QeJT.wQQ@)wJ3t@");
        Boolean boolean0 = new Boolean("V");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null, boolean0);
        boolean boolean1 = stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test5255() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("yyyy-McM-d(");
        Boolean boolean0 = new Boolean("");
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Locale locale0 = Locale.FRANCE;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(timeZone0);
        Boolean.compare(true, true);
        StdDateFormat stdDateFormat3 = stdDateFormat2.clone();
        stdDateFormat0.toString();
        ParsePosition parsePosition0 = new ParsePosition(4169);
        Boolean.logicalXor(true, false);
        stdDateFormat0._timezone = timeZone0;
        stdDateFormat2.getTimeZone();
        stdDateFormat1.isLenient();
        StdDateFormat.getDefaultTimeZone();
        TimeZone.getDefault();
        stdDateFormat1.isLenient();
        stdDateFormat3.setTimeZone(stdDateFormat0._timezone);
        ParsePosition parsePosition1 = new ParsePosition(0);
        stdDateFormat1.instance.clone();
        stdDateFormat0.parseAsISO8601("yyyy-McM-d(", parsePosition1, true);
    }

    @Test(timeout = 4000)
    public void test5356() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test5457() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Date date0 = stdDateFormat0.parse("1582-10-15T00:00:00.000+0000");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test5558() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("yyy-MM-d");
        Boolean boolean0 = new Boolean("");
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Locale locale0 = Locale.KOREA;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat0._timezone = timeZone0;
        stdDateFormat1.setTimeZone(stdDateFormat0._timezone);
    }

    @Test(timeout = 4000)
    public void test5659() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test5760() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(timeZone0);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test5861() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = new Locale("g{O-t", " T4o`*n", "{>t,.=]F:Tp&^vLE");
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format(timeZone0, locale0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test5962() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat1.parse(".000", parsePosition0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        ChoiceFormat choiceFormat0 = new ChoiceFormat(".000");
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.DATE_FORMAT_RFC1123;
        DateFormat.getInstance();
        Locale.forLanguageTag(".000");
        stdDateFormat0.parseAsRFC1123(".000", parsePosition0);
        stdDateFormat0.parseAsISO8601(".000", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test6063() throws Throwable {
        Locale locale0 = Locale.ROOT;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }
}
