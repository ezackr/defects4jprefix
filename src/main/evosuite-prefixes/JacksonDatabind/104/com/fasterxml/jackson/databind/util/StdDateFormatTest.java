/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:19:02 GMT 2023
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

public class StdDateFormatTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(26);
        stdDateFormat0._parseAsISO8601("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(3);
        Date date0 = stdDateFormat0.parse("tfVvSk6", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition((-1480));
        stdDateFormat0.parse("+0000", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ParsePosition parsePosition0 = new ParsePosition((-744));
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.instance.parseObject("q79", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = new Boolean(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, false);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = new Boolean(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, false);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = new Boolean(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, false);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = new Boolean(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, false);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
        stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = new Boolean(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, false);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parseAsRFC1123("0000-00-00T00:00", parsePosition0);
        parsePosition0.getErrorIndex();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parseAsRFC1123("0000-00-00T00:00", parsePosition0);
        parsePosition0.toString();
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        ParsePosition parsePosition0 = new ParsePosition(1);
        stdDateFormat0.instance.parseAsISO8601("0000-00-00", parsePosition0);
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "");
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = Boolean.valueOf("");
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        ParsePosition parsePosition0 = new ParsePosition(11);
        Date date0 = stdDateFormat0.parse("0000-00-00", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "");
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = Boolean.valueOf("");
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        ParsePosition parsePosition0 = new ParsePosition(11);
        Date date0 = stdDateFormat0.parse("0000-00-00", parsePosition0);
        parsePosition0.toString();
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        boolean boolean0 = stdDateFormat0.looksLikeISO8601("0000-00-00T00:00");
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        boolean boolean0 = stdDateFormat0.looksLikeISO8601("0000-00-00T00:00");
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
        boolean boolean0 = stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, "UTC");
        Locale locale0 = new Locale("E`gzarSy-4'(%", "UTC");
        Boolean boolean0 = new Boolean("UTC");
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, "UTC");
        Locale locale0 = new Locale("E`gzarSy-4'(%", "UTC");
        Boolean boolean0 = new Boolean("UTC");
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, "UTC");
        Locale locale0 = new Locale("E`gzarSy-4'(%", "UTC");
        Boolean boolean0 = new Boolean("UTC");
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1385), "0000-00-00T00:00");
        Locale locale0 = Locale.KOREA;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null, false);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test1221() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1385), "0000-00-00T00:00");
        Locale locale0 = Locale.KOREA;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null, false);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1322() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "da79e/|k9Z{@Jt!", 0, 0, 0, 0, 0, 0, 810, 0, 9);
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = Boolean.valueOf(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test1323() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "da79e/|k9Z{@Jt!", 0, 0, 0, 0, 0, 0, 810, 0, 9);
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = Boolean.valueOf(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1324() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "da79e/|k9Z{@Jt!", 0, 0, 0, 0, 0, 0, 810, 0, 9);
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = Boolean.valueOf(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        Boolean boolean0 = Boolean.valueOf("{S?&Ba=2nRVl4s");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1426() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        Boolean boolean0 = Boolean.valueOf("{S?&Ba=2nRVl4s");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test1527() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
        stdDateFormat1.clone();
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1628() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        Date date0 = stdDateFormat0._parseDate("0000-00-00", (ParsePosition) null);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test1729() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1);
        Date date0 = stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test1830() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
        Locale locale0 = new Locale("3r<B)_!F");
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        Calendar calendar0 = stdDateFormat0._getCalendar(simpleTimeZone0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test1831() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
        Locale locale0 = new Locale("3r<B)_!F");
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        Calendar calendar0 = stdDateFormat0._getCalendar(simpleTimeZone0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1932() throws Throwable {
        Integer integer0 = new Integer(770);
        boolean boolean0 = StdDateFormat._equals(integer0, integer0);
    }

    @Test(timeout = 4000)
    public void test2033() throws Throwable {
        boolean boolean0 = StdDateFormat._equals("", "v2@S");
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null, boolean0);
        stdDateFormat0.withLocale((Locale) null);
    }

    @Test(timeout = 4000)
    public void test2235() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        stdDateFormat0.setTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition((-3161));
        stdDateFormat0.parseAsRFC1123("", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parseAsRFC1123((String) null, parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2538() throws Throwable {
        Locale locale0 = Locale.CHINA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        ParsePosition parsePosition0 = new ParsePosition(1);
        stdDateFormat0.instance.parseAsISO8601("cM%!M%\"icZur*TMp=\"", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.ROOT;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parseAsISO8601("", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition((-3276));
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition((-484));
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2942() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parse((String) null, parsePosition0);
    }

    @Test(timeout = 4000)
    public void test3043() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(4210);
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test3144() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "");
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = Boolean.valueOf("");
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        stdDateFormat0.parse("");
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse((String) null);
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("0000-00-00T00:00");
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.looksLikeISO8601((String) null);
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        StdDateFormat.getISO8601Format(timeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test3750() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        Locale locale0 = Locale.JAPAN;
        Boolean boolean0 = new Boolean("dddd[-]dd[-]dd[T]dd[:]dd(?:[:]dd)?(.d+)?(Z|[+-]dd(?:[:]?dd)?)?");
        StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
        stdDateFormat0._parseDate("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition((-1504));
        stdDateFormat0._parseDate("6", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1385), "0000-00-00T00:00");
        Locale locale0 = Locale.KOREA;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null, false);
        ParsePosition parsePosition0 = new ParsePosition((-1385));
        stdDateFormat0._parseAsISO8601("", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4053() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(90);
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4154() throws Throwable {
        Locale locale0 = Locale.CHINA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        stdDateFormat0._getCalendar((TimeZone) null);
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        stdDateFormat0._getCalendar(timeZone0);
    }

    @Test(timeout = 4000)
    public void test4255() throws Throwable {
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = new Boolean(true);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, true);
        MockDate mockDate0 = new MockDate(5569, 5569, 5569, 5569, 5569);
        StringBuffer stringBuffer0 = new StringBuffer("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        stdDateFormat0._format((TimeZone) null, locale0, mockDate0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test4356() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "da79e/|k9Z{@Jt!", 0, 0, 0, 0, 0, 0, 810, 0, 9);
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = Boolean.valueOf(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
        String string0 = stdDateFormat0.toPattern();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test4357() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "da79e/|k9Z{@Jt!", 0, 0, 0, 0, 0, 0, 810, 0, 9);
        Locale locale0 = Locale.CHINA;
        Boolean boolean0 = Boolean.valueOf(false);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
        String string0 = stdDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test4458() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        boolean boolean0 = stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test4559() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
        boolean boolean1 = stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
        boolean boolean1 = stdDateFormat1.isLenient();
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test4661() throws Throwable {
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = new Boolean(true);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, true);
        boolean boolean1 = stdDateFormat0.isLenient();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        Locale locale0 = Locale.ITALY;
        Boolean boolean0 = new Boolean(true);
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, true);
        boolean boolean1 = stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test4763() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Boolean boolean0 = new Boolean("$zvkX0;*v@jN{$i:");
        stdDateFormat0._lenient = boolean0;
        Boolean boolean1 = Boolean.valueOf("$zvkX0;*v@jN{$i:");
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean1);
    }

    @Test(timeout = 4000)
    public void test4864() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.JAPANESE;
        Boolean boolean0 = Boolean.valueOf("?-yuFvjQvh>G,");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        ParsePosition parsePosition0 = new ParsePosition(1);
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4965() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.instance._parseAsISO8601("", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test5066() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test5167() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-22), "$zvkX0;*v@jN{$i:");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition((-22));
        stdDateFormat0._parseDate("1969-12-31T23:59:59.506-0000", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test5268() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
        Locale locale0 = new Locale("3r<B)_!F");
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        stdDateFormat0.looksLikeISO8601("1q.76CH;&YeR(]cmJ");
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test5269() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
        Locale locale0 = new Locale("3r<B)_!F");
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        stdDateFormat0.looksLikeISO8601("1q.76CH;&YeR(]cmJ");
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test5370() throws Throwable {
        Boolean boolean0 = Boolean.valueOf(true);
        ParsePosition parsePosition0 = new ParsePosition(14);
        Locale locale0 = Locale.FRANCE;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, true);
        stdDateFormat0._parseDate("3?#X{GZH", parsePosition0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test5471() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test5472() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test5573() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        DateFormat dateFormat0 = DateFormat.getDateInstance();
        boolean boolean0 = stdDateFormat0.equals(dateFormat0);
    }

    @Test(timeout = 4000)
    public void test5574() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        DateFormat dateFormat0 = DateFormat.getDateInstance();
        boolean boolean0 = stdDateFormat0.equals(dateFormat0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test5675() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        String string0 = stdDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test5876() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
        Locale locale0 = new Locale("3r<B)_!F");
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("1q.76CH;&YeR(]cmJ");
        stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test5877() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
        Locale locale0 = new Locale("3r<B)_!F");
        Boolean boolean0 = Boolean.FALSE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("1q.76CH;&YeR(]cmJ");
        stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test5978() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-22), "$zvkX0;*v@jN{$i:");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
        MockDate mockDate0 = new MockDate((-472L));
        StringBuffer stringBuffer0 = new StringBuffer(34);
        stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test6079() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StringWriter stringWriter0 = new StringWriter(0);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        stdDateFormat0.instance.format((Date) null, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test6180() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.parse("6", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test6281() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.instance.parseObject("0000-i00-00", parsePosition0);
        parsePosition0.getErrorIndex();
    }

    @Test(timeout = 4000)
    public void test6282() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.instance.parseObject("0000-i00-00", parsePosition0);
        parsePosition0.toString();
    }

    @Test(timeout = 4000)
    public void test6383() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0._parseDate("", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test6484() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA_FRENCH;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        stdDateFormat0.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test6585() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA_FRENCH;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        FieldPosition fieldPosition0 = new FieldPosition(88);
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test6686() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.setLenient(true);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test6687() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.setLenient(true);
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test6788() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        Locale locale0 = Locale.forLanguageTag("");
        Boolean boolean0 = Boolean.valueOf(true);
        StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
        stdDateFormat0.setLenient(true);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test6789() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        Locale locale0 = Locale.forLanguageTag("");
        Boolean boolean0 = Boolean.valueOf(true);
        StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
        stdDateFormat0.setLenient(true);
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test6890() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        stdDateFormat0.instance.setTimeZone(timeZone0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test6991() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA_FRENCH;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        stdDateFormat0.setTimeZone(timeZone0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test7092() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(stdDateFormat0._lenient);
    }

    @Test(timeout = 4000)
    public void test7193() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA_FRENCH;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test7194() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA_FRENCH;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
    }

    @Test(timeout = 4000)
    public void test7295() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA_FRENCH;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test7296() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA_FRENCH;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test7397() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test7398() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test7499() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.JAPANESE;
        Boolean boolean0 = Boolean.valueOf("?-yuFvjQvh>G,");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        TimeZone timeZone1 = TimeZone.getDefault();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone1);
    }

    @Test(timeout = 4000)
    public void test74100() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.JAPANESE;
        Boolean boolean0 = Boolean.valueOf("?-yuFvjQvh>G,");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        TimeZone timeZone1 = TimeZone.getDefault();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone1);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test74101() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.JAPANESE;
        Boolean boolean0 = Boolean.valueOf("?-yuFvjQvh>G,");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
        TimeZone timeZone1 = TimeZone.getDefault();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone1);
        stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test75102() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test75103() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test76104() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.hashCode();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test77105() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test78106() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        Locale locale0 = Locale.US;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format(zoneInfo0, locale0);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test79107() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        Locale locale0 = Locale.forLanguageTag("");
        Boolean boolean0 = Boolean.valueOf(true);
        StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
        stdDateFormat0._clearFormats();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test80108() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "da79e/|k9Z{@Jt!", 0, 0, 0, 0, 0, 0, 810, 0, 9);
        Locale locale0 = Locale.CHINA;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(simpleTimeZone0, locale0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test81109() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test81110() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test82111() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        String string0 = stdDateFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test82112() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        String string0 = stdDateFormat0.toString();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test83113() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        stdDateFormat0.parse("0000-00-00");
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test83114() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        stdDateFormat0.parse("0000-00-00");
        stdDateFormat0.isLenient();
    }
}
