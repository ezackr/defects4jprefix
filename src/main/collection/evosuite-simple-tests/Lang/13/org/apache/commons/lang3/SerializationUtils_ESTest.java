/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:14:16 GMT 2023
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Serializable;
import java.security.UnresolvedPermission;
import java.security.cert.Certificate;
import java.util.Locale;
import org.apache.commons.lang3.SerializationUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SerializationUtils_ESTest extends SerializationUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1982);
        SerializationUtils.serialize((Serializable) (byte) 117, (OutputStream) bufferedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = SerializationUtils.serialize((Serializable) null);
        Object object0 = SerializationUtils.deserialize(byteArray0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Certificate[] certificateArray0 = new Certificate[8];
        UnresolvedPermission unresolvedPermission0 = new UnresolvedPermission("W(", "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream", "W(", certificateArray0);
        // Undeclared exception!
        try {
            SerializationUtils.serialize((Serializable) unresolvedPermission0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.security.UnresolvedPermission", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[1];
        // Undeclared exception!
        try {
            SerializationUtils.deserialize(byteArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.io.EOFException
            //
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
        // Undeclared exception!
        try {
            SerializationUtils.deserialize((InputStream) bufferedInputStream0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.io.IOException: Stream closed
            //
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = SerializationUtils.serialize((Serializable) (byte) 126);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        SerializationUtils.ClassLoaderAwareObjectInputStream serializationUtils_ClassLoaderAwareObjectInputStream0 = new SerializationUtils.ClassLoaderAwareObjectInputStream(byteArrayInputStream0, classLoader0);
        // Undeclared exception!
        try {
            serializationUtils_ClassLoaderAwareObjectInputStream0.resolveClass((ObjectStreamClass) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        // Undeclared exception!
        try {
            SerializationUtils.deserialize((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The byte[] must not be null
            //
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        // Undeclared exception!
        try {
            SerializationUtils.deserialize((InputStream) dataInputStream0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.DataInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        // Undeclared exception!
        try {
            SerializationUtils.deserialize((InputStream) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The InputStream must not be null
            //
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Integer integer0 = new Integer((-1));
        byte[] byteArray0 = SerializationUtils.serialize((Serializable) integer0);
        Object object0 = SerializationUtils.deserialize(byteArray0);
        assertTrue(object0.equals((Object) integer0));
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        // Undeclared exception!
        try {
            SerializationUtils.serialize((Serializable) null, (OutputStream) pipedOutputStream0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.io.IOException: Pipe not connected
            //
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        // Undeclared exception!
        try {
            SerializationUtils.serialize((Serializable) locale_FilteringMode0, (OutputStream) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The OutputStream must not be null
            //
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Integer integer0 = SerializationUtils.clone((Integer) null);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SerializationUtils serializationUtils0 = new SerializationUtils();
        Object[] objectArray0 = new Object[16];
        objectArray0[2] = (Object) serializationUtils0;
        File file0 = MockFile.createTempFile("7Lky+ g.rE6v,k", "7Lky+ g.rE6v,k");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        // Undeclared exception!
        try {
            SerializationUtils.serialize((Serializable) objectArray0, (OutputStream) mockPrintStream0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.io.NotSerializableException: org.apache.commons.lang3.SerializationUtils
            //
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Integer integer0 = new Integer((-1));
        Integer integer1 = SerializationUtils.clone(integer0);
        assertEquals((-1), (int) integer1);
    }
}
