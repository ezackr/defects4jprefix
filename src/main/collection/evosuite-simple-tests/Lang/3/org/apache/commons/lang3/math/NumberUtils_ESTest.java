/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:50:24 GMT 2023
 */
package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        short short0 = NumberUtils.max((short) (byte) 0, (short) (-267), (short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        int int0 = NumberUtils.max(1773, 8, (-4289));
        assertEquals(1773, int0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        long long0 = NumberUtils.max(0L, 0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        long long0 = NumberUtils.max(1L, 0L, 0L);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        short short0 = NumberUtils.min((short) 0, (short) 0, (short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        short short0 = NumberUtils.min((short) 0, (short) 86, (short) 86);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        int int0 = NumberUtils.min(0, (-2303), (-2303));
        assertEquals((-2303), int0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        long long0 = NumberUtils.min(0L, 0L, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        long long0 = NumberUtils.min((-1042L), (-1042L), (-1718L));
        assertEquals((-1718L), long0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        int[] intArray0 = new int[5];
        intArray0[0] = (int) (short) 76;
        int int0 = NumberUtils.max(intArray0);
        assertEquals(76, int0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        long[] longArray0 = new long[8];
        longArray0[1] = (-1534L);
        long long0 = NumberUtils.max(longArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[1] = (byte) (-51);
        byte byte0 = NumberUtils.min(byteArray0);
        assertEquals((byte) (-51), byte0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        short short0 = NumberUtils.toShort("%.J^M#DI@yl\"o^", (short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        short short0 = NumberUtils.toShort("-7");
        assertEquals((short) (-7), short0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        long long0 = NumberUtils.toLong("'&;V0%Jd}BE$.w", (-1L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        long long0 = NumberUtils.toLong("8");
        assertEquals(8L, long0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        int int0 = NumberUtils.toInt("", 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        int int0 = NumberUtils.toInt("),J|V", 1075);
        assertEquals(1075, int0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        float float0 = NumberUtils.toFloat(">^(D`^eJPu@", (-3172.517F));
        assertEquals((-3172.517F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        double double0 = NumberUtils.toDouble(":/C}", (-2437.57933038));
        assertEquals((-2437.57933038), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        byte byte0 = NumberUtils.toByte("", (byte) (-33));
        assertEquals((byte) (-33), byte0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        byte byte0 = NumberUtils.toByte("-7");
        assertEquals((byte) (-7), byte0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        short[] shortArray0 = new short[1];
        shortArray0[0] = (short) 803;
        short short0 = NumberUtils.min(shortArray0);
        assertEquals((short) 803, short0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        short[] shortArray0 = new short[4];
        shortArray0[0] = (short) (byte) numberUtils0.BYTE_MINUS_ONE;
        short short0 = NumberUtils.min(shortArray0);
        assertEquals((short) (-1), short0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        long[] longArray0 = new long[3];
        longArray0[0] = (long) (byte) 39;
        longArray0[1] = (long) 39;
        longArray0[2] = (long) (byte) 39;
        long long0 = NumberUtils.min(longArray0);
        assertEquals(39L, long0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        long[] longArray0 = new long[2];
        longArray0[0] = (long) (byte) (-7);
        long long0 = NumberUtils.min(longArray0);
        assertEquals((-7L), long0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        int[] intArray0 = new int[7];
        intArray0[0] = (int) (short) 2022;
        intArray0[1] = (int) (short) 2022;
        intArray0[2] = (int) (short) 2022;
        intArray0[3] = (int) (short) 2022;
        intArray0[4] = (int) (short) 2022;
        intArray0[5] = (int) (short) 2022;
        intArray0[6] = (int) (short) 2022;
        int int0 = NumberUtils.min(intArray0);
        assertEquals(2022, int0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        int[] intArray0 = new int[3];
        intArray0[0] = (int) (short) numberUtils0.SHORT_MINUS_ONE;
        int int0 = NumberUtils.min(intArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        float[] floatArray0 = new float[2];
        floatArray0[0] = 2178.5F;
        floatArray0[1] = 1.0F;
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (double) (short) 2420;
        doubleArray0[1] = (double) (short) 76;
        doubleArray0[2] = (double) (short) 2420;
        doubleArray0[3] = (double) (short) 2420;
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(76.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
        byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
        byte byte0 = NumberUtils.min(byteArray0);
        assertEquals((byte) 1, byte0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        short short0 = NumberUtils.min((short) 762, (short) 0, (short) 76);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        long long0 = NumberUtils.min(0L, 1L, (long) (short) 2022);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        long long0 = NumberUtils.min((long) (byte) 93, 2087L, 660L);
        assertEquals(93L, long0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        int int0 = NumberUtils.min(0, 0, 1191);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        float float0 = NumberUtils.min(974.7024F, 679.0647F, 679.0647F);
        assertEquals(679.0647F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        float float0 = NumberUtils.min((-4170.07F), (-4170.07F), 859.0F);
        assertEquals((-4170.07F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        double double0 = NumberUtils.min((double) 1.0F, (double) 1.0F, (double) 1.0F);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        double double0 = NumberUtils.min(1831.9964283, (-234.46364), 1831.9964283);
        assertEquals((-234.46364), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 39, (byte) 39, (byte) 39);
        assertEquals((byte) 39, byte0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        short[] shortArray0 = new short[1];
        shortArray0[0] = (short) (-635);
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) (-635), short0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (long) (short) 76;
        long long0 = NumberUtils.max(longArray0);
        assertEquals(76L, long0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-691L);
        long long0 = NumberUtils.max(longArray0);
        assertEquals((-691L), long0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = (-1);
        int int0 = NumberUtils.max(intArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        float[] floatArray0 = new float[5];
        floatArray0[0] = (float) numberUtils0.FLOAT_ONE;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        float[] floatArray0 = new float[2];
        floatArray0[0] = (-1.0F);
        floatArray0[1] = (-1.0F);
        float float0 = NumberUtils.max(floatArray0);
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) (short) numberUtils0.SHORT_ONE;
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) (short) (-925);
        doubleArray0[1] = (-1.0);
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) 36;
        byte byte0 = NumberUtils.max(byteArray0);
        assertEquals((byte) 36, byte0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) (-7);
        byte byte0 = NumberUtils.max(byteArray0);
        assertEquals((byte) (-7), byte0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        short short0 = NumberUtils.max((short) (-1), (short) (-1), (short) 0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        short short0 = NumberUtils.max((short) (-1749), (short) (byte) (-71), (short) (byte) (-71));
        assertEquals((short) (-71), short0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        long long0 = NumberUtils.max((-2574L), (-2574L), (-1L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        int int0 = NumberUtils.max((int) (byte) (-69), 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        float float0 = NumberUtils.max(0.0F, 0.0F, (-3004.806F));
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        float float0 = NumberUtils.max((-1.0F), (-1.0F), (-1.0F));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        double double0 = NumberUtils.max(3834.953739427214, 0.0, 710.875217);
        assertEquals(3834.953739427214, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        double double0 = NumberUtils.max((double) (-1483L), (-5807.7), (-5807.7));
        assertEquals((-1483.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-69), (byte) (-69), (byte) (-69));
        assertEquals((byte) (-69), byte0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        Number number0 = NumberUtils.createNumber("0");
        assertEquals(0, number0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        Long long0 = NumberUtils.createLong("0");
        assertEquals(0L, (long) long0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        Integer integer0 = NumberUtils.createInteger("0");
        assertEquals(0, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        Integer integer0 = NumberUtils.createInteger("8");
        assertEquals(8, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        Float float0 = NumberUtils.createFloat("0");
        assertEquals(0.0F, (float) float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
        assertEquals((byte) 0, bigDecimal0.byteValue());
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((long[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((int[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.min((byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            NumberUtils.max(intArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((float[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((double[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            NumberUtils.max(byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createBigDecimal("1m`JpWR");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createBigInteger("Dg`1U");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"Dg`1U\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createBigInteger("-#-");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Zero length BigInteger
            //
            verifyException("java.math.BigInteger", e);
        }
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createLong("&}j>4?g+\"<");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"&}j>4?g+\"<\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createInteger("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Zero length string
            //
            verifyException("java.lang.Integer", e);
        }
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createDouble("yAG(;w");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createFloat("org.apache.commons.lang3.math.NumberUtils");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        short short0 = NumberUtils.toShort((String) null, (short) 2022);
        assertEquals((short) 2022, short0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        short short0 = NumberUtils.toShort("aW+na=fT}2ru86SS1", (short) (byte) (-114));
        assertEquals((short) (-114), short0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        byte byte0 = NumberUtils.toByte("", (byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        byte byte0 = NumberUtils.toByte((String) null, (byte) 81);
        assertEquals((byte) 81, byte0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null, (double) (short) 0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        double double0 = NumberUtils.toDouble("|=cMEo\n`&r_a/aeEs`", 1.0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null, 354.7F);
        assertEquals(354.7F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        long long0 = NumberUtils.toLong("kxuF%msTz5kUs", 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        int int0 = NumberUtils.toInt("S3rSTSZ=%s", (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        int int0 = NumberUtils.toInt((String) null, (-5322));
        assertEquals((-5322), int0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("F");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-f");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0X");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("eKti!");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("...");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x-#");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x0");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0.2EL/lUA<52R%dj*oi5");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(")]fjo;OJj}O7W");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0xq1gK5~eH");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(".");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("00");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("e");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 0, (byte) (-14), (byte) (-14));
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-76), (byte) (-35), (byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 0, (byte) 0, (byte) 17);
        assertEquals((byte) 17, byte0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        short short0 = NumberUtils.max((short) 76, (short) 2022, (short) 0);
        assertEquals((short) 2022, short0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        int int0 = NumberUtils.max((-2354), (-2354), (-1684));
        assertEquals((-1684), int0);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        long long0 = NumberUtils.max((-603L), 0L, 1208L);
        assertEquals(1208L, long0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 0, (byte) (-128), (byte) 0);
        assertEquals((byte) (-128), byte0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 6, (byte) 36, (byte) 0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        short short0 = NumberUtils.min((short) 1679, (short) (-2099), (short) 1);
        assertEquals((short) (-2099), short0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        short short0 = NumberUtils.min((short) 1679, (short) 1679, (short) 35);
        assertEquals((short) 35, short0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        int int0 = NumberUtils.min(70, 5, 3);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        int int0 = NumberUtils.min(830, 1972, 1972);
        assertEquals(830, int0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        long long0 = NumberUtils.min(3644L, 1920L, (-1L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            NumberUtils.max(longArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array cannot be empty.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.max((short[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        float[] floatArray0 = new float[7];
        floatArray0[0] = (float) (byte) numberUtils0.BYTE_MINUS_ONE;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[2] = Float.NaN;
        float float0 = NumberUtils.max(floatArray0);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = Double.NaN;
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        double[] doubleArray0 = new double[7];
        double double0 = NumberUtils.max(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) (-23);
        byte byte0 = NumberUtils.max(byteArray0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        short[] shortArray0 = new short[9];
        shortArray0[4] = (short) 100;
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) 100, short0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        short[] shortArray0 = new short[4];
        short short0 = NumberUtils.max(shortArray0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 1350;
        int int0 = NumberUtils.max(intArray0);
        assertEquals(1350, int0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = NumberUtils.max(intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        long[] longArray0 = new long[8];
        longArray0[0] = (-1L);
        long long0 = NumberUtils.max(longArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        float[] floatArray0 = new float[8];
        floatArray0[2] = (float) (-2354);
        float float0 = NumberUtils.min(floatArray0);
        assertEquals((-2354.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        float[] floatArray0 = new float[9];
        floatArray0[1] = Float.NaN;
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        float[] floatArray0 = new float[8];
        float float0 = NumberUtils.min(floatArray0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = (-230.3166676145615);
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals((-230.3166676145615), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[2] = Double.NaN;
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        double[] doubleArray0 = new double[8];
        double double0 = NumberUtils.min(doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byte byte0 = NumberUtils.min(byteArray0);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        short[] shortArray0 = new short[4];
        shortArray0[0] = (short) 4155;
        short short0 = NumberUtils.min(shortArray0);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        int[] intArray0 = new int[22];
        intArray0[0] = 97;
        int int0 = NumberUtils.min(intArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        long[] longArray0 = new long[2];
        longArray0[0] = 2093L;
        long long0 = NumberUtils.min(longArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        try {
            NumberUtils.createNumber("--.");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // --. is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createBigDecimal("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // A blank string is not a valid number
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
        assertNull(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger("-0");
        assertEquals((short) 0, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
        assertEquals((byte) 0, bigInteger0.byteValue());
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createBigInteger("-0x#SFI0Lx|Ds");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"#SF\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        // Undeclared exception!
        try {
            NumberUtils.createBigInteger("-0X");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"X\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
        assertNull(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        Long long0 = NumberUtils.createLong((String) null);
        assertNull(long0);
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        Integer integer0 = NumberUtils.createInteger((String) null);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        Double double0 = NumberUtils.createDouble((String) null);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        Float float0 = NumberUtils.createFloat((String) null);
        assertNull(float0);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        try {
            NumberUtils.createNumber("fiqivQG~Ob6,y4");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"fiqiv\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        try {
            NumberUtils.createNumber(".,NH[{~R}rt|d");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // .,NH[{~R}rt|d is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        try {
            NumberUtils.createNumber("e");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // e is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        try {
            NumberUtils.createNumber("Minimum abbreviation width with offset is 7");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.math.BigDecimal", e);
        }
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        try {
            NumberUtils.createNumber("Strings must not be null");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // Strings must not be null is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        try {
            NumberUtils.createNumber(" is not a valid number.");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            //  is not a valid number. is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        try {
            NumberUtils.createNumber(".1yKs5~eH");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // .1yKs5~eH is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        try {
            NumberUtils.createNumber("0X");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        try {
            NumberUtils.createNumber("#Minimum abbreviation width with offset is 7");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"M\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        try {
            NumberUtils.createNumber("-");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // - is not a valid number.
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        try {
            NumberUtils.createNumber("");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // A blank string is not a valid number
            //
            verifyException("org.apache.commons.lang3.math.NumberUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        Number number0 = NumberUtils.createNumber((String) null);
        assertNull(number0);
    }

    @Test(timeout = 4000)
    public void test169169() throws Throwable {
        try {
            NumberUtils.createNumber("#SFI0Lx|Ds");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"SFI0Lx|Ds\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test170170() throws Throwable {
        short short0 = NumberUtils.toShort((String) null);
        assertEquals((short) 0, short0);
    }

    @Test(timeout = 4000)
    public void test171171() throws Throwable {
        byte byte0 = NumberUtils.toByte((String) null);
        assertEquals((byte) 0, byte0);
    }

    @Test(timeout = 4000)
    public void test172172() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test173173() throws Throwable {
        float float0 = NumberUtils.toFloat("", (float) (byte) 0);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test174174() throws Throwable {
        long long0 = NumberUtils.toLong((String) null, 138L);
        assertEquals(138L, long0);
    }

    @Test(timeout = 4000)
    public void test175175() throws Throwable {
        int int0 = NumberUtils.toInt("0x0");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test176176() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test177177() throws Throwable {
        long long0 = NumberUtils.toLong("/*d)PeVz^xY");
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test178178() throws Throwable {
        double double0 = NumberUtils.max((-130.79717522647167), (-3022.088589394), 0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test179179() throws Throwable {
        double double0 = NumberUtils.min((double) 2022, 0.0, 1378.49288319921);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test180180() throws Throwable {
        float float0 = NumberUtils.min((float) (byte) 0, (float) (byte) 0, 0.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test181181() throws Throwable {
        float float0 = NumberUtils.max(1247.4F, (-1.0F), (-1.0F));
        assertEquals(1247.4F, float0, 0.01F);
    }
}
