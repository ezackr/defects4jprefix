/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:08:36 GMT 2023
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        byte[] byteArray0 = new byte[5];
        // Undeclared exception!
        try {
            ArrayUtils.remove(byteArray0, (int) (byte) 5);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 5, Length: 5
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        float[] floatArray0 = new float[8];
        int int0 = ArrayUtils.indexOf(floatArray0, (-1539.0F), 1352);
        assertEquals(8, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        float[] floatArray0 = new float[8];
        int int0 = ArrayUtils.indexOf(floatArray0, (-1539.0F), 1352);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0039() throws Throwable {
        float[] floatArray0 = new float[8];
        int int0 = ArrayUtils.indexOf(floatArray0, (-1539.0F), 1352);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test00410() throws Throwable {
        double[] doubleArray0 = new double[5];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1985, 0.0);
        assertEquals(5, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test00411() throws Throwable {
        double[] doubleArray0 = new double[5];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1985, 0.0);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test00412() throws Throwable {
        double[] doubleArray0 = new double[5];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1985, 0.0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test00513() throws Throwable {
        double[] doubleArray0 = new double[1];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1);
        assertEquals(1, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test00514() throws Throwable {
        double[] doubleArray0 = new double[1];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test00515() throws Throwable {
        double[] doubleArray0 = new double[1];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1);
        assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test00616() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test00617() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test00618() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test00719() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 3751, (-1.0));
        assertEquals(4, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test00720() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 3751, (-1.0));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test00721() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 3751, (-1.0));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test00822() throws Throwable {
        byte[] byteArray0 = new byte[9];
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-100), 2022);
        assertEquals(9, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test00823() throws Throwable {
        byte[] byteArray0 = new byte[9];
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-100), 2022);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test00824() throws Throwable {
        byte[] byteArray0 = new byte[9];
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-100), 2022);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test00925() throws Throwable {
        char[] charArray0 = new char[6];
        charArray0[1] = 'u';
        int int0 = ArrayUtils.lastIndexOf(charArray0, '\"', 4586);
        assertEquals(6, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test00926() throws Throwable {
        char[] charArray0 = new char[6];
        charArray0[1] = 'u';
        int int0 = ArrayUtils.lastIndexOf(charArray0, '\"', 4586);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test00927() throws Throwable {
        char[] charArray0 = new char[6];
        charArray0[1] = 'u';
        int int0 = ArrayUtils.lastIndexOf(charArray0, '\"', 4586);
        assertArrayEquals(new char[] { '\u0000', 'u', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test01028() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        boolean boolean0 = ArrayUtils.contains(charArray0, '@');
        assertEquals(1, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test01029() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        boolean boolean0 = ArrayUtils.contains(charArray0, '@');
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01030() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        boolean boolean0 = ArrayUtils.contains(charArray0, '@');
        assertArrayEquals(new char[] { 'j' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test01131() throws Throwable {
        char[] charArray0 = new char[1];
        int int0 = ArrayUtils.indexOf(charArray0, '+', 551);
        assertEquals(1, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test01132() throws Throwable {
        char[] charArray0 = new char[1];
        int int0 = ArrayUtils.indexOf(charArray0, '+', 551);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01133() throws Throwable {
        char[] charArray0 = new char[1];
        int int0 = ArrayUtils.indexOf(charArray0, '+', 551);
        assertArrayEquals(new char[] { '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test01234() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[2] = (short) 3693;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 48);
        assertEquals(7, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test01235() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[2] = (short) 3693;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 48);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01236() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[2] = (short) 3693;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 48);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 3693, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test01337() throws Throwable {
        int[] intArray0 = new int[3];
        int int0 = ArrayUtils.indexOf(intArray0, 0, 3847);
        assertEquals(3, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test01338() throws Throwable {
        int[] intArray0 = new int[3];
        int int0 = ArrayUtils.indexOf(intArray0, 0, 3847);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01339() throws Throwable {
        int[] intArray0 = new int[3];
        int int0 = ArrayUtils.indexOf(intArray0, 0, 3847);
        assertArrayEquals(new int[] { 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test01440() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        ArrayUtils.reverse(booleanArray0);
        assertEquals(7, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test01441() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        ArrayUtils.reverse(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test01542() throws Throwable {
        float[] floatArray0 = new float[2];
        ArrayUtils.reverse(floatArray0);
        assertEquals(2, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test01543() throws Throwable {
        float[] floatArray0 = new float[2];
        ArrayUtils.reverse(floatArray0);
        assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test01644() throws Throwable {
        double[] doubleArray0 = new double[8];
        ArrayUtils.reverse(doubleArray0);
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test01645() throws Throwable {
        double[] doubleArray0 = new double[8];
        ArrayUtils.reverse(doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01746() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ArrayUtils.reverse(byteArray0);
        assertEquals(2, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test01747() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ArrayUtils.reverse(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test01848() throws Throwable {
        char[] charArray0 = new char[3];
        ArrayUtils.reverse(charArray0);
        assertEquals(3, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test01849() throws Throwable {
        char[] charArray0 = new char[3];
        ArrayUtils.reverse(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test01950() throws Throwable {
        short[] shortArray0 = new short[0];
        ArrayUtils.reverse(shortArray0);
        assertEquals(0, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test01951() throws Throwable {
        short[] shortArray0 = new short[0];
        ArrayUtils.reverse(shortArray0);
        assertArrayEquals(new short[] {}, shortArray0);
    }

    @Test(timeout = 4000)
    public void test02052() throws Throwable {
        int[] intArray0 = new int[0];
        ArrayUtils.reverse(intArray0);
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test02053() throws Throwable {
        int[] intArray0 = new int[0];
        ArrayUtils.reverse(intArray0);
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test02154() throws Throwable {
        long[] longArray0 = new long[3];
        ArrayUtils.reverse(longArray0);
        assertEquals(3, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test02155() throws Throwable {
        long[] longArray0 = new long[3];
        ArrayUtils.reverse(longArray0);
        assertArrayEquals(new long[] { 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test02256() throws Throwable {
        Object[] objectArray0 = new Object[2];
        ArrayUtils.reverse(objectArray0);
        assertEquals(2, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test02357() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test02358() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertEquals(6, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test02359() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertEquals(8, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test02360() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test02361() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test02362() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertFalse(booleanArray0.equals((Object) booleanArray1));
    }

    @Test(timeout = 4000)
    public void test02363() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test02364() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02365() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test02366() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        boolean[] booleanArray1 = new boolean[8];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false, false, false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test02467() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertEquals(5, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test02468() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertEquals(5, shortArray2.length);
    }

    @Test(timeout = 4000)
    public void test02469() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertNotSame(shortArray2, shortArray0);
    }

    @Test(timeout = 4000)
    public void test02470() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertNotNull(shortArray2);
    }

    @Test(timeout = 4000)
    public void test02471() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertFalse(shortArray2.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test02472() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray2);
    }

    @Test(timeout = 4000)
    public void test02473() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertEquals(3, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test02474() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertEquals(5, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test02475() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertEquals(5, shortArray2.length);
    }

    @Test(timeout = 4000)
    public void test02476() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertNotSame(shortArray0, shortArray2);
    }

    @Test(timeout = 4000)
    public void test02477() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertNotSame(shortArray2, shortArray0);
    }

    @Test(timeout = 4000)
    public void test02478() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertFalse(shortArray0.equals((Object) shortArray2));
    }

    @Test(timeout = 4000)
    public void test02479() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertFalse(shortArray2.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test02480() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02481() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test02482() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray2);
    }

    @Test(timeout = 4000)
    public void test02583() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertEquals(2, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test02584() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test02585() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test02586() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test02587() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test02588() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test02589() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertTrue(Arrays.equals(new boolean[] { false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test02590() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test02691() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertEquals(7, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test02692() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test02693() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test02694() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test02695() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test02696() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test02697() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test02698() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test02799() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertEquals(1, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test027100() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test027101() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test027102() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test027103() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test027104() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test027105() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertArrayEquals(new float[] { 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test027106() throws Throwable {
        float[] floatArray0 = new float[1];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
        assertArrayEquals(new float[] {}, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test028107() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test028108() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test028109() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test028110() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test028111() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test028112() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test028113() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test028114() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
        assertArrayEquals(new double[] {}, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test029115() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test029116() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test029117() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test029118() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test029119() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test029120() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test029121() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test029122() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
        assertArrayEquals(new double[] {}, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test030123() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        assertNotNull(short0);
    }

    @Test(timeout = 4000)
    public void test030124() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        assertEquals((short) 1588, (short) short0);
    }

    @Test(timeout = 4000)
    public void test030125() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertEquals(5, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test030126() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertEquals(2, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test030127() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test030128() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test030129() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test030130() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test030131() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test030132() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test030133() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        short short1 = (short) 2;
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
        assertArrayEquals(new byte[] {}, byteArray1);
    }

    @Test(timeout = 4000)
    public void test031134() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertEquals(2, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test031135() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertEquals(0, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test031136() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test031137() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test031138() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test031139() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test031140() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertArrayEquals(new char[] { '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test031141() throws Throwable {
        char[] charArray0 = new char[2];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
        assertArrayEquals(new char[] {}, charArray1);
    }

    @Test(timeout = 4000)
    public void test032142() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertEquals(0, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test032143() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test032144() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test032145() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test032146() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test032147() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test032148() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertArrayEquals(new short[] {}, shortArray0);
    }

    @Test(timeout = 4000)
    public void test032149() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
        assertArrayEquals(new short[] {}, shortArray1);
    }

    @Test(timeout = 4000)
    public void test033150() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertEquals(8, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test033151() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test033152() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test033153() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test033154() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test033155() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test033156() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test033157() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
        assertArrayEquals(new short[] {}, shortArray1);
    }

    @Test(timeout = 4000)
    public void test034158() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test034159() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test034160() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test034161() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test034162() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test034163() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test034164() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test034165() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
        assertArrayEquals(new int[] {}, intArray1);
    }

    @Test(timeout = 4000)
    public void test035166() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertEquals(0, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test035167() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test035168() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test035169() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test035170() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test035171() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test035172() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertArrayEquals(new long[] {}, longArray0);
    }

    @Test(timeout = 4000)
    public void test035173() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
        assertArrayEquals(new long[] {}, longArray1);
    }

    @Test(timeout = 4000)
    public void test036174() throws Throwable {
        String string0 = ArrayUtils.toString((Object) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test036175() throws Throwable {
        String string0 = ArrayUtils.toString((Object) null);
        assertEquals("{}", string0);
    }

    @Test(timeout = 4000)
    public void test037176() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertEquals(1, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test037177() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test037178() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test037179() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test037180() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test037181() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test037182() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertArrayEquals(new short[] { (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test037183() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
        assertArrayEquals(new short[] {}, shortArray1);
    }

    @Test(timeout = 4000)
    public void test038184() throws Throwable {
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test038185() throws Throwable {
        Object object0 = new Object();
        Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, object0);
        assertNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test039186() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertEquals(3, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test039187() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertEquals(2, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test039188() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test039189() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test039190() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test039191() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test039192() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertArrayEquals(new long[] { 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test039193() throws Throwable {
        long[] longArray0 = new long[3];
        long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
        assertArrayEquals(new long[] { 0L, 0L }, longArray1);
    }

    @Test(timeout = 4000)
    public void test040194() throws Throwable {
        int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-159));
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test041195() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test041196() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test041197() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test041198() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test041199() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test041200() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test041201() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test041202() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
        assertArrayEquals(new int[] {}, intArray1);
    }

    @Test(timeout = 4000)
    public void test042203() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertEquals(0, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test042204() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test042205() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test042206() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test042207() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test042208() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test042209() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertArrayEquals(new float[] {}, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test042210() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
        assertArrayEquals(new float[] {}, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test043211() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
    }

    @Test(timeout = 4000)
    public void test043212() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        assertNotNull(arrayUtils0);
    }

    @Test(timeout = 4000)
    public void test043213() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-32));
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test043214() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-32));
        assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
    }

    @Test(timeout = 4000)
    public void test043215() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-32));
        assertNotNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test043216() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-32));
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test044217() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertEquals(8, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test044218() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertEquals(7, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test044219() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test044220() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test044221() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test044222() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test044223() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test044224() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test045225() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertEquals(1, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test045226() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test045227() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test045228() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test045229() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test045230() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test045231() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertArrayEquals(new short[] { (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test045232() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
        assertArrayEquals(new short[] {}, shortArray1);
    }

    @Test(timeout = 4000)
    public void test046233() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
        assertEquals(6, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test046234() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
        assertEquals(5, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test046235() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
        assertNotSame(stringArray0, stringArray1);
    }

    @Test(timeout = 4000)
    public void test046236() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
        assertNotSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test046237() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
        assertNotNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test046238() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
        assertFalse(stringArray1.equals((Object) stringArray0));
    }

    @Test(timeout = 4000)
    public void test047239() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertEquals(4, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test047240() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertEquals(3, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test047241() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test047242() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test047243() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test047244() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test047245() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test047246() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = ArrayUtils.remove(longArray0, 0);
        assertArrayEquals(new long[] { 0L, 0L, 0L }, longArray1);
    }

    @Test(timeout = 4000)
    public void test048247() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertEquals(7, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test048248() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertEquals(6, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test048249() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test048250() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test048251() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test048252() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test048253() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test048254() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0 }, intArray1);
    }

    @Test(timeout = 4000)
    public void test049255() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertEquals(3, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test049256() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertEquals(2, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test049257() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test049258() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test049259() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test049260() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test049261() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test049262() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
        assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test050263() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertEquals(4, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test050264() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertEquals(3, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test050265() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test050266() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test050267() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test050268() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test050269() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test050270() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test051271() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertEquals(9, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test051272() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertEquals(8, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test051273() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test051274() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test051275() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test051276() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test051277() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test051278() throws Throwable {
        char[] charArray0 = new char[9];
        char[] charArray1 = ArrayUtils.remove(charArray0, 0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray1);
    }

    @Test(timeout = 4000)
    public void test052279() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertEquals(8, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test052280() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertEquals(7, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test052281() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test052282() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test052283() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test052284() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test052285() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test052286() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test053287() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[1] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
        assertEquals(3, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test053288() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[1] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test053289() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[1] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
        assertTrue(Arrays.equals(new boolean[] { false, true, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test054290() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test054291() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test054292() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test055293() throws Throwable {
        short[] shortArray0 = new short[3];
        shortArray0[0] = (short) 1019;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1019);
        assertEquals(3, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test055294() throws Throwable {
        short[] shortArray0 = new short[3];
        shortArray0[0] = (short) 1019;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1019);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test055295() throws Throwable {
        short[] shortArray0 = new short[3];
        shortArray0[0] = (short) 1019;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1019);
        assertArrayEquals(new short[] { (short) 1019, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test056296() throws Throwable {
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) (-2312L);
        objectArray0[2] = (Object) (-2312L);
        objectArray0[3] = (Object) (-780L);
        objectArray0[4] = objectArray0[2];
        objectArray0[5] = (Object) (-2312L);
        objectArray0[6] = (Object) (-2312L);
        objectArray0[7] = (Object) (-780L);
        int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3937);
        assertEquals(8, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test056297() throws Throwable {
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) (-2312L);
        objectArray0[2] = (Object) (-2312L);
        objectArray0[3] = (Object) (-780L);
        objectArray0[4] = objectArray0[2];
        objectArray0[5] = (Object) (-2312L);
        objectArray0[6] = (Object) (-2312L);
        objectArray0[7] = (Object) (-780L);
        int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3937);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test057298() throws Throwable {
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test057299() throws Throwable {
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        objectArray0[1] = object0;
        int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
        assertEquals(6, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test057300() throws Throwable {
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        objectArray0[1] = object0;
        int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test058301() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[0] = (-2319L);
        int int0 = ArrayUtils.lastIndexOf(longArray0, (-2319L));
        assertEquals(6, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test058302() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[0] = (-2319L);
        int int0 = ArrayUtils.lastIndexOf(longArray0, (-2319L));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test058303() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[0] = (-2319L);
        int int0 = ArrayUtils.lastIndexOf(longArray0, (-2319L));
        assertArrayEquals(new long[] { (-2319L), 0L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test059304() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[1] = (-1L);
        int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
        assertEquals(4, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test059305() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[1] = (-1L);
        int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test059306() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[1] = (-1L);
        int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
        assertArrayEquals(new long[] { 0L, (-1L), 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test060307() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[7] = (-2032);
        int int0 = ArrayUtils.lastIndexOf(intArray0, (-2032), 792);
        assertEquals(9, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test060308() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[7] = (-2032);
        int int0 = ArrayUtils.lastIndexOf(intArray0, (-2032), 792);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test060309() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[7] = (-2032);
        int int0 = ArrayUtils.lastIndexOf(intArray0, (-2032), 792);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, (-2032), 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test061310() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 2;
        int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
        assertEquals(2, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test061311() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 2;
        int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test061312() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 2;
        int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
        assertArrayEquals(new int[] { 0, 2 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test062313() throws Throwable {
        int[] intArray0 = new int[9];
        int int0 = ArrayUtils.lastIndexOf(intArray0, 96);
        assertEquals(9, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test062314() throws Throwable {
        int[] intArray0 = new int[9];
        int int0 = ArrayUtils.lastIndexOf(intArray0, 96);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test062315() throws Throwable {
        int[] intArray0 = new int[9];
        int int0 = ArrayUtils.lastIndexOf(intArray0, 96);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test063316() throws Throwable {
        float[] floatArray0 = new float[5];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
        assertEquals(5, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test063317() throws Throwable {
        float[] floatArray0 = new float[5];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test063318() throws Throwable {
        float[] floatArray0 = new float[5];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test064319() throws Throwable {
        float[] floatArray0 = new float[3];
        floatArray0[0] = (-1.0F);
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
        assertEquals(3, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test064320() throws Throwable {
        float[] floatArray0 = new float[3];
        floatArray0[0] = (-1.0F);
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test064321() throws Throwable {
        float[] floatArray0 = new float[3];
        floatArray0[0] = (-1.0F);
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
        assertArrayEquals(new float[] { (-1.0F), 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test065322() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        assertNotNull(float0);
    }

    @Test(timeout = 4000)
    public void test065323() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        assertEquals(0.0F, (float) float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test065324() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertEquals(4, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test065325() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertEquals(4, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test065326() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test065327() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test065328() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) floatArray0[1]);
        assertEquals(4, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test065329() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) floatArray0[1]);
        assertEquals(4, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test065330() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) floatArray0[1]);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test065331() throws Throwable {
        Float[] floatArray0 = new Float[4];
        Float float0 = new Float(0.0);
        floatArray0[0] = float0;
        floatArray0[1] = floatArray0[0];
        floatArray0[2] = floatArray0[1];
        floatArray0[3] = floatArray0[2];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) floatArray0[1]);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test066332() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 3165.946;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3165.946, 2169, 1241.77977461);
        assertEquals(2, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test066333() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 3165.946;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3165.946, 2169, 1241.77977461);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test066334() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 3165.946;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3165.946, 2169, 1241.77977461);
        assertArrayEquals(new double[] { 3165.946, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test067335() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = (double) (short) 9;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 9.0, 1452);
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test067336() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = (double) (short) 9;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 9.0, 1452);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test067337() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = (double) (short) 9;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 9.0, 1452);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test068338() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 3313;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test068339() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 3313;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test068340() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 3313;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
        assertArrayEquals(new double[] { 3313.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test069341() throws Throwable {
        double[] doubleArray0 = new double[5];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2149.0);
        assertEquals(5, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test069342() throws Throwable {
        double[] doubleArray0 = new double[5];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2149.0);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test069343() throws Throwable {
        double[] doubleArray0 = new double[5];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2149.0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test070344() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = (-1.0);
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
        assertEquals(2, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test070345() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = (-1.0);
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test070346() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = (-1.0);
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
        assertArrayEquals(new double[] { 0.0, (-1.0) }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test071347() throws Throwable {
        char[] charArray0 = new char[2];
        charArray0[1] = 'L';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', 808);
        assertEquals(2, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test071348() throws Throwable {
        char[] charArray0 = new char[2];
        charArray0[1] = 'L';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', 808);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test071349() throws Throwable {
        char[] charArray0 = new char[2];
        charArray0[1] = 'L';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', 808);
        assertArrayEquals(new char[] { '\u0000', 'L' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test072350() throws Throwable {
        char[] charArray0 = new char[4];
        charArray0[3] = 'S';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test072351() throws Throwable {
        char[] charArray0 = new char[4];
        charArray0[3] = 'S';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test072352() throws Throwable {
        char[] charArray0 = new char[4];
        charArray0[3] = 'S';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', 'S' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test073353() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[2] = (byte) 70;
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
        assertEquals(4, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test073354() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[2] = (byte) 70;
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test073355() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[2] = (byte) 70;
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 70, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test074356() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-66);
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-66));
        assertEquals(2, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test074357() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-66);
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-66));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test074358() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-66);
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-66));
        assertArrayEquals(new byte[] { (byte) (-66), (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test075359() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[6] = (byte) (-1);
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
        assertEquals(8, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test075360() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[6] = (byte) (-1);
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test075361() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[6] = (byte) (-1);
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) (-1), (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test076362() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameType("MZ&P", "MZ&P");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test077363() throws Throwable {
        Integer integer0 = new Integer(57);
        assertNotNull(integer0);
    }

    @Test(timeout = 4000)
    public void test077364() throws Throwable {
        Integer integer0 = new Integer(57);
        assertEquals(57, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test077365() throws Throwable {
        Integer integer0 = new Integer(57);
        boolean boolean0 = ArrayUtils.isEquals(integer0, (Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078366() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
        assertEquals(9, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test078367() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test078368() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test079369() throws Throwable {
        boolean[] booleanArray0 = new boolean[8];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertEquals(8, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test079370() throws Throwable {
        boolean[] booleanArray0 = new boolean[8];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test079371() throws Throwable {
        boolean[] booleanArray0 = new boolean[8];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] { true, false, false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test080372() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test080373() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test080374() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] { true }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test081375() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[0] = (short) (byte) (-24);
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
        assertEquals(7, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test081376() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[0] = (short) (byte) (-24);
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test081377() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[0] = (short) (byte) (-24);
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
        assertArrayEquals(new short[] { (short) (-24), (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test082378() throws Throwable {
        short[] shortArray0 = new short[2];
        shortArray0[0] = (short) 2;
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 2);
        assertEquals(2, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test082379() throws Throwable {
        short[] shortArray0 = new short[2];
        shortArray0[0] = (short) 2;
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 2);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test082380() throws Throwable {
        short[] shortArray0 = new short[2];
        shortArray0[0] = (short) 2;
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 2);
        assertArrayEquals(new short[] { (short) 2, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test083381() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[1] = (short) 3295;
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 3295);
        assertEquals(6, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test083382() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[1] = (short) 3295;
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 3295);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test083383() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[1] = (short) 3295;
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 3295);
        assertArrayEquals(new short[] { (short) 0, (short) 3295, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test084384() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test084385() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[1] = object0;
        int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
        assertEquals(5, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test084386() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[1] = object0;
        int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test085387() throws Throwable {
        Object[] objectArray0 = new Object[1];
        int int0 = ArrayUtils.indexOf(objectArray0, (Object) "");
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test085388() throws Throwable {
        Object[] objectArray0 = new Object[1];
        int int0 = ArrayUtils.indexOf(objectArray0, (Object) "");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test086389() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[3] = (long) Integer.MAX_VALUE;
        int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
        assertEquals(6, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test086390() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[3] = (long) Integer.MAX_VALUE;
        int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test086391() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[3] = (long) Integer.MAX_VALUE;
        int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
        assertArrayEquals(new long[] { 0L, 0L, 0L, 2147483647L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test087392() throws Throwable {
        long[] longArray0 = new long[5];
        longArray0[4] = 5314L;
        int int0 = ArrayUtils.indexOf(longArray0, 5314L);
        assertEquals(5, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test087393() throws Throwable {
        long[] longArray0 = new long[5];
        longArray0[4] = 5314L;
        int int0 = ArrayUtils.indexOf(longArray0, 5314L);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test087394() throws Throwable {
        long[] longArray0 = new long[5];
        longArray0[4] = 5314L;
        int int0 = ArrayUtils.indexOf(longArray0, 5314L);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L, 5314L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test088395() throws Throwable {
        int int0 = ArrayUtils.indexOf((long[]) null, 1L);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test089396() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[0] = (-819);
        int int0 = ArrayUtils.indexOf(intArray0, (-819), 0);
        assertEquals(2, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test089397() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[0] = (-819);
        int int0 = ArrayUtils.indexOf(intArray0, (-819), 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test089398() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[0] = (-819);
        int int0 = ArrayUtils.indexOf(intArray0, (-819), 0);
        assertArrayEquals(new int[] { (-819), 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test090399() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[3] = (-839);
        int int0 = ArrayUtils.indexOf(intArray0, (-839));
        assertEquals(9, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test090400() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[3] = (-839);
        int int0 = ArrayUtils.indexOf(intArray0, (-839));
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test090401() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[3] = (-839);
        int int0 = ArrayUtils.indexOf(intArray0, (-839));
        assertArrayEquals(new int[] { 0, 0, 0, (-839), 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test091402() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[0] = 3;
        intArray0[1] = 233;
        int int0 = ArrayUtils.indexOf(intArray0, 0);
        assertEquals(2, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test091403() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[0] = 3;
        intArray0[1] = 233;
        int int0 = ArrayUtils.indexOf(intArray0, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test091404() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[0] = 3;
        intArray0[1] = 233;
        int int0 = ArrayUtils.indexOf(intArray0, 0);
        assertArrayEquals(new int[] { 3, 233 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test092405() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[0] = 2883.183F;
        int int0 = ArrayUtils.indexOf(floatArray0, 2883.183F, 0);
        assertEquals(7, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test092406() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[0] = 2883.183F;
        int int0 = ArrayUtils.indexOf(floatArray0, 2883.183F, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test092407() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[0] = 2883.183F;
        int int0 = ArrayUtils.indexOf(floatArray0, 2883.183F, 0);
        assertArrayEquals(new float[] { 2883.183F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test093408() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[4] = (-345.353F);
        int int0 = ArrayUtils.indexOf(floatArray0, (-345.353F));
        assertEquals(5, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test093409() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[4] = (-345.353F);
        int int0 = ArrayUtils.indexOf(floatArray0, (-345.353F));
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test093410() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[4] = (-345.353F);
        int int0 = ArrayUtils.indexOf(floatArray0, (-345.353F));
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, (-345.353F) }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test094411() throws Throwable {
        float[] floatArray0 = new float[3];
        floatArray0[0] = (float) (byte) (-92);
        floatArray0[1] = (float) (-1);
        floatArray0[2] = (float) (-1);
        int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
        assertEquals(3, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test094412() throws Throwable {
        float[] floatArray0 = new float[3];
        floatArray0[0] = (float) (byte) (-92);
        floatArray0[1] = (float) (-1);
        floatArray0[2] = (float) (-1);
        int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test094413() throws Throwable {
        float[] floatArray0 = new float[3];
        floatArray0[0] = (float) (byte) (-92);
        floatArray0[1] = (float) (-1);
        floatArray0[2] = (float) (-1);
        int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
        assertArrayEquals(new float[] { (-92.0F), (-1.0F), (-1.0F) }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test095414() throws Throwable {
        double[] doubleArray0 = new double[2];
        int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-518), (double) Integer.MAX_VALUE);
        assertEquals(2, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test095415() throws Throwable {
        double[] doubleArray0 = new double[2];
        int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-518), (double) Integer.MAX_VALUE);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test095416() throws Throwable {
        double[] doubleArray0 = new double[2];
        int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-518), (double) Integer.MAX_VALUE);
        assertArrayEquals(new double[] { 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test096417() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (-860.273F);
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (double) 0L);
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test096418() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (-860.273F);
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (double) 0L);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test096419() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (-860.273F);
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (double) 0L);
        assertArrayEquals(new double[] { (-860.2730102539062), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test097420() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 1.0;
        int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test097421() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 1.0;
        int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test097422() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 1.0;
        int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
        assertArrayEquals(new double[] { 1.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test098423() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) (short) 57;
        int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test098424() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) (short) 57;
        int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test098425() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) (short) 57;
        int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
        assertArrayEquals(new double[] { 57.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test099426() throws Throwable {
        char[] charArray0 = new char[9];
        charArray0[2] = 'C';
        int int0 = ArrayUtils.indexOf(charArray0, 'C', 0);
        assertEquals(9, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test099427() throws Throwable {
        char[] charArray0 = new char[9];
        charArray0[2] = 'C';
        int int0 = ArrayUtils.indexOf(charArray0, 'C', 0);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test099428() throws Throwable {
        char[] charArray0 = new char[9];
        charArray0[2] = 'C';
        int int0 = ArrayUtils.indexOf(charArray0, 'C', 0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', 'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test100429() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = '.';
        int int0 = ArrayUtils.indexOf(charArray0, '.');
        assertEquals(3, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test100430() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = '.';
        int int0 = ArrayUtils.indexOf(charArray0, '.');
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test100431() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = '.';
        int int0 = ArrayUtils.indexOf(charArray0, '.');
        assertArrayEquals(new char[] { '.', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test101432() throws Throwable {
        char[] charArray0 = new char[9];
        charArray0[7] = 'h';
        int int0 = ArrayUtils.indexOf(charArray0, 'h');
        assertEquals(9, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test101433() throws Throwable {
        char[] charArray0 = new char[9];
        charArray0[7] = 'h';
        int int0 = ArrayUtils.indexOf(charArray0, 'h');
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test101434() throws Throwable {
        char[] charArray0 = new char[9];
        charArray0[7] = 'h';
        int int0 = ArrayUtils.indexOf(charArray0, 'h');
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'h', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test102435() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        ArrayUtils.reverse(byteArray0);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test102436() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        ArrayUtils.reverse(byteArray0);
        assertArrayEquals(new byte[] { (byte) 120, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test102437() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        ArrayUtils.reverse(byteArray0);
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test102438() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        ArrayUtils.reverse(byteArray0);
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test102439() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        ArrayUtils.reverse(byteArray0);
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
        assertArrayEquals(new byte[] { (byte) 120, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test103440() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 49;
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 49);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test103441() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 49;
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 49);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test103442() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 49;
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 49);
        assertArrayEquals(new byte[] { (byte) 49, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test104443() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[4] = (byte) (-56);
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-56));
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test104444() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[4] = (byte) (-56);
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-56));
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test104445() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[4] = (byte) (-56);
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-56));
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) (-56), (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test105446() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertEquals(0, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test105447() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test105448() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test105449() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test105450() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test105451() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test105452() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test105453() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test106454() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertEquals(7, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test106455() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertEquals(7, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test106456() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test106457() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test106458() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test106459() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test106460() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test106461() throws Throwable {
        short[] shortArray0 = new short[7];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test107462() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
        assertEquals(0, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test107463() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
        assertEquals(0, integerArray1.length);
    }

    @Test(timeout = 4000)
    public void test107464() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
        assertNotSame(integerArray0, integerArray1);
    }

    @Test(timeout = 4000)
    public void test107465() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
        assertNotSame(integerArray1, integerArray0);
    }

    @Test(timeout = 4000)
    public void test107466() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
        assertNotNull(integerArray1);
    }

    @Test(timeout = 4000)
    public void test107467() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
        assertFalse(integerArray1.equals((Object) integerArray0));
    }

    @Test(timeout = 4000)
    public void test108468() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertEquals(8, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test108469() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertEquals(8, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test108470() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test108471() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test108472() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test108473() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test108474() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test108475() throws Throwable {
        long[] longArray0 = new long[8];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L }, longArray1);
    }

    @Test(timeout = 4000)
    public void test109476() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertEquals(2, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test109477() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertEquals(2, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test109478() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test109479() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test109480() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test109481() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test109482() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertArrayEquals(new int[] { 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test109483() throws Throwable {
        int[] intArray0 = new int[2];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertArrayEquals(new int[] { 0, 0 }, intArray1);
    }

    @Test(timeout = 4000)
    public void test110484() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertEquals(7, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test110485() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertEquals(7, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test110486() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test110487() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test110488() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test110489() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test110490() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test110491() throws Throwable {
        char[] charArray0 = new char[7];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray1);
    }

    @Test(timeout = 4000)
    public void test111492() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test111493() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test111494() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test111495() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test111496() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test111497() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test111498() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test111499() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertArrayEquals(new byte[] {}, byteArray1);
    }

    @Test(timeout = 4000)
    public void test112500() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertEquals(0, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test112501() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test112502() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test112503() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test112504() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test112505() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test112506() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test112507() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test113508() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertEquals(0, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test113509() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test113510() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test113511() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test113512() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test113513() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test113514() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertArrayEquals(new short[] {}, shortArray0);
    }

    @Test(timeout = 4000)
    public void test113515() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertArrayEquals(new short[] {}, shortArray1);
    }

    @Test(timeout = 4000)
    public void test114516() throws Throwable {
        String[] stringArray0 = new String[0];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertEquals(0, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test114517() throws Throwable {
        String[] stringArray0 = new String[0];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertEquals(0, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test114518() throws Throwable {
        String[] stringArray0 = new String[0];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertNotSame(stringArray0, stringArray1);
    }

    @Test(timeout = 4000)
    public void test114519() throws Throwable {
        String[] stringArray0 = new String[0];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertNotSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test114520() throws Throwable {
        String[] stringArray0 = new String[0];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertNotNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test114521() throws Throwable {
        String[] stringArray0 = new String[0];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertFalse(stringArray1.equals((Object) stringArray0));
    }

    @Test(timeout = 4000)
    public void test115522() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertEquals(0, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test115523() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test115524() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test115525() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test115526() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test115527() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test115528() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertArrayEquals(new long[] {}, longArray0);
    }

    @Test(timeout = 4000)
    public void test115529() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertArrayEquals(new long[] {}, longArray1);
    }

    @Test(timeout = 4000)
    public void test116530() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test116531() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test116532() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test116533() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test116534() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test116535() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test116536() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test116537() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertArrayEquals(new int[] {}, intArray1);
    }

    @Test(timeout = 4000)
    public void test117538() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test117539() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test117540() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test117541() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test117542() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test117543() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test117544() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test117545() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertArrayEquals(new double[] {}, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test118546() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test118547() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test118548() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test118549() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test118550() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test118551() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test118552() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test118553() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertArrayEquals(new byte[] {}, byteArray1);
    }

    @Test(timeout = 4000)
    public void test119554() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertEquals(2, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test119555() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertEquals(3, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test119556() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test119557() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test119558() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test119559() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test119560() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertTrue(Arrays.equals(new boolean[] { false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test119561() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
        assertTrue(Arrays.equals(new boolean[] { true, false, false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test120562() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertEquals(5, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test120563() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertEquals(6, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test120564() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test120565() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test120566() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test120567() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test120568() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test120569() throws Throwable {
        long[] longArray0 = new long[5];
        long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
        assertArrayEquals(new long[] { 0L, (-1617L), 0L, 0L, 0L, 0L }, longArray1);
    }

    @Test(timeout = 4000)
    public void test121570() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertEquals(5, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test121571() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertEquals(6, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test121572() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test121573() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test121574() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test121575() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test121576() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test121577() throws Throwable {
        float[] floatArray0 = new float[5];
        float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
        assertArrayEquals(new float[] { 1088.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test122578() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertEquals(3, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test122579() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertEquals(4, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test122580() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test122581() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test122582() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test122583() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test122584() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test122585() throws Throwable {
        char[] charArray0 = new char[3];
        char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
        assertArrayEquals(new char[] { '\u0000', '\u0000', 'g', '\u0000' }, charArray1);
    }

    @Test(timeout = 4000)
    public void test123586() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertEquals(8, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test123587() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertEquals(9, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test123588() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test123589() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test123590() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test123591() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test123592() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test123593() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 18, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test124594() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        // Undeclared exception!
        try {
            ArrayUtils.remove(booleanArray0, (-2145610062));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -2145610062, Length: 9
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test125595() throws Throwable {
        int[] intArray0 = new int[8];
        // Undeclared exception!
        try {
            ArrayUtils.remove(intArray0, 707);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 707, Length: 8
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test126596() throws Throwable {
        short[] shortArray0 = new short[1];
        // Undeclared exception!
        try {
            ArrayUtils.add(shortArray0, (-3481), (short) 0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -3481, Length: 1
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test127597() throws Throwable {
        double[] doubleArray0 = new double[3];
        // Undeclared exception!
        try {
            ArrayUtils.add(doubleArray0, (-1), 84.0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1, Length: 3
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test128598() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
        assertEquals(0, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test128599() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test128600() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test129601() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test130602() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
        assertEquals(3, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test130603() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test130604() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test131605() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132606() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertEquals(0, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test132607() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test132608() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test132609() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test132610() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test132611() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test132612() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertArrayEquals(new float[] {}, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test132613() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        assertArrayEquals(new float[] {}, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test132614() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertEquals(0, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test132615() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test132616() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test132617() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test132618() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertFalse(floatArray0.equals((Object) floatArray1));
    }

    @Test(timeout = 4000)
    public void test132619() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test132620() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132621() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertArrayEquals(new float[] {}, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test132622() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
        assertArrayEquals(new float[] {}, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test133623() throws Throwable {
        float[] floatArray0 = new float[2];
        boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
        assertEquals(2, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test133624() throws Throwable {
        float[] floatArray0 = new float[2];
        boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test133625() throws Throwable {
        float[] floatArray0 = new float[2];
        boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
        assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test134626() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test134627() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134628() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test135629() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test136630() throws Throwable {
        double[] doubleArray0 = new double[4];
        boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
        assertEquals(4, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test136631() throws Throwable {
        double[] doubleArray0 = new double[4];
        boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test136632() throws Throwable {
        double[] doubleArray0 = new double[4];
        boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test137633() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
        assertEquals(3, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test137634() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test137635() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
        assertTrue(Arrays.equals(new boolean[] { true, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test138636() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-66));
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test138637() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-66));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test138638() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        booleanArray0[0] = true;
        int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-66));
        assertTrue(Arrays.equals(new boolean[] { true }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test139639() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
        assertEquals(3, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test139640() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test139641() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test140642() throws Throwable {
        int int0 = ArrayUtils.indexOf((boolean[]) null, true, 2);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test141643() throws Throwable {
        float[] floatArray0 = new float[6];
        int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (byte) 1);
        assertEquals(6, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test141644() throws Throwable {
        float[] floatArray0 = new float[6];
        int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (byte) 1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test141645() throws Throwable {
        float[] floatArray0 = new float[6];
        int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (byte) 1);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test142646() throws Throwable {
        double[] doubleArray0 = new double[1];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1084.18), 556);
        assertEquals(1, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test142647() throws Throwable {
        double[] doubleArray0 = new double[1];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1084.18), 556);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test142648() throws Throwable {
        double[] doubleArray0 = new double[1];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1084.18), 556);
        assertArrayEquals(new double[] { 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test143649() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 2046.087994;
        int int0 = ArrayUtils.indexOf(doubleArray0, 2878.4661, (-979), 963.0356);
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test143650() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 2046.087994;
        int int0 = ArrayUtils.indexOf(doubleArray0, 2878.4661, (-979), 963.0356);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test143651() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 2046.087994;
        int int0 = ArrayUtils.indexOf(doubleArray0, 2878.4661, (-979), 963.0356);
        assertArrayEquals(new double[] { 0.0, 2046.087994, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test144652() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.indexOf(doubleArray0, 343.0, 0, (double) 0);
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test144653() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.indexOf(doubleArray0, 343.0, 0, (double) 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test144654() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.indexOf(doubleArray0, 343.0, 0, (double) 0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test145655() throws Throwable {
        int int0 = ArrayUtils.indexOf((double[]) null, (-1084.18), 0, (double) 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test146656() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 'w';
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test146657() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 'w';
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test146658() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 'w';
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
        assertArrayEquals(new double[] { 119.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test147659() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-125), 474);
        assertEquals(4, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test147660() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-125), 474);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test147661() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-125), 474);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test148662() throws Throwable {
        int int0 = ArrayUtils.indexOf((double[]) null, 630.736923883764, (-453));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test149663() throws Throwable {
        byte[] byteArray0 = new byte[4];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
        assertEquals(4, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test149664() throws Throwable {
        byte[] byteArray0 = new byte[4];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test149665() throws Throwable {
        byte[] byteArray0 = new byte[4];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test150666() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) 127, (-1286));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test151667() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test151668() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test151669() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 120;
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 120 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test152670() throws Throwable {
        int int0 = ArrayUtils.indexOf((byte[]) null, (byte) 0, Integer.MAX_VALUE);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test153671() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'j', 0);
        assertEquals(1, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test153672() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'j', 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test153673() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'j', 0);
        assertArrayEquals(new char[] { 'j' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test154674() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'E';
        int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) (byte) (-24));
        assertEquals(3, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test154675() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'E';
        int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) (byte) (-24));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test154676() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'E';
        int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) (byte) (-24));
        assertArrayEquals(new char[] { 'E', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test155677() throws Throwable {
        int int0 = ArrayUtils.indexOf((char[]) null, 'p', 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test156678() throws Throwable {
        short[] shortArray0 = new short[9];
        shortArray0[8] = (short) 4;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
        assertEquals(9, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test156679() throws Throwable {
        short[] shortArray0 = new short[9];
        shortArray0[8] = (short) 4;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test156680() throws Throwable {
        short[] shortArray0 = new short[9];
        shortArray0[8] = (short) 4;
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 4 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test157681() throws Throwable {
        short[] shortArray0 = new short[9];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
        assertEquals(9, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test157682() throws Throwable {
        short[] shortArray0 = new short[9];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test157683() throws Throwable {
        short[] shortArray0 = new short[9];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test158684() throws Throwable {
        short[] shortArray0 = new short[1];
        shortArray0[0] = (short) (byte) (-24);
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-458));
        assertEquals(1, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test158685() throws Throwable {
        short[] shortArray0 = new short[1];
        shortArray0[0] = (short) (byte) (-24);
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-458));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test158686() throws Throwable {
        short[] shortArray0 = new short[1];
        shortArray0[0] = (short) (byte) (-24);
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-458));
        assertArrayEquals(new short[] { (short) (-24) }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test159687() throws Throwable {
        short[] shortArray0 = new short[3];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 2944, 64);
        assertEquals(3, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test159688() throws Throwable {
        short[] shortArray0 = new short[3];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 2944, 64);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test159689() throws Throwable {
        short[] shortArray0 = new short[3];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 2944, 64);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test160690() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 1;
        int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
        assertEquals(2, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test160691() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 1;
        int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test160692() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 1;
        int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
        assertArrayEquals(new int[] { 0, 1 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test161693() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
        assertEquals(2, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test161694() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test161695() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
        assertArrayEquals(new int[] { 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test162696() throws Throwable {
        int int0 = ArrayUtils.indexOf((int[]) null, 258, 1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test163697() throws Throwable {
        long[] longArray0 = new long[8];
        longArray0[0] = (long) 556;
        int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
        assertEquals(8, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test163698() throws Throwable {
        long[] longArray0 = new long[8];
        longArray0[0] = (long) 556;
        int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test163699() throws Throwable {
        long[] longArray0 = new long[8];
        longArray0[0] = (long) 556;
        int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
        assertArrayEquals(new long[] { 556L, 0L, 0L, 0L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test164700() throws Throwable {
        long[] longArray0 = new long[5];
        int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (int) (short) 527);
        assertEquals(5, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test164701() throws Throwable {
        long[] longArray0 = new long[5];
        int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (int) (short) 527);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test164702() throws Throwable {
        long[] longArray0 = new long[5];
        int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (int) (short) 527);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test165703() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[0] = 439L;
        int int0 = ArrayUtils.indexOf(longArray0, 439L, 0);
        assertEquals(4, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test165704() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[0] = 439L;
        int int0 = ArrayUtils.indexOf(longArray0, 439L, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test165705() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[0] = 439L;
        int int0 = ArrayUtils.indexOf(longArray0, 439L, 0);
        assertArrayEquals(new long[] { 439L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test166706() throws Throwable {
        long[] longArray0 = new long[1];
        int int0 = ArrayUtils.indexOf(longArray0, (-3266L), 100);
        assertEquals(1, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test166707() throws Throwable {
        long[] longArray0 = new long[1];
        int int0 = ArrayUtils.indexOf(longArray0, (-3266L), 100);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test166708() throws Throwable {
        long[] longArray0 = new long[1];
        int int0 = ArrayUtils.indexOf(longArray0, (-3266L), 100);
        assertArrayEquals(new long[] { 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test167709() throws Throwable {
        Object[] objectArray0 = new Object[8];
        objectArray0[5] = (Object) (-2312L);
        int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5], 3937);
        assertEquals(8, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test167710() throws Throwable {
        Object[] objectArray0 = new Object[8];
        objectArray0[5] = (Object) (-2312L);
        int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5], 3937);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test168711() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test168712() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(1, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test168713() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test168714() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test168715() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) "", 31);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test168716() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) "", 31);
        assertEquals(1, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test168717() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) "", 31);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test168718() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) "", 31);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test169719() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test169720() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
        assertEquals(5, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test169721() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test170722() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test170723() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
        assertEquals(5, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test170724() throws Throwable {
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test171725() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) "', is neither of type Map.Entry nor an Array", 64);
        assertEquals(3, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test171726() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) "', is neither of type Map.Entry nor an Array", 64);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test172727() throws Throwable {
        Object[] objectArray0 = new Object[8];
        int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (int) (byte) 70);
        assertEquals(8, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test172728() throws Throwable {
        Object[] objectArray0 = new Object[8];
        int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (int) (byte) 70);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test173729() throws Throwable {
        Object[] objectArray0 = new Object[0];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test173730() throws Throwable {
        Object[] objectArray0 = new Object[0];
        Object object0 = new Object();
        int int0 = ArrayUtils.indexOf(objectArray0, object0, 1406);
        assertEquals(0, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test173731() throws Throwable {
        Object[] objectArray0 = new Object[0];
        Object object0 = new Object();
        int int0 = ArrayUtils.indexOf(objectArray0, object0, 1406);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test174732() throws Throwable {
        int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "java.lang.Integer", (int) (short) (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test175733() throws Throwable {
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test175734() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            ArrayUtils.getLength(object0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Argument is not an array
            //
            verifyException("java.lang.reflect.Array", e);
        }
    }

    @Test(timeout = 4000)
    public void test176735() throws Throwable {
        int int0 = ArrayUtils.getLength((Object) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test177736() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test178737() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test178738() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertEquals(1, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test178739() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test178740() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test178741() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test178742() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test178743() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test178744() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test179745() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertEquals(5, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test179746() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertEquals(5, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test179747() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test179748() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test179749() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test179750() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test179751() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test179752() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test180753() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertEquals(8, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test180754() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertEquals(8, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test180755() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test180756() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test180757() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test180758() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test180759() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test180760() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byte[] byteArray1 = ArrayUtils.clone(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test181761() throws Throwable {
        char[] charArray0 = ArrayUtils.clone((char[]) null);
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test182762() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test182763() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertEquals(0, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test182764() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test182765() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test182766() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test182767() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test182768() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertArrayEquals(new char[] {}, charArray0);
    }

    @Test(timeout = 4000)
    public void test182769() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = ArrayUtils.clone(charArray0);
        assertArrayEquals(new char[] {}, charArray1);
    }

    @Test(timeout = 4000)
    public void test183770() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test183771() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test183772() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test183773() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test183774() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test183775() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test183776() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test183777() throws Throwable {
        int[] intArray0 = new int[0];
        int[] intArray1 = ArrayUtils.clone(intArray0);
        assertArrayEquals(new int[] {}, intArray1);
    }

    @Test(timeout = 4000)
    public void test184778() throws Throwable {
        int[] intArray0 = ArrayUtils.clone((int[]) null);
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test185779() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test185780() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(1, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test185781() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test185782() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test185783() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test185784() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
        assertEquals(1, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test185785() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test185786() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
        assertNotSame(booleanArray1, objectArray0);
    }

    @Test(timeout = 4000)
    public void test185787() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
        assertNotNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test185788() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test186789() throws Throwable {
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test186790() throws Throwable {
        Object object0 = new Object();
        String string0 = ArrayUtils.toString(object0, "sj[7zW`^LaSlQ");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test187791() throws Throwable {
        char[] charArray0 = new char[3];
        int int0 = ArrayUtils.indexOf(charArray0, '.');
        assertEquals(3, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test187792() throws Throwable {
        char[] charArray0 = new char[3];
        int int0 = ArrayUtils.indexOf(charArray0, '.');
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test187793() throws Throwable {
        char[] charArray0 = new char[3];
        int int0 = ArrayUtils.indexOf(charArray0, '.');
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test188794() throws Throwable {
        boolean[] booleanArray0 = new boolean[8];
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertEquals(8, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test188795() throws Throwable {
        boolean[] booleanArray0 = new boolean[8];
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test188796() throws Throwable {
        boolean[] booleanArray0 = new boolean[8];
        int int0 = ArrayUtils.indexOf(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test189797() throws Throwable {
        byte[] byteArray0 = new byte[7];
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
        assertEquals(7, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test189798() throws Throwable {
        byte[] byteArray0 = new byte[7];
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test189799() throws Throwable {
        byte[] byteArray0 = new byte[7];
        int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test190800() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertEquals(1, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test190801() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test190802() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test190803() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test190804() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test190805() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test190806() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertArrayEquals(new int[] { 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test190807() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = ArrayUtils.remove(intArray0, 0);
        assertArrayEquals(new int[] {}, intArray1);
    }

    @Test(timeout = 4000)
    public void test191808() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.indexOf(intArray0, 0);
        assertEquals(2, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test191809() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.indexOf(intArray0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test191810() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.indexOf(intArray0, 0);
        assertArrayEquals(new int[] { 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test192811() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertEquals(6, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test192812() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertEquals(5, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test192813() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test192814() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test192815() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test192816() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test192817() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) (-468), (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test192818() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[3] = (short) (-468);
        short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test193819() throws Throwable {
        long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1L);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test194820() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertEquals(1, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test194821() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test194822() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test194823() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test194824() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test194825() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test194826() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertArrayEquals(new long[] { (-1L) }, longArray0);
    }

    @Test(timeout = 4000)
    public void test194827() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (-1L);
        long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
        assertArrayEquals(new long[] {}, longArray1);
    }

    @Test(timeout = 4000)
    public void test195828() throws Throwable {
        float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 2646.16F);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test196829() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertEquals(6, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test196830() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertEquals(5, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test196831() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test196832() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test196833() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test196834() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertFalse(floatArray1.equals((Object) floatArray0));
    }

    @Test(timeout = 4000)
    public void test196835() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test196836() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test197837() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertEquals(2, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test197838() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertEquals(1, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test197839() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test197840() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test197841() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test197842() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test197843() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertArrayEquals(new double[] { 1.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test197844() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1.0;
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
        assertArrayEquals(new double[] { 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test198845() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertEquals(3, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test198846() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertEquals(2, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test198847() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test198848() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test198849() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test198850() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test198851() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertArrayEquals(new char[] { 'j', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test198852() throws Throwable {
        char[] charArray0 = new char[3];
        charArray0[0] = 'j';
        char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
        assertArrayEquals(new char[] { '\u0000', '\u0000' }, charArray1);
    }

    @Test(timeout = 4000)
    public void test199853() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertEquals(3, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test199854() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertEquals(2, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test199855() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test199856() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test199857() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test199858() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test199859() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertTrue(Arrays.equals(new boolean[] { true, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test199860() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        booleanArray0[0] = true;
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertTrue(Arrays.equals(new boolean[] { false, false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test200861() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[1] = "user.name";
        String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "user.name");
        assertEquals(5, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test200862() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[1] = "user.name";
        String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "user.name");
        assertEquals(4, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test200863() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[1] = "user.name";
        String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "user.name");
        assertNotSame(stringArray0, stringArray1);
    }

    @Test(timeout = 4000)
    public void test200864() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[1] = "user.name";
        String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "user.name");
        assertNotSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test200865() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[1] = "user.name";
        String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "user.name");
        assertNotNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test200866() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[1] = "user.name";
        String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "user.name");
        assertFalse(stringArray1.equals((Object) stringArray0));
    }

    @Test(timeout = 4000)
    public void test201867() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
    }

    @Test(timeout = 4000)
    public void test201868() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        assertNotNull(arrayUtils0);
    }

    @Test(timeout = 4000)
    public void test201869() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 0, 0);
        assertEquals(1, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test201870() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 0, 0);
        assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
    }

    @Test(timeout = 4000)
    public void test201871() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 0, 0);
        assertNotNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test201872() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 0, 0);
        assertArrayEquals(new int[] { 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test202873() throws Throwable {
        Object[] objectArray0 = ArrayUtils.add((Object[]) null, 64, (Object) null);
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test202874() throws Throwable {
        Object[] objectArray0 = ArrayUtils.add((Object[]) null, 64, (Object) null);
        assertNotNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test203875() throws Throwable {
        String[] stringArray0 = new String[8];
        String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "");
        assertEquals(8, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test203876() throws Throwable {
        String[] stringArray0 = new String[8];
        String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "");
        assertEquals(9, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test203877() throws Throwable {
        String[] stringArray0 = new String[8];
        String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "");
        assertNotSame(stringArray0, stringArray1);
    }

    @Test(timeout = 4000)
    public void test203878() throws Throwable {
        String[] stringArray0 = new String[8];
        String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "");
        assertNotSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test203879() throws Throwable {
        String[] stringArray0 = new String[8];
        String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "");
        assertNotNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test203880() throws Throwable {
        String[] stringArray0 = new String[8];
        String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "");
        assertFalse(stringArray1.equals((Object) stringArray0));
    }

    @Test(timeout = 4000)
    public void test204881() throws Throwable {
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test204882() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            ArrayUtils.add((Object[]) null, (-1963), object0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1963, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test205883() throws Throwable {
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test205884() throws Throwable {
        Object object0 = new Object();
        Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test205885() throws Throwable {
        Object object0 = new Object();
        Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
        assertNotNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test206886() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test206887() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertEquals(16, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test206888() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test206889() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test206890() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test206891() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test206892() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test207893() throws Throwable {
        long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test208894() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertEquals(7, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test208895() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertEquals(14, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test208896() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertNotSame(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test208897() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test208898() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test208899() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertFalse(longArray1.equals((Object) longArray0));
    }

    @Test(timeout = 4000)
    public void test208900() throws Throwable {
        long[] longArray0 = new long[7];
        long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L, 0L, 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test209901() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertEquals(4, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test209902() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertEquals(8, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test209903() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertNotSame(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test209904() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test209905() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test209906() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertFalse(intArray1.equals((Object) intArray0));
    }

    @Test(timeout = 4000)
    public void test209907() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test209908() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, 0 }, intArray1);
    }

    @Test(timeout = 4000)
    public void test210909() throws Throwable {
        short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test211910() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertEquals(3, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test211911() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertEquals(6, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test211912() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertNotSame(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test211913() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test211914() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test211915() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertFalse(shortArray1.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test211916() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test211917() throws Throwable {
        short[] shortArray0 = new short[3];
        short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test212918() throws Throwable {
        byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test213919() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test213920() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertEquals(2, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test213921() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertNotSame(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test213922() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test213923() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test213924() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertFalse(byteArray1.equals((Object) byteArray0));
    }

    @Test(timeout = 4000)
    public void test213925() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test213926() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test214927() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertEquals(5, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test214928() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertEquals(10, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test214929() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test214930() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test214931() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test214932() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test214933() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test214934() throws Throwable {
        char[] charArray0 = new char[5];
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray1);
    }

    @Test(timeout = 4000)
    public void test215935() throws Throwable {
        char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test216936() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test217937() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertEquals(9, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test217938() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertEquals(18, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test217939() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test217940() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertNotSame(booleanArray1, booleanArray0);
    }

    @Test(timeout = 4000)
    public void test217941() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test217942() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertFalse(booleanArray1.equals((Object) booleanArray0));
    }

    @Test(timeout = 4000)
    public void test217943() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test218944() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertEquals(6, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test218945() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertEquals(12, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test218946() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertNotSame(stringArray0, stringArray1);
    }

    @Test(timeout = 4000)
    public void test218947() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertNotSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test218948() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertNotNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test218949() throws Throwable {
        String[] stringArray0 = new String[6];
        String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
        assertFalse(stringArray1.equals((Object) stringArray0));
    }

    @Test(timeout = 4000)
    public void test219950() throws Throwable {
        byte[] byteArray0 = new byte[0];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test219951() throws Throwable {
        byte[] byteArray0 = new byte[0];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test219952() throws Throwable {
        byte[] byteArray0 = new byte[0];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test220953() throws Throwable {
        byte[] byteArray0 = new byte[5];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test220954() throws Throwable {
        byte[] byteArray0 = new byte[5];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test220955() throws Throwable {
        byte[] byteArray0 = new byte[5];
        boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test221956() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test222957() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test222958() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test222959() throws Throwable {
        char[] charArray0 = new char[0];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertArrayEquals(new char[] {}, charArray0);
    }

    @Test(timeout = 4000)
    public void test223960() throws Throwable {
        char[] charArray0 = new char[7];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertEquals(7, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test223961() throws Throwable {
        char[] charArray0 = new char[7];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test223962() throws Throwable {
        char[] charArray0 = new char[7];
        boolean boolean0 = ArrayUtils.isEmpty(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test224963() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test225964() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertEquals(0, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test225965() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test225966() throws Throwable {
        short[] shortArray0 = new short[0];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertArrayEquals(new short[] {}, shortArray0);
    }

    @Test(timeout = 4000)
    public void test226967() throws Throwable {
        short[] shortArray0 = new short[6];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertEquals(6, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test226968() throws Throwable {
        short[] shortArray0 = new short[6];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test226969() throws Throwable {
        short[] shortArray0 = new short[6];
        boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test227970() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228971() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test228972() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228973() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test229974() throws Throwable {
        int[] intArray0 = new int[3];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertEquals(3, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test229975() throws Throwable {
        int[] intArray0 = new int[3];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test229976() throws Throwable {
        int[] intArray0 = new int[3];
        boolean boolean0 = ArrayUtils.isEmpty(intArray0);
        assertArrayEquals(new int[] { 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test230977() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231978() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertEquals(0, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test231979() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231980() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertArrayEquals(new long[] {}, longArray0);
    }

    @Test(timeout = 4000)
    public void test232981() throws Throwable {
        long[] longArray0 = new long[2];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertEquals(2, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test232982() throws Throwable {
        long[] longArray0 = new long[2];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test232983() throws Throwable {
        long[] longArray0 = new long[2];
        boolean boolean0 = ArrayUtils.isEmpty(longArray0);
        assertArrayEquals(new long[] { 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test233984() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test234985() throws Throwable {
        String[] stringArray0 = new String[5];
        boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
        assertEquals(5, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test234986() throws Throwable {
        String[] stringArray0 = new String[5];
        boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test235987() throws Throwable {
        boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test236988() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        booleanArray0[0] = true;
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(6, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test236989() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        booleanArray0[0] = true;
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(6, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test236990() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        booleanArray0[0] = true;
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test236991() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        booleanArray0[0] = true;
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { true, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test237992() throws Throwable {
        Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test238993() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(6, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test238994() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertEquals(6, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test238995() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test238996() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test238997() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test238998() throws Throwable {
        boolean[] booleanArray0 = new boolean[6];
        Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
        Object object0 = new Object();
        // Undeclared exception!
        try {
            ArrayUtils.add((Object[]) booleanArray1, object0);
            fail("Expecting exception: ArrayStoreException");
        } catch (ArrayStoreException e) {
            //
            // java.lang.Object
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test239999() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[11];
        booleanArray0[0] = (Boolean) false;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertEquals(11, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test2391000() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[11];
        booleanArray0[0] = (Boolean) false;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertEquals(11, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test2391001() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[11];
        booleanArray0[0] = (Boolean) false;
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test2401002() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertEquals(0, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test2401003() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test2401004() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test2401005() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test2411006() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test2421007() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        Boolean boolean0 = new Boolean("', is neither of type Map.Entry nor an Array");
        assertNotNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test2421008() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        Boolean boolean0 = new Boolean("', is neither of type Map.Entry nor an Array");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2421009() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        Boolean boolean0 = new Boolean("', is neither of type Map.Entry nor an Array");
        booleanArray0[0] = boolean0;
        booleanArray0[1] = booleanArray0[0];
        booleanArray0[2] = booleanArray0[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertEquals(3, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test2421010() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        Boolean boolean0 = new Boolean("', is neither of type Map.Entry nor an Array");
        booleanArray0[0] = boolean0;
        booleanArray0[1] = booleanArray0[0];
        booleanArray0[2] = booleanArray0[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertEquals(3, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test2421011() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        Boolean boolean0 = new Boolean("', is neither of type Map.Entry nor an Array");
        booleanArray0[0] = boolean0;
        booleanArray0[1] = booleanArray0[0];
        booleanArray0[2] = booleanArray0[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test2421012() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        Boolean boolean0 = new Boolean("', is neither of type Map.Entry nor an Array");
        booleanArray0[0] = boolean0;
        booleanArray0[1] = booleanArray0[0];
        booleanArray0[2] = booleanArray0[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test2431013() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertEquals(0, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test2431014() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertEquals(0, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test2431015() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertNotNull(booleanArray1);
    }

    @Test(timeout = 4000)
    public void test2431016() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[0];
        boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test2441017() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test2451018() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(booleanArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2461019() throws Throwable {
        Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test2471020() throws Throwable {
        float[] floatArray0 = new float[6];
        Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
        assertEquals(6, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test2471021() throws Throwable {
        float[] floatArray0 = new float[6];
        Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
        assertEquals(6, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test2471022() throws Throwable {
        float[] floatArray0 = new float[6];
        Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test2471023() throws Throwable {
        float[] floatArray0 = new float[6];
        Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test2481024() throws Throwable {
        Float[] floatArray0 = new Float[1];
        Float float0 = new Float((double) (-1L));
        assertNotNull(float0);
    }

    @Test(timeout = 4000)
    public void test2481025() throws Throwable {
        Float[] floatArray0 = new Float[1];
        Float float0 = new Float((double) (-1L));
        assertEquals((-1.0F), (float) float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test2481026() throws Throwable {
        Float[] floatArray0 = new Float[1];
        Float float0 = new Float((double) (-1L));
        floatArray0[0] = float0;
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1611.1229F));
        assertEquals(1, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test2481027() throws Throwable {
        Float[] floatArray0 = new Float[1];
        Float float0 = new Float((double) (-1L));
        floatArray0[0] = float0;
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1611.1229F));
        assertEquals(1, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test2481028() throws Throwable {
        Float[] floatArray0 = new Float[1];
        Float float0 = new Float((double) (-1L));
        floatArray0[0] = float0;
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1611.1229F));
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test2481029() throws Throwable {
        Float[] floatArray0 = new Float[1];
        Float float0 = new Float((double) (-1L));
        floatArray0[0] = float0;
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1611.1229F));
        assertArrayEquals(new float[] { (-1.0F) }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test2491030() throws Throwable {
        Float[] floatArray0 = new Float[1];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
        assertEquals(1, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test2491031() throws Throwable {
        Float[] floatArray0 = new Float[1];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
        assertEquals(1, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test2491032() throws Throwable {
        Float[] floatArray0 = new Float[1];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test2491033() throws Throwable {
        Float[] floatArray0 = new Float[1];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
        assertArrayEquals(new float[] { 773.19F }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test2501034() throws Throwable {
        float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 773.19F);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test2511035() throws Throwable {
        Float[] floatArray0 = new Float[0];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertEquals(0, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test2511036() throws Throwable {
        Float[] floatArray0 = new Float[0];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test2511037() throws Throwable {
        Float[] floatArray0 = new Float[0];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test2511038() throws Throwable {
        Float[] floatArray0 = new Float[0];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
        assertArrayEquals(new float[] {}, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test2521039() throws Throwable {
        float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test2531040() throws Throwable {
        Float[] floatArray0 = new Float[7];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(floatArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2541041() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test2541042() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test2541043() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test2541044() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2541045() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        assertNotNull(integer0);
    }

    @Test(timeout = 4000)
    public void test2541046() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        assertEquals(1, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test2541047() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test2541048() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test2541049() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
        assertEquals(0, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test2541050() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
        assertNotSame(doubleArray1, objectArray0);
    }

    @Test(timeout = 4000)
    public void test2541051() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
        assertNotNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test2541052() throws Throwable {
        double[] doubleArray0 = new double[0];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        Integer integer0 = new Integer(1);
        Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2551053() throws Throwable {
        Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2561054() throws Throwable {
        double[] doubleArray0 = new double[3];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test2561055() throws Throwable {
        double[] doubleArray0 = new double[3];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertEquals(3, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test2561056() throws Throwable {
        double[] doubleArray0 = new double[3];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test2561057() throws Throwable {
        double[] doubleArray0 = new double[3];
        Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2571058() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2688));
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test2571059() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2688));
        assertEquals((-2688.0), (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2571060() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2688));
        doubleArray0[3] = double0;
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[3]);
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test2571061() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2688));
        doubleArray0[3] = double0;
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[3]);
        assertEquals(6, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test2571062() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2688));
        doubleArray0[3] = double0;
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[3]);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test2571063() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2688));
        doubleArray0[3] = double0;
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[3]);
        assertArrayEquals(new double[] { (-2688.0), (-2688.0), (-2688.0), (-2688.0), (-2688.0), (-2688.0) }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test2581064() throws Throwable {
        double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-170.08209677487));
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2591065() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(432.3);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test2591066() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(432.3);
        assertEquals(432.3, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2591067() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(432.3);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        doubleArray0[3] = doubleArray0[0];
        doubleArray0[4] = doubleArray0[0];
        doubleArray0[5] = doubleArray0[1];
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test2591068() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(432.3);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        doubleArray0[3] = doubleArray0[0];
        doubleArray0[4] = doubleArray0[0];
        doubleArray0[5] = doubleArray0[1];
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
        assertEquals(6, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test2591069() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(432.3);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        doubleArray0[3] = doubleArray0[0];
        doubleArray0[4] = doubleArray0[0];
        doubleArray0[5] = doubleArray0[1];
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test2591070() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double(432.3);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        doubleArray0[3] = doubleArray0[0];
        doubleArray0[4] = doubleArray0[0];
        doubleArray0[5] = doubleArray0[1];
        double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
        assertArrayEquals(new double[] { 432.3, 432.3, 432.3, 432.3, 432.3, 432.3 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test2601071() throws Throwable {
        double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2611072() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(doubleArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2621073() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertEquals(7, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2621074() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertEquals(7, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test2621075() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test2621076() throws Throwable {
        byte[] byteArray0 = new byte[7];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test2631077() throws Throwable {
        Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2641078() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2641079() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test2641080() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test2641081() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test2651082() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        Byte byte1 = new Byte((byte) (-1));
        assertNotNull(byte1);
    }

    @Test(timeout = 4000)
    public void test2651083() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        Byte byte1 = new Byte((byte) (-1));
        assertTrue(byte1.equals((Object) byte0));
    }

    @Test(timeout = 4000)
    public void test2651084() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        Byte byte1 = new Byte((byte) (-1));
        assertEquals((byte) (-1), (byte) byte1);
    }

    @Test(timeout = 4000)
    public void test2651085() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        Byte byte1 = new Byte((byte) (-1));
        byteArray0[0] = byte1;
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2651086() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        Byte byte1 = new Byte((byte) (-1));
        byteArray0[0] = byte1;
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertEquals(1, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test2651087() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        Byte byte1 = new Byte((byte) (-1));
        byteArray0[0] = byte1;
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test2651088() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        Byte byte1 = new Byte((byte) (-1));
        byteArray0[0] = byte1;
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertArrayEquals(new byte[] { (byte) (-1) }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test2661089() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) 2);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2661090() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) 2);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test2661091() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) 2);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test2661092() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) 2);
        assertArrayEquals(new byte[] {}, byteArray1);
    }

    @Test(timeout = 4000)
    public void test2671093() throws Throwable {
        byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2681094() throws Throwable {
        Byte[] byteArray0 = new Byte[6];
        Byte byte0 = new Byte((byte) (-16));
        assertNotNull(byte0);
    }

    @Test(timeout = 4000)
    public void test2681095() throws Throwable {
        Byte[] byteArray0 = new Byte[6];
        Byte byte0 = new Byte((byte) (-16));
        assertEquals((byte) (-16), (byte) byte0);
    }

    @Test(timeout = 4000)
    public void test2681096() throws Throwable {
        Byte[] byteArray0 = new Byte[6];
        Byte byte0 = new Byte((byte) (-16));
        byteArray0[0] = byte0;
        byteArray0[1] = byte0;
        byteArray0[2] = byteArray0[0];
        byteArray0[3] = byteArray0[1];
        byteArray0[4] = byteArray0[1];
        byteArray0[5] = byteArray0[1];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2681097() throws Throwable {
        Byte[] byteArray0 = new Byte[6];
        Byte byte0 = new Byte((byte) (-16));
        byteArray0[0] = byte0;
        byteArray0[1] = byte0;
        byteArray0[2] = byteArray0[0];
        byteArray0[3] = byteArray0[1];
        byteArray0[4] = byteArray0[1];
        byteArray0[5] = byteArray0[1];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertEquals(6, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test2681098() throws Throwable {
        Byte[] byteArray0 = new Byte[6];
        Byte byte0 = new Byte((byte) (-16));
        byteArray0[0] = byte0;
        byteArray0[1] = byte0;
        byteArray0[2] = byteArray0[0];
        byteArray0[3] = byteArray0[1];
        byteArray0[4] = byteArray0[1];
        byteArray0[5] = byteArray0[1];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test2681099() throws Throwable {
        Byte[] byteArray0 = new Byte[6];
        Byte byte0 = new Byte((byte) (-16));
        byteArray0[0] = byte0;
        byteArray0[1] = byte0;
        byteArray0[2] = byteArray0[0];
        byteArray0[3] = byteArray0[1];
        byteArray0[4] = byteArray0[1];
        byteArray0[5] = byteArray0[1];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertArrayEquals(new byte[] { (byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16) }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test2691100() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2691101() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test2691102() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test2691103() throws Throwable {
        Byte[] byteArray0 = new Byte[0];
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
        assertArrayEquals(new byte[] {}, byteArray1);
    }

    @Test(timeout = 4000)
    public void test2701104() throws Throwable {
        byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2711105() throws Throwable {
        Byte[] byteArray0 = new Byte[18];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(byteArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2721106() throws Throwable {
        Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test2731107() throws Throwable {
        short[] shortArray0 = new short[4];
        Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
        assertEquals(4, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test2731108() throws Throwable {
        short[] shortArray0 = new short[4];
        Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
        assertEquals(4, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test2731109() throws Throwable {
        short[] shortArray0 = new short[4];
        Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test2731110() throws Throwable {
        short[] shortArray0 = new short[4];
        Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test2741111() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        shortArray1[0] = (Short) shortArray0[0];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertEquals(5, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test2741112() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        shortArray1[0] = (Short) shortArray0[0];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertEquals(5, shortArray2.length);
    }

    @Test(timeout = 4000)
    public void test2741113() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        shortArray1[0] = (Short) shortArray0[0];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertNotSame(shortArray2, shortArray0);
    }

    @Test(timeout = 4000)
    public void test2741114() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        shortArray1[0] = (Short) shortArray0[0];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertNotNull(shortArray2);
    }

    @Test(timeout = 4000)
    public void test2741115() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        shortArray1[0] = (Short) shortArray0[0];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertFalse(shortArray2.equals((Object) shortArray0));
    }

    @Test(timeout = 4000)
    public void test2741116() throws Throwable {
        short[] shortArray0 = new short[3];
        Short[] shortArray1 = new Short[5];
        shortArray1[0] = (Short) shortArray0[0];
        short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray2);
    }

    @Test(timeout = 4000)
    public void test2751117() throws Throwable {
        short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) 1137);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test2761118() throws Throwable {
        Short[] shortArray0 = new Short[7];
        shortArray0[0] = (Short) (short) 524;
        shortArray0[1] = (Short) (short) 2;
        shortArray0[2] = (Short) (short) 524;
        shortArray0[3] = (Short) (short) 524;
        shortArray0[4] = (Short) (short) 2;
        shortArray0[5] = (Short) (short) 4027;
        shortArray0[6] = (Short) (short) 2;
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertEquals(7, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test2761119() throws Throwable {
        Short[] shortArray0 = new Short[7];
        shortArray0[0] = (Short) (short) 524;
        shortArray0[1] = (Short) (short) 2;
        shortArray0[2] = (Short) (short) 524;
        shortArray0[3] = (Short) (short) 524;
        shortArray0[4] = (Short) (short) 2;
        shortArray0[5] = (Short) (short) 4027;
        shortArray0[6] = (Short) (short) 2;
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertEquals(7, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test2761120() throws Throwable {
        Short[] shortArray0 = new Short[7];
        shortArray0[0] = (Short) (short) 524;
        shortArray0[1] = (Short) (short) 2;
        shortArray0[2] = (Short) (short) 524;
        shortArray0[3] = (Short) (short) 524;
        shortArray0[4] = (Short) (short) 2;
        shortArray0[5] = (Short) (short) 4027;
        shortArray0[6] = (Short) (short) 2;
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test2761121() throws Throwable {
        Short[] shortArray0 = new Short[7];
        shortArray0[0] = (Short) (short) 524;
        shortArray0[1] = (Short) (short) 2;
        shortArray0[2] = (Short) (short) 524;
        shortArray0[3] = (Short) (short) 524;
        shortArray0[4] = (Short) (short) 2;
        shortArray0[5] = (Short) (short) 4027;
        shortArray0[6] = (Short) (short) 2;
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertArrayEquals(new short[] { (short) 524, (short) 2, (short) 524, (short) 524, (short) 2, (short) 4027, (short) 2 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test2771122() throws Throwable {
        Short[] shortArray0 = new Short[0];
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertEquals(0, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test2771123() throws Throwable {
        Short[] shortArray0 = new Short[0];
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertEquals(0, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test2771124() throws Throwable {
        Short[] shortArray0 = new Short[0];
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test2771125() throws Throwable {
        Short[] shortArray0 = new Short[0];
        short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
        assertArrayEquals(new short[] {}, shortArray1);
    }

    @Test(timeout = 4000)
    public void test2781126() throws Throwable {
        short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test2791127() throws Throwable {
        Short[] shortArray0 = new Short[7];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(shortArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2801128() throws Throwable {
        Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
        assertNull(integerArray0);
    }

    @Test(timeout = 4000)
    public void test2811129() throws Throwable {
        int[] intArray0 = new int[5];
        Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
        assertEquals(5, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test2811130() throws Throwable {
        int[] intArray0 = new int[5];
        Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
        assertEquals(5, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test2811131() throws Throwable {
        int[] intArray0 = new int[5];
        Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
        assertNotNull(integerArray0);
    }

    @Test(timeout = 4000)
    public void test2811132() throws Throwable {
        int[] intArray0 = new int[5];
        Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test2821133() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test2821134() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test2821135() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2821136() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        assertNotNull(integer0);
    }

    @Test(timeout = 4000)
    public void test2821137() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        assertFalse(integer0.equals((Object) int0));
    }

    @Test(timeout = 4000)
    public void test2821138() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        assertEquals((-3575), (int) integer0);
    }

    @Test(timeout = 4000)
    public void test2821139() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test2821140() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
        assertEquals(8, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test2821141() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
        assertEquals(8, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test2821142() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
        assertNotNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test2821143() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2821144() throws Throwable {
        double[] doubleArray0 = new double[3];
        int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
        Integer[] integerArray0 = new Integer[8];
        Integer integer0 = new Integer((-3575));
        integerArray0[0] = integer0;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
        assertArrayEquals(new int[] { (-3575), (-1), (-1), (-1), (-1), (-1), (-1), (-1) }, intArray0);
    }

    @Test(timeout = 4000)
    public void test2831145() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2398));
        assertEquals(0, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test2831146() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2398));
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test2831147() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2398));
        assertNotNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test2831148() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2398));
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test2841149() throws Throwable {
        int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test2851150() throws Throwable {
        Integer[] integerArray0 = new Integer[6];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(integerArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2861151() throws Throwable {
        int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test2871152() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertEquals(0, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test2871153() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertEquals(0, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test2871154() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertNotNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test2871155() throws Throwable {
        Integer[] integerArray0 = new Integer[0];
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test(timeout = 4000)
    public void test2881156() throws Throwable {
        Long[] longArray0 = ArrayUtils.toObject((long[]) null);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test2891157() throws Throwable {
        Long[] longArray0 = new Long[9];
        longArray0[0] = (Long) 0L;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 411L);
        assertEquals(9, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test2891158() throws Throwable {
        Long[] longArray0 = new Long[9];
        longArray0[0] = (Long) 0L;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 411L);
        assertEquals(9, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test2891159() throws Throwable {
        Long[] longArray0 = new Long[9];
        longArray0[0] = (Long) 0L;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 411L);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test2891160() throws Throwable {
        Long[] longArray0 = new Long[9];
        longArray0[0] = (Long) 0L;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 411L);
        assertArrayEquals(new long[] { 0L, 411L, 411L, 411L, 411L, 411L, 411L, 411L, 411L }, longArray1);
    }

    @Test(timeout = 4000)
    public void test2901161() throws Throwable {
        long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-3214L));
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test2911162() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3609L);
        assertEquals(0, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test2911163() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3609L);
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test2911164() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3609L);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test2911165() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3609L);
        assertArrayEquals(new long[] {}, longArray1);
    }

    @Test(timeout = 4000)
    public void test2921166() throws Throwable {
        Long[] longArray0 = new Long[4];
        Long long0 = new Long(0);
        assertNotNull(long0);
    }

    @Test(timeout = 4000)
    public void test2921167() throws Throwable {
        Long[] longArray0 = new Long[4];
        Long long0 = new Long(0);
        assertEquals(0L, (long) long0);
    }

    @Test(timeout = 4000)
    public void test2921168() throws Throwable {
        Long[] longArray0 = new Long[4];
        Long long0 = new Long(0);
        longArray0[0] = long0;
        longArray0[1] = longArray0[0];
        longArray0[2] = long0;
        longArray0[3] = long0;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertEquals(4, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test2921169() throws Throwable {
        Long[] longArray0 = new Long[4];
        Long long0 = new Long(0);
        longArray0[0] = long0;
        longArray0[1] = longArray0[0];
        longArray0[2] = long0;
        longArray0[3] = long0;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertEquals(4, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test2921170() throws Throwable {
        Long[] longArray0 = new Long[4];
        Long long0 = new Long(0);
        longArray0[0] = long0;
        longArray0[1] = longArray0[0];
        longArray0[2] = long0;
        longArray0[3] = long0;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test2921171() throws Throwable {
        Long[] longArray0 = new Long[4];
        Long long0 = new Long(0);
        longArray0[0] = long0;
        longArray0[1] = longArray0[0];
        longArray0[2] = long0;
        longArray0[3] = long0;
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertArrayEquals(new long[] { 0L, 0L, 0L, 0L }, longArray1);
    }

    @Test(timeout = 4000)
    public void test2931172() throws Throwable {
        Long[] longArray0 = new Long[5];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(longArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2941173() throws Throwable {
        long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test2951174() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertEquals(0, longArray0.length);
    }

    @Test(timeout = 4000)
    public void test2951175() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test2951176() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test2951177() throws Throwable {
        Long[] longArray0 = new Long[0];
        long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
        assertArrayEquals(new long[] {}, longArray1);
    }

    @Test(timeout = 4000)
    public void test2961178() throws Throwable {
        char[] charArray0 = new char[0];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test2961179() throws Throwable {
        char[] charArray0 = new char[0];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertEquals(0, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test2961180() throws Throwable {
        char[] charArray0 = new char[0];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertNotNull(characterArray0);
    }

    @Test(timeout = 4000)
    public void test2961181() throws Throwable {
        char[] charArray0 = new char[0];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertArrayEquals(new char[] {}, charArray0);
    }

    @Test(timeout = 4000)
    public void test2971182() throws Throwable {
        Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
        assertNull(characterArray0);
    }

    @Test(timeout = 4000)
    public void test2981183() throws Throwable {
        char[] charArray0 = new char[4];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test2981184() throws Throwable {
        char[] charArray0 = new char[4];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertEquals(4, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test2981185() throws Throwable {
        char[] charArray0 = new char[4];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertNotNull(characterArray0);
    }

    @Test(timeout = 4000)
    public void test2981186() throws Throwable {
        char[] charArray0 = new char[4];
        Character[] characterArray0 = ArrayUtils.toObject(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test2991187() throws Throwable {
        char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '(');
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test3001188() throws Throwable {
        Character[] characterArray0 = new Character[6];
        Character character0 = new Character('+');
        assertNotNull(character0);
    }

    @Test(timeout = 4000)
    public void test3001189() throws Throwable {
        Character[] characterArray0 = new Character[6];
        Character character0 = new Character('+');
        assertEquals('+', (char) character0);
    }

    @Test(timeout = 4000)
    public void test3001190() throws Throwable {
        Character[] characterArray0 = new Character[6];
        Character character0 = new Character('+');
        characterArray0[3] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[3]);
        assertEquals(6, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test3001191() throws Throwable {
        Character[] characterArray0 = new Character[6];
        Character character0 = new Character('+');
        characterArray0[3] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[3]);
        assertEquals(6, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test3001192() throws Throwable {
        Character[] characterArray0 = new Character[6];
        Character character0 = new Character('+');
        characterArray0[3] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[3]);
        assertNotNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test3001193() throws Throwable {
        Character[] characterArray0 = new Character[6];
        Character character0 = new Character('+');
        characterArray0[3] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[3]);
        assertArrayEquals(new char[] { '+', '+', '+', '+', '+', '+' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test3011194() throws Throwable {
        Character[] characterArray0 = new Character[1];
        Character character0 = new Character('X');
        assertNotNull(character0);
    }

    @Test(timeout = 4000)
    public void test3011195() throws Throwable {
        Character[] characterArray0 = new Character[1];
        Character character0 = new Character('X');
        assertEquals('X', (char) character0);
    }

    @Test(timeout = 4000)
    public void test3011196() throws Throwable {
        Character[] characterArray0 = new Character[1];
        Character character0 = new Character('X');
        characterArray0[0] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertEquals(1, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test3011197() throws Throwable {
        Character[] characterArray0 = new Character[1];
        Character character0 = new Character('X');
        characterArray0[0] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertEquals(1, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test3011198() throws Throwable {
        Character[] characterArray0 = new Character[1];
        Character character0 = new Character('X');
        characterArray0[0] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertNotNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test3011199() throws Throwable {
        Character[] characterArray0 = new Character[1];
        Character character0 = new Character('X');
        characterArray0[0] = character0;
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertArrayEquals(new char[] { 'X' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test3021200() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertEquals(0, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test3021201() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test3021202() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertNotNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test3021203() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        assertArrayEquals(new char[] {}, charArray0);
    }

    @Test(timeout = 4000)
    public void test3021204() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertEquals(0, characterArray0.length);
    }

    @Test(timeout = 4000)
    public void test3021205() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertEquals(0, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test3021206() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertEquals(0, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test3021207() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertNotSame(charArray0, charArray1);
    }

    @Test(timeout = 4000)
    public void test3021208() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test3021209() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test3021210() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertFalse(charArray1.equals((Object) charArray0));
    }

    @Test(timeout = 4000)
    public void test3021211() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertArrayEquals(new char[] {}, charArray0);
    }

    @Test(timeout = 4000)
    public void test3021212() throws Throwable {
        Character[] characterArray0 = new Character[0];
        char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
        char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
        assertArrayEquals(new char[] {}, charArray1);
    }

    @Test(timeout = 4000)
    public void test3031213() throws Throwable {
        Character[] characterArray0 = new Character[4];
        // Undeclared exception!
        try {
            ArrayUtils.toPrimitive(characterArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3041214() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
        assertEquals(0, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test3041215() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3041216() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test3051217() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        booleanArray0[1] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
        assertEquals(9, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test3051218() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        booleanArray0[1] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test3051219() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        booleanArray0[1] = true;
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
        assertTrue(Arrays.equals(new boolean[] { false, true, false, false, false, false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test3061220() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1976));
        assertEquals(1, booleanArray0.length);
    }

    @Test(timeout = 4000)
    public void test3061221() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1976));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3061222() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1976));
        assertTrue(Arrays.equals(new boolean[] { false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test3071223() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-921));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3081224() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[5] = (float) (-1);
        boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte) (-1));
        assertEquals(7, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test3081225() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[5] = (float) (-1);
        boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte) (-1));
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3081226() throws Throwable {
        float[] floatArray0 = new float[7];
        floatArray0[5] = (float) (-1);
        boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte) (-1));
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3091227() throws Throwable {
        float[] floatArray0 = new float[9];
        floatArray0[1] = (-2418.9207F);
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2418.9207F), 1431655765);
        assertEquals(9, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test3091228() throws Throwable {
        float[] floatArray0 = new float[9];
        floatArray0[1] = (-2418.9207F);
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2418.9207F), 1431655765);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test3091229() throws Throwable {
        float[] floatArray0 = new float[9];
        floatArray0[1] = (-2418.9207F);
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2418.9207F), 1431655765);
        assertArrayEquals(new float[] { 0.0F, (-2418.9207F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3101230() throws Throwable {
        float[] floatArray0 = new float[2];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, 2016.2957F, 0);
        assertEquals(2, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test3101231() throws Throwable {
        float[] floatArray0 = new float[2];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, 2016.2957F, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3101232() throws Throwable {
        float[] floatArray0 = new float[2];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, 2016.2957F, 0);
        assertArrayEquals(new float[] { 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3111233() throws Throwable {
        float[] floatArray0 = new float[9];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, 3137.0F, (-3040));
        assertEquals(9, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test3111234() throws Throwable {
        float[] floatArray0 = new float[9];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, 3137.0F, (-3040));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3111235() throws Throwable {
        float[] floatArray0 = new float[9];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, 3137.0F, (-3040));
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3121236() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1), (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3131237() throws Throwable {
        float[] floatArray0 = new float[1];
        floatArray0[0] = (-860.273F);
        int int0 = ArrayUtils.indexOf(floatArray0, (-860.273F));
        assertEquals(1, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test3131238() throws Throwable {
        float[] floatArray0 = new float[1];
        floatArray0[0] = (-860.273F);
        int int0 = ArrayUtils.indexOf(floatArray0, (-860.273F));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3131239() throws Throwable {
        float[] floatArray0 = new float[1];
        floatArray0[0] = (-860.273F);
        int int0 = ArrayUtils.indexOf(floatArray0, (-860.273F));
        assertArrayEquals(new float[] { (-860.273F) }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3141240() throws Throwable {
        float[] floatArray0 = new float[9];
        int int0 = ArrayUtils.indexOf(floatArray0, (-1527.7157F), (-171));
        assertEquals(9, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test3141241() throws Throwable {
        float[] floatArray0 = new float[9];
        int int0 = ArrayUtils.indexOf(floatArray0, (-1527.7157F), (-171));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3141242() throws Throwable {
        float[] floatArray0 = new float[9];
        int int0 = ArrayUtils.indexOf(floatArray0, (-1527.7157F), (-171));
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3151243() throws Throwable {
        float[] floatArray0 = new float[0];
        int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE, 0);
        assertEquals(0, floatArray0.length);
    }

    @Test(timeout = 4000)
    public void test3151244() throws Throwable {
        float[] floatArray0 = new float[0];
        int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE, 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3151245() throws Throwable {
        float[] floatArray0 = new float[0];
        int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE, 0);
        assertArrayEquals(new float[] {}, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3161246() throws Throwable {
        double[] doubleArray0 = new double[6];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 852.61459120328, 2918.5301702262213);
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3161247() throws Throwable {
        double[] doubleArray0 = new double[6];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 852.61459120328, 2918.5301702262213);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3161248() throws Throwable {
        double[] doubleArray0 = new double[6];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 852.61459120328, 2918.5301702262213);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3171249() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[6] = (double) 1;
        boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) 1);
        assertEquals(7, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3171250() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[6] = (double) 1;
        boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) 1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3171251() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[6] = (double) 1;
        boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) 1);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3181252() throws Throwable {
        double[] doubleArray0 = new double[5];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1508.771535));
        assertEquals(5, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3181253() throws Throwable {
        double[] doubleArray0 = new double[5];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1508.771535));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3181254() throws Throwable {
        double[] doubleArray0 = new double[5];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1508.771535));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3191255() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[5] = 6485.40117429313;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1747.7, 7009, (-467.02517183));
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3191256() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[5] = 6485.40117429313;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1747.7, 7009, (-467.02517183));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3191257() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[5] = 6485.40117429313;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1747.7, 7009, (-467.02517183));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 6485.40117429313 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3201258() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2900.31171079269, (-2481), (-1466.0));
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3201259() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2900.31171079269, (-2481), (-1466.0));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3201260() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2900.31171079269, (-2481), (-1466.0));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3211261() throws Throwable {
        double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3211262() throws Throwable {
        double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        assertNotNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test3211263() throws Throwable {
        double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3211264() throws Throwable {
        double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-449.04364), 2169, 2763.752662583577);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3211265() throws Throwable {
        double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-449.04364), 2169, 2763.752662583577);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3211266() throws Throwable {
        double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-449.04364), 2169, 2763.752662583577);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3221267() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-1.0);
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
        assertEquals(2, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3221268() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-1.0);
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3221269() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (-1.0);
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
        assertArrayEquals(new double[] { (-1.0), 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3231270() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2185.793, (-1));
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3231271() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2185.793, (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3231272() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2185.793, (-1));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3241273() throws Throwable {
        double[] doubleArray0 = new double[0];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-532.94708536686), 2507);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3241274() throws Throwable {
        double[] doubleArray0 = new double[0];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-532.94708536686), 2507);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3241275() throws Throwable {
        double[] doubleArray0 = new double[0];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-532.94708536686), 2507);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3251276() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 2921.217853;
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 104.5F, (-1), (double) (-1118.4F));
        assertEquals(1, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3251277() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 2921.217853;
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 104.5F, (-1), (double) (-1118.4F));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3251278() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = 2921.217853;
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) 104.5F, (-1), (double) (-1118.4F));
        assertArrayEquals(new double[] { 2921.217853 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3261279() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 573.260065281386);
        assertEquals(8, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3261280() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 573.260065281386);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3261281() throws Throwable {
        double[] doubleArray0 = new double[8];
        int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 573.260065281386);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3271282() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 0.0);
        assertEquals(3, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3271283() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 0.0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3271284() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 0.0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3281285() throws Throwable {
        double[] doubleArray0 = new double[6];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
        assertEquals(6, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3281286() throws Throwable {
        double[] doubleArray0 = new double[6];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3281287() throws Throwable {
        double[] doubleArray0 = new double[6];
        int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3291288() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertEquals(0, doubleArray0.length);
    }

    @Test(timeout = 4000)
    public void test3291289() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test3291290() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertNotSame(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test3291291() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test3291292() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test3291293() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertFalse(doubleArray1.equals((Object) doubleArray0));
    }

    @Test(timeout = 4000)
    public void test3291294() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertArrayEquals(new double[] {}, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3291295() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
        assertArrayEquals(new double[] {}, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test3301296() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 55;
        boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) 55);
        assertEquals(3, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test3301297() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 55;
        boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) 55);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3301298() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 55;
        boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) 55);
        assertArrayEquals(new byte[] { (byte) 55, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test3311299() throws Throwable {
        byte[] byteArray0 = new byte[9];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 0, (int) (byte) 0);
        assertEquals(9, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test3311300() throws Throwable {
        byte[] byteArray0 = new byte[9];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 0, (int) (byte) 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3311301() throws Throwable {
        byte[] byteArray0 = new byte[9];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 0, (int) (byte) 0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test3321302() throws Throwable {
        byte[] byteArray0 = new byte[3];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38), (int) (byte) (-119));
        assertEquals(3, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test3321303() throws Throwable {
        byte[] byteArray0 = new byte[3];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38), (int) (byte) (-119));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3321304() throws Throwable {
        byte[] byteArray0 = new byte[3];
        int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38), (int) (byte) (-119));
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test3331305() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3341306() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test3341307() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertEquals(1, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test3341308() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertNotNull(byteArray1);
    }

    @Test(timeout = 4000)
    public void test3341309() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        assertArrayEquals(new byte[] { (byte) (-1) }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test3341310() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-68), (int) (byte) (-127));
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test3341311() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-68), (int) (byte) (-127));
        assertEquals(1, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test3341312() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-68), (int) (byte) (-127));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3341313() throws Throwable {
        Byte[] byteArray0 = new Byte[1];
        byte byte0 = (byte) (-1);
        byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
        int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-68), (int) (byte) (-127));
        assertArrayEquals(new byte[] { (byte) (-1) }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test3351314() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-57));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3361315() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
        assertEquals(1, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test3361316() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3361317() throws Throwable {
        char[] charArray0 = new char[1];
        charArray0[0] = 'j';
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
        assertArrayEquals(new char[] { 'j' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test3371318() throws Throwable {
        char[] charArray0 = new char[4];
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', (int) (byte) (-123));
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test3371319() throws Throwable {
        char[] charArray0 = new char[4];
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', (int) (byte) (-123));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3371320() throws Throwable {
        char[] charArray0 = new char[4];
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', (int) (byte) (-123));
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test3381321() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((char[]) null, 'A', (int) (byte) (-124));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3391322() throws Throwable {
        char[] charArray0 = new char[4];
        charArray0[1] = 'n';
        boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test3391323() throws Throwable {
        char[] charArray0 = new char[4];
        charArray0[1] = 'n';
        boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3391324() throws Throwable {
        char[] charArray0 = new char[4];
        charArray0[1] = 'n';
        boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
        assertArrayEquals(new char[] { '\u0000', 'n', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test3401325() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[1] = (short) 408;
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) 408);
        assertEquals(7, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test3401326() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[1] = (short) 408;
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) 408);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3401327() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[1] = (short) 408;
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) 408);
        assertArrayEquals(new short[] { (short) 0, (short) 408, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test3411328() throws Throwable {
        short[] shortArray0 = new short[9];
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-997));
        assertEquals(9, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test3411329() throws Throwable {
        short[] shortArray0 = new short[9];
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-997));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3411330() throws Throwable {
        short[] shortArray0 = new short[9];
        boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-997));
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test3421331() throws Throwable {
        short[] shortArray0 = new short[1];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1, (int) (short) 0);
        assertEquals(1, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test3421332() throws Throwable {
        short[] shortArray0 = new short[1];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1, (int) (short) 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3421333() throws Throwable {
        short[] shortArray0 = new short[1];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1, (int) (short) 0);
        assertArrayEquals(new short[] { (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test3431334() throws Throwable {
        short[] shortArray0 = new short[3];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2595), (int) (short) (-922));
        assertEquals(3, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test3431335() throws Throwable {
        short[] shortArray0 = new short[3];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2595), (int) (short) (-922));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3431336() throws Throwable {
        short[] shortArray0 = new short[3];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2595), (int) (short) (-922));
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test3441337() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) 21845, 2103657451);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3441338() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) 21845, 2103657451);
        Integer[] integerArray0 = new Integer[6];
        integerArray0[0] = (Integer) 21845;
        integerArray0[1] = (Integer) 2103657451;
        integerArray0[2] = (Integer) int0;
        integerArray0[3] = (Integer) 21845;
        integerArray0[4] = (Integer) 21845;
        integerArray0[5] = (Integer) 2103657451;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertEquals(6, integerArray0.length);
    }

    @Test(timeout = 4000)
    public void test3441339() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) 21845, 2103657451);
        Integer[] integerArray0 = new Integer[6];
        integerArray0[0] = (Integer) 21845;
        integerArray0[1] = (Integer) 2103657451;
        integerArray0[2] = (Integer) int0;
        integerArray0[3] = (Integer) 21845;
        integerArray0[4] = (Integer) 21845;
        integerArray0[5] = (Integer) 2103657451;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertEquals(6, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test3441340() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) 21845, 2103657451);
        Integer[] integerArray0 = new Integer[6];
        integerArray0[0] = (Integer) 21845;
        integerArray0[1] = (Integer) 2103657451;
        integerArray0[2] = (Integer) int0;
        integerArray0[3] = (Integer) 21845;
        integerArray0[4] = (Integer) 21845;
        integerArray0[5] = (Integer) 2103657451;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertNotNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test3441341() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) 21845, 2103657451);
        Integer[] integerArray0 = new Integer[6];
        integerArray0[0] = (Integer) 21845;
        integerArray0[1] = (Integer) 2103657451;
        integerArray0[2] = (Integer) int0;
        integerArray0[3] = (Integer) 21845;
        integerArray0[4] = (Integer) 21845;
        integerArray0[5] = (Integer) 2103657451;
        int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
        assertArrayEquals(new int[] { 21845, 2103657451, (-1), 21845, 21845, 2103657451 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test3451342() throws Throwable {
        short[] shortArray0 = new short[1];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
        assertEquals(1, shortArray0.length);
    }

    @Test(timeout = 4000)
    public void test3451343() throws Throwable {
        short[] shortArray0 = new short[1];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3451344() throws Throwable {
        short[] shortArray0 = new short[1];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
        assertArrayEquals(new short[] { (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test3461345() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[4] = (int) (short) 21845;
        boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short) 21845);
        assertEquals(6, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test3461346() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[4] = (int) (short) 21845;
        boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short) 21845);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3461347() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[4] = (int) (short) 21845;
        boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short) 21845);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 21845, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test3471348() throws Throwable {
        int[] intArray0 = new int[5];
        int int0 = ArrayUtils.lastIndexOf(intArray0, 4, 63);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3481349() throws Throwable {
        int[] intArray0 = new int[3];
        int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3491350() throws Throwable {
        int[] intArray0 = new int[8];
        int int0 = ArrayUtils.lastIndexOf(intArray0, (-2283), (-4388));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3501351() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1), Integer.MAX_VALUE);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3511352() throws Throwable {
        int[] intArray0 = new int[9];
        int int0 = ArrayUtils.indexOf(intArray0, 690, (-3296));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3521353() throws Throwable {
        boolean boolean0 = ArrayUtils.contains((int[]) null, (-3259));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3531354() throws Throwable {
        long[] longArray0 = new long[2];
        longArray0[0] = 2L;
        boolean boolean0 = ArrayUtils.contains(longArray0, 2L);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3541355() throws Throwable {
        long[] longArray0 = new long[7];
        int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3551356() throws Throwable {
        long[] longArray0 = new long[6];
        int int0 = ArrayUtils.lastIndexOf(longArray0, (-36L), (-2144778109));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3561357() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((long[]) null, 184L, (-89));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3571358() throws Throwable {
        long[] longArray0 = new long[8];
        longArray0[0] = (long) (short) (-1480);
        int int0 = ArrayUtils.indexOf(longArray0, (-1480L));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3581359() throws Throwable {
        long[] longArray0 = new long[6];
        int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3591360() throws Throwable {
        int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-109), (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3601361() throws Throwable {
        Object[] objectArray0 = new Object[4];
        boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3611362() throws Throwable {
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) (-221.0F);
        int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3621363() throws Throwable {
        Object[] objectArray0 = new Object[8];
        objectArray0[0] = (Object) (-2312L);
        objectArray0[1] = (Object) (-2312L);
        objectArray0[2] = (Object) (-2312L);
        objectArray0[3] = (Object) (-780L);
        objectArray0[4] = objectArray0[2];
        objectArray0[5] = (Object) (-2312L);
        objectArray0[6] = (Object) (-2312L);
        objectArray0[7] = (Object) (-780L);
        int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3937);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3631364() throws Throwable {
        Object[] objectArray0 = new Object[1];
        int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "e$VCh]x", 0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3641365() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) "', is neither of type Map.Entry nor an Array", (-44));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3651366() throws Throwable {
        int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "MZ&P", 36);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test3661367() throws Throwable {
        Object[] objectArray0 = new Object[9];
        objectArray0[2] = (Object) 'n';
        int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test3671368() throws Throwable {
        Object[] objectArray0 = new Object[0];
        Object object0 = new Object();
        boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3681369() throws Throwable {
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) false;
        Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) null);
        assertEquals(1, objectArray1.length);
    }

    @Test(timeout = 4000)
    public void test3691370() throws Throwable {
        Object[] objectArray0 = new Object[2];
        int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-922));
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3701371() throws Throwable {
        ArrayUtils.reverse((boolean[]) null);
    }

    @Test(timeout = 4000)
    public void test3711372() throws Throwable {
        boolean[] booleanArray0 = new boolean[4];
        ArrayUtils.reverse(booleanArray0);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false }, booleanArray0));
    }

    @Test(timeout = 4000)
    public void test3721373() throws Throwable {
        ArrayUtils.reverse((float[]) null);
    }

    @Test(timeout = 4000)
    public void test3731374() throws Throwable {
        float[] floatArray0 = new float[9];
        ArrayUtils.reverse(floatArray0);
        assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test3741375() throws Throwable {
        ArrayUtils.reverse((double[]) null);
    }

    @Test(timeout = 4000)
    public void test3751376() throws Throwable {
        double[] doubleArray0 = new double[3];
        ArrayUtils.reverse(doubleArray0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3761377() throws Throwable {
        ArrayUtils.reverse((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test3771378() throws Throwable {
        ArrayUtils.reverse((char[]) null);
    }

    @Test(timeout = 4000)
    public void test3781379() throws Throwable {
        char[] charArray0 = new char[4];
        ArrayUtils.reverse(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test3791380() throws Throwable {
        ArrayUtils.reverse((short[]) null);
    }

    @Test(timeout = 4000)
    public void test3801381() throws Throwable {
        short[] shortArray0 = new short[3];
        ArrayUtils.reverse(shortArray0);
        assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test3811382() throws Throwable {
        ArrayUtils.reverse((int[]) null);
    }

    @Test(timeout = 4000)
    public void test3821383() throws Throwable {
        int[] intArray0 = new int[3];
        ArrayUtils.reverse(intArray0);
        assertArrayEquals(new int[] { 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test3831384() throws Throwable {
        ArrayUtils.reverse((long[]) null);
    }

    @Test(timeout = 4000)
    public void test3841385() throws Throwable {
        long[] longArray0 = new long[2];
        ArrayUtils.reverse(longArray0);
        assertArrayEquals(new long[] { 0L, 0L }, longArray0);
    }

    @Test(timeout = 4000)
    public void test3851386() throws Throwable {
        ArrayUtils.reverse((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test3861387() throws Throwable {
        Object[] objectArray0 = new Object[5];
        ArrayUtils.reverse(objectArray0);
        assertEquals(5, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test3871388() throws Throwable {
        Object object0 = new Object();
        boolean boolean0 = ArrayUtils.isSameType(object0, "Mac");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3881389() throws Throwable {
        // Undeclared exception!
        try {
            ArrayUtils.isSameType((Object) null, (Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The Array must not be null
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3891390() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean[] booleanArray1 = new boolean[0];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3901391() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3911392() throws Throwable {
        boolean[] booleanArray0 = new boolean[1];
        boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3921393() throws Throwable {
        float[] floatArray0 = new float[9];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3921394() throws Throwable {
        float[] floatArray0 = new float[9];
        float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
        boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
        assertEquals(18, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test3931395() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3941396() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3951397() throws Throwable {
        float[] floatArray0 = new float[7];
        boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3961398() throws Throwable {
        double[] doubleArray0 = new double[0];
        boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3971399() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3981400() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3991401() throws Throwable {
        byte[] byteArray0 = new byte[0];
        byte[] byteArray1 = new byte[4];
        boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4001402() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4011403() throws Throwable {
        byte[] byteArray0 = new byte[6];
        boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4021404() throws Throwable {
        char[] charArray0 = new char[0];
        char[] charArray1 = new char[4];
        boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4031405() throws Throwable {
        char[] charArray0 = new char[2];
        boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4041406() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4051407() throws Throwable {
        char[] charArray0 = new char[2];
        boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4061408() throws Throwable {
        short[] shortArray0 = new short[9];
        short[] shortArray1 = new short[2];
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4071409() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4081410() throws Throwable {
        short[] shortArray0 = new short[3];
        boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4091411() throws Throwable {
        int[] intArray0 = new int[3];
        boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4101412() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4111413() throws Throwable {
        int[] intArray0 = new int[5];
        boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4121414() throws Throwable {
        long[] longArray0 = new long[4];
        long[] longArray1 = new long[2];
        boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4131415() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4141416() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4151417() throws Throwable {
        Object[] objectArray0 = new Object[7];
        Object[] objectArray1 = new Object[2];
        boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4161418() throws Throwable {
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4171419() throws Throwable {
        Object[] objectArray0 = new Object[5];
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4181420() throws Throwable {
        long[] longArray0 = new long[3];
        Long[] longArray1 = ArrayUtils.toObject(longArray0);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test4181421() throws Throwable {
        long[] longArray0 = new long[3];
        Long[] longArray1 = ArrayUtils.toObject(longArray0);
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray1, (Object[]) longArray1);
        assertEquals(3, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test4181422() throws Throwable {
        long[] longArray0 = new long[3];
        Long[] longArray1 = ArrayUtils.toObject(longArray0);
        boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray1, (Object[]) longArray1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4191423() throws Throwable {
        boolean[] booleanArray0 = new boolean[2];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 2607);
        assertEquals(1, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test4201424() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, 7);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test4211425() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-963), 0);
        assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test4221426() throws Throwable {
        float[] floatArray0 = new float[4];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, Integer.MAX_VALUE);
        assertNotSame(floatArray1, floatArray0);
    }

    @Test(timeout = 4000)
    public void test4221427() throws Throwable {
        float[] floatArray0 = new float[4];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, Integer.MAX_VALUE);
        assertEquals(4, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test4231428() throws Throwable {
        float[] floatArray0 = new float[7];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2147), (-2147));
        assertEquals(0, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test4241429() throws Throwable {
        float[] floatArray0 = ArrayUtils.subarray((float[]) null, 2, 2);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test4251430() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = ArrayUtils.subarray(floatArray0, 57, (-416));
        assertNotSame(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test4261431() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1472, (-1));
        assertArrayEquals(new double[] {}, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test4271432() throws Throwable {
        double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2303, 3575);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test4281433() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 1472);
        assertNotNull(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test4281434() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 1472);
        assertEquals(2, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test4281435() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 1472);
        assertNotSame(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test4291436() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        shortArray0[1] = shortArray0[0];
        short short1 = (short) (-16);
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) short1, (int) shortArray0[1]);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test4291437() throws Throwable {
        Short[] shortArray0 = new Short[5];
        Short short0 = new Short((short) 1588);
        shortArray0[0] = short0;
        shortArray0[1] = shortArray0[0];
        short short1 = (short) (-16);
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) short1, (int) shortArray0[1]);
        assertEquals(2, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test4301438() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, 0, 1285);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test4311439() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) 1, (-1));
        assertEquals(0, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test4321440() throws Throwable {
        byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-918), 672);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test4331441() throws Throwable {
        char[] charArray0 = new char[1];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (-2083), Integer.MAX_VALUE);
        assertNotSame(charArray1, charArray0);
    }

    @Test(timeout = 4000)
    public void test4331442() throws Throwable {
        char[] charArray0 = new char[1];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (-2083), Integer.MAX_VALUE);
        assertEquals(1, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test4341443() throws Throwable {
        char[] charArray0 = new char[4];
        char[] charArray1 = ArrayUtils.subarray(charArray0, (-3033), (int) (byte) 2);
        assertEquals(2, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test4351444() throws Throwable {
        char[] charArray0 = ArrayUtils.subarray((char[]) null, 3313, 1);
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test4361445() throws Throwable {
        char[] charArray0 = new char[4];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test4361446() throws Throwable {
        char[] charArray0 = new char[4];
        char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
        assertEquals(0, charArray1.length);
    }

    @Test(timeout = 4000)
    public void test4371447() throws Throwable {
        short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1, (-93));
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test4381448() throws Throwable {
        short[] shortArray0 = new short[5];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) 1, 2197);
        assertNotNull(shortArray1);
    }

    @Test(timeout = 4000)
    public void test4381449() throws Throwable {
        short[] shortArray0 = new short[5];
        short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) 1, 2197);
        assertEquals(4, shortArray1.length);
    }

    @Test(timeout = 4000)
    public void test4391450() throws Throwable {
        int[] intArray0 = new int[9];
        int[] intArray1 = ArrayUtils.subarray(intArray0, (-942), 0);
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test4401451() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = ArrayUtils.subarray(intArray0, 297, 2146540524);
        assertEquals(0, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test4411452() throws Throwable {
        int[] intArray0 = ArrayUtils.subarray((int[]) null, 971, (-1525));
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test4421453() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = ArrayUtils.subarray(intArray0, (-785), 2660);
        assertNotSame(intArray1, intArray0);
    }

    @Test(timeout = 4000)
    public void test4421454() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = ArrayUtils.subarray(intArray0, (-785), 2660);
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test4421455() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = ArrayUtils.subarray(intArray0, (-785), 2660);
        assertEquals(6, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test4431456() throws Throwable {
        long[] longArray0 = new long[1];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (int) (short) (-2204));
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test4441457() throws Throwable {
        long[] longArray0 = new long[6];
        long[] longArray1 = ArrayUtils.subarray(longArray0, 2146214317, 2146214317);
        assertEquals(0, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test4451458() throws Throwable {
        long[] longArray0 = ArrayUtils.subarray((long[]) null, 57, 2527);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test4461459() throws Throwable {
        long[] longArray0 = new long[6];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (-416), 1264);
        assertEquals(6, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test4461460() throws Throwable {
        long[] longArray0 = new long[6];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (-416), 1264);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test4461461() throws Throwable {
        long[] longArray0 = new long[6];
        long[] longArray1 = ArrayUtils.subarray(longArray0, (-416), 1264);
        assertNotNull(longArray1);
    }

    @Test(timeout = 4000)
    public void test4471462() throws Throwable {
        short[] shortArray0 = new short[3];
        Integer[] integerArray0 = new Integer[2];
        Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) shortArray0[0], (int) 0);
        assertEquals(0, integerArray1.length);
    }

    @Test(timeout = 4000)
    public void test4481463() throws Throwable {
        String[] stringArray0 = new String[5];
        String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2169, 1731);
        assertEquals(0, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test4491464() throws Throwable {
        AbstractMap.SimpleImmutableEntry<String, Object>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.subarray((AbstractMap.SimpleImmutableEntry<String, Object>[]) null, (int) 2, 1);
        assertNull(abstractMap_SimpleImmutableEntryArray0);
    }

    @Test(timeout = 4000)
    public void test4501465() throws Throwable {
        AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
        AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleEntryArray0, (int) (-101), 3475);
        assertNotNull(abstractMap_SimpleEntryArray1);
    }

    @Test(timeout = 4000)
    public void test4501466() throws Throwable {
        AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
        AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleEntryArray0, (int) (-101), 3475);
        assertEquals(7, abstractMap_SimpleEntryArray1.length);
    }

    @Test(timeout = 4000)
    public void test4501467() throws Throwable {
        AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
        AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleEntryArray0, (int) (-101), 3475);
        assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
    }

    @Test(timeout = 4000)
    public void test4511468() throws Throwable {
        boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
        assertNull(booleanArray0);
    }

    @Test(timeout = 4000)
    public void test4521469() throws Throwable {
        boolean[] booleanArray0 = new boolean[0];
        boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
        assertNotSame(booleanArray0, booleanArray1);
    }

    @Test(timeout = 4000)
    public void test4531470() throws Throwable {
        float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
        assertNull(floatArray0);
    }

    @Test(timeout = 4000)
    public void test4541471() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.clone(floatArray0);
        assertNotNull(floatArray1);
    }

    @Test(timeout = 4000)
    public void test4541472() throws Throwable {
        float[] floatArray0 = new float[3];
        float[] floatArray1 = ArrayUtils.clone(floatArray0);
        assertEquals(3, floatArray1.length);
    }

    @Test(timeout = 4000)
    public void test4551473() throws Throwable {
        double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
        assertNull(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test4561474() throws Throwable {
        byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test4571475() throws Throwable {
        short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) 0);
        assertNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test4581476() throws Throwable {
        short[] shortArray0 = new short[0];
        short[] shortArray1 = ArrayUtils.clone(shortArray0);
        assertNotSame(shortArray1, shortArray0);
    }

    @Test(timeout = 4000)
    public void test4591477() throws Throwable {
        int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
        assertNull(intArray0);
    }

    @Test(timeout = 4000)
    public void test4601478() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-951));
        assertNotNull(intArray1);
    }

    @Test(timeout = 4000)
    public void test4601479() throws Throwable {
        int[] intArray0 = new int[4];
        int[] intArray1 = ArrayUtils.removeElement(intArray0, (-951));
        assertEquals(4, intArray1.length);
    }

    @Test(timeout = 4000)
    public void test4611480() throws Throwable {
        long[] longArray0 = ArrayUtils.clone((long[]) null);
        assertNull(longArray0);
    }

    @Test(timeout = 4000)
    public void test4621481() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = ArrayUtils.clone(longArray0);
        assertNotSame(longArray1, longArray0);
    }

    @Test(timeout = 4000)
    public void test4631482() throws Throwable {
        Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
        assertNull(objectArray0);
    }

    @Test(timeout = 4000)
    public void test4641483() throws Throwable {
        Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
        assertNull(map0);
    }

    @Test(timeout = 4000)
    public void test4651484() throws Throwable {
        Object[] objectArray0 = new Object[7];
        // Undeclared exception!
        try {
            ArrayUtils.toMap(objectArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array element 0, 'null', is neither of type Map.Entry nor an Array
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4661485() throws Throwable {
        String string0 = ArrayUtils.toString((Object) null, (String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4671486() throws Throwable {
        short[] shortArray0 = new short[2];
        short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short) 3);
        assertArrayEquals(new short[] { (short) 0, (short) 3, (short) 0 }, shortArray1);
    }

    @Test(timeout = 4000)
    public void test4681487() throws Throwable {
        Float[] floatArray0 = new Float[0];
        float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
        // Undeclared exception!
        try {
            ArrayUtils.remove(floatArray1, (-5583));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -5583, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4691488() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 48;
        byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) 48);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test4691489() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 48;
        byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) 48);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 48, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test4701490() throws Throwable {
        String[] stringArray0 = new String[0];
        // Undeclared exception!
        try {
            ArrayUtils.remove(stringArray0, (-1));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4711491() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1.0));
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, (-1.0) }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test4721492() throws Throwable {
        Integer integer0 = new Integer((byte) 0);
        boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4731493() throws Throwable {
        byte[] byteArray0 = new byte[2];
        // Undeclared exception!
        try {
            ArrayUtils.add(byteArray0, (int) (byte) 6, (byte) 116);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 6, Length: 2
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4741494() throws Throwable {
        char[] charArray0 = new char[9];
        // Undeclared exception!
        try {
            ArrayUtils.add(charArray0, (-1), 'i');
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1, Length: 9
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4751495() throws Throwable {
        int[] intArray0 = new int[7];
        // Undeclared exception!
        try {
            ArrayUtils.add(intArray0, (-1), (-1));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1, Length: 7
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4761496() throws Throwable {
        short[] shortArray0 = ArrayUtils.add((short[]) null, (short) 365);
        assertNotNull(shortArray0);
    }

    @Test(timeout = 4000)
    public void test4761497() throws Throwable {
        short[] shortArray0 = ArrayUtils.add((short[]) null, (short) 365);
        assertArrayEquals(new short[] { (short) 365 }, shortArray0);
    }

    @Test(timeout = 4000)
    public void test4771498() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[1] = (int) '0';
        int[] intArray1 = ArrayUtils.removeElement(intArray0, 48);
        assertArrayEquals(new int[] { 0, 48, 0, 0, 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test4771499() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[1] = (int) '0';
        int[] intArray1 = ArrayUtils.removeElement(intArray0, 48);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, 0 }, intArray1);
    }

    @Test(timeout = 4000)
    public void test4781500() throws Throwable {
        // Undeclared exception!
        try {
            ArrayUtils.add((boolean[]) null, 416, true);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 416, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4791501() throws Throwable {
        boolean[] booleanArray0 = new boolean[9];
        int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test4801502() throws Throwable {
        char[] charArray0 = ArrayUtils.removeElement((char[]) null, ')');
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test4811503() throws Throwable {
        String string0 = ArrayUtils.toString((Object) "");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test4821504() throws Throwable {
        short[] shortArray0 = new short[2];
        int int0 = ArrayUtils.indexOf(shortArray0, (short) 2);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test4831505() throws Throwable {
        long[] longArray0 = new long[9];
        int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) 3);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test4841506() throws Throwable {
        // Undeclared exception!
        try {
            ArrayUtils.remove((long[]) null, 2147042647);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 2147042647, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4851507() throws Throwable {
        double[] doubleArray0 = new double[2];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test4861508() throws Throwable {
        boolean[] booleanArray0 = new boolean[3];
        boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
        assertEquals(2, booleanArray1.length);
    }

    @Test(timeout = 4000)
    public void test4871509() throws Throwable {
        float[] floatArray0 = new float[3];
        int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test4881510() throws Throwable {
        double[] doubleArray0 = new double[2];
        // Undeclared exception!
        try {
            ArrayUtils.remove(doubleArray0, 1742);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 1742, Length: 2
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4891511() throws Throwable {
        long[] longArray0 = new long[2];
        long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) 0);
        assertEquals(3, longArray1.length);
    }

    @Test(timeout = 4000)
    public void test4901512() throws Throwable {
        double[] doubleArray0 = new double[6];
        int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test4911513() throws Throwable {
        float[] floatArray0 = new float[1];
        // Undeclared exception!
        try {
            ArrayUtils.add(floatArray0, (-1278), 0.0F);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1278, Length: 1
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4921514() throws Throwable {
        byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-3));
        assertArrayEquals(new byte[] { (byte) (-3) }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test4921515() throws Throwable {
        byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-3));
        assertNotNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test4931516() throws Throwable {
        boolean[] booleanArray0 = new boolean[7];
        boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
        assertTrue(Arrays.equals(new boolean[] { false, false, false, false, false, false, false, false }, booleanArray1));
    }

    @Test(timeout = 4000)
    public void test4941517() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, 0.0);
        assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test4951518() throws Throwable {
        char[] charArray0 = new char[9];
        // Undeclared exception!
        try {
            ArrayUtils.remove(charArray0, (-2879));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -2879, Length: 9
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4961519() throws Throwable {
        short[] shortArray0 = new short[3];
        int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 0);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test4971520() throws Throwable {
        long[] longArray0 = new long[2];
        boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4981521() throws Throwable {
        Boolean[] booleanArray0 = new Boolean[3];
        int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) "', is neither of type Map.Entry nor an Array");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test4991522() throws Throwable {
        ArrayUtils arrayUtils0 = new ArrayUtils();
        Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5001523() throws Throwable {
        // Undeclared exception!
        try {
            ArrayUtils.remove((short[]) null, (int) (short) (-467));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -467, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5011524() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte) (-121));
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, (-121) }, intArray1);
    }

    @Test(timeout = 4000)
    public void test5021525() throws Throwable {
        long[] longArray0 = new long[0];
        // Undeclared exception!
        try {
            ArrayUtils.add(longArray0, 2790, (-1L));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 2790, Length: 0
            //
            verifyException("org.apache.commons.lang3.ArrayUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5031526() throws Throwable {
        float[] floatArray0 = new float[1];
        boolean boolean0 = ArrayUtils.contains(floatArray0, (-1372.3595F));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5041527() throws Throwable {
        char[] charArray0 = ArrayUtils.add((char[]) null, 'D');
        char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
        assertArrayEquals(new char[] { 'D' }, charArray1);
    }

    @Test(timeout = 4000)
    public void test5041528() throws Throwable {
        char[] charArray0 = ArrayUtils.add((char[]) null, 'D');
        char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
        assertNotNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test5051529() throws Throwable {
        boolean[] booleanArray0 = new boolean[4];
        boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5061530() throws Throwable {
        char[] charArray0 = new char[1];
        int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test5071531() throws Throwable {
        float[] floatArray0 = new float[0];
        float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1));
        assertArrayEquals(new float[] { (-1.0F) }, floatArray1, 0.01F);
    }

    @Test(timeout = 4000)
    public void test5081532() throws Throwable {
        int[] intArray0 = new int[2];
        int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test5091533() throws Throwable {
        int int0 = ArrayUtils.indexOf((double[]) null, 1.0, (double) (short) 0);
        assertEquals((-1), int0);
    }
}
