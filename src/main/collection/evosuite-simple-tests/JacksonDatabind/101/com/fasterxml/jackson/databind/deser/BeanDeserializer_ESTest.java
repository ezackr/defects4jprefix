/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 00:18:47 GMT 2023
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanDeserializer_ESTest extends BeanDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        try {
            beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("f0q>'(U*C|1#S0>_", "83Z!W`p6Z0m\":N");
        BeanDeserializer beanDeserializer0 = null;
        try {
            beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, nameTransformer0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
        HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0, hashMap0);
        BeanDeserializer beanDeserializer0 = null;
        try {
            beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, beanPropertyMap0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        try {
            beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        BeanDeserializer beanDeserializer0 = null;
        try {
            beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, hashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        try {
            beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, (ObjectIdReader) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        JsonLocation jsonLocation0 = jsonParserDelegate0.getCurrentLocation();
        ObjectIdGenerator<PropertyName> objectIdGenerator0 = (ObjectIdGenerator<PropertyName>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.findObjectId(simpleObjectIdResolver0, objectIdGenerator0, simpleObjectIdResolver0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "<_=MBzOSyNJAY]C\"", jsonLocation0, readableObjectId0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
        BeanDeserializer.BeanReferring beanDeserializer_BeanReferring0 = new BeanDeserializer.BeanReferring(defaultDeserializationContext_Impl0, unresolvedForwardReference0, placeholderForType0, (PropertyValueBuffer) null, (SettableBeanProperty) null);
        beanDeserializer_BeanReferring0.setBean("<_=MBzOSyNJAY]C\"");
        // Undeclared exception!
        try {
            beanDeserializer_BeanReferring0.handleResolvedForwardReference(jsonParserDelegate0, readableObjectId0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer$BeanReferring", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.FALSE;
        Class<CreatorProperty> class0 = CreatorProperty.class;
        try {
            objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `com.fasterxml.jackson.databind.deser.CreatorProperty` (no Creators, like default construct, exist): no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (false)
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        Class<BeanDeserializer.BeanReferring> class0 = BeanDeserializer.BeanReferring.class;
        try {
            objectMapper0.readValue(jsonParser0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.deser.BeanDeserializer$BeanReferring`
            //  at [Source: UNKNOWN; line: 1, column: 0]
            //
            verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        TextNode textNode0 = arrayNode0.textNode("q8-T8W7e,EKf[");
        try {
            objectMapper0.treeToValue((TreeNode) textNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `com.fasterxml.jackson.databind.deser.CreatorProperty` (no Creators, like default construct, exist): no String-argument constructor/factory method to deserialize from String value ('q8-T8W7e,EKf[')
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ShortNode shortNode0 = ShortNode.valueOf((short) (-10));
        Class<CreatorProperty> class0 = CreatorProperty.class;
        try {
            objectMapper0.treeToValue((TreeNode) shortNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `com.fasterxml.jackson.databind.deser.CreatorProperty` (no Creators, like default construct, exist): no int/Int-argument constructor/factory method to deserialize from Number value (-10)
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FloatNode floatNode0 = new FloatNode((-5774.874F));
        Class<CreatorProperty> class0 = CreatorProperty.class;
        try {
            objectMapper0.treeToValue((TreeNode) floatNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `com.fasterxml.jackson.databind.deser.CreatorProperty` (no Creators, like default construct, exist): no double/Double-argument constructor/factory method to deserialize from Number value (-5774.8740234375)
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ValueNode valueNode0 = arrayNode0.pojoNode(class0);
        try {
            objectMapper0.treeToValue((TreeNode) valueNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize value of type `com.fasterxml.jackson.databind.deser.CreatorProperty` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Class`: incompatible types
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        try {
            objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `com.fasterxml.jackson.databind.deser.CreatorProperty` (no Creators, like default construct, exist): no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (true)
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        try {
            objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize instance of `com.fasterxml.jackson.databind.deser.CreatorProperty` out of START_ARRAY token
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        MissingNode missingNode0 = MissingNode.getInstance();
        try {
            objectMapper0.treeToValue((TreeNode) missingNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize instance of `com.fasterxml.jackson.databind.deser.CreatorProperty` out of NOT_AVAILABLE token
            //  at [Source: UNKNOWN; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        ObjectIdGenerator<Integer> objectIdGenerator0 = objectMapper0.updateValue((ObjectIdGenerator<Integer>) objectIdGenerators_IntSequenceGenerator0, (Object) arrayNode0);
        assertFalse(objectIdGenerator0.maySerializeAsObject());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        ObjectIdGenerator<Integer> objectIdGenerator0 = objectMapper0.updateValue((ObjectIdGenerator<Integer>) objectIdGenerators_IntSequenceGenerator0, (Object) objectNode0);
        assertSame(objectIdGenerators_IntSequenceGenerator0, objectIdGenerator0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[3] = mapperFeature1;
        mapperFeatureArray0[4] = mapperFeature1;
        objectMapper0.disable(mapperFeatureArray0);
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        try {
            objectMapper0.updateValue((ObjectIdGenerator<Integer>) objectIdGenerators_IntSequenceGenerator0, (Object) objectIdGenerators_IntSequenceGenerator0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized field \"com.fasterxml.jackson.core.io.SerializedString@0000000140\" (class com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator), not marked as ignorable (0 known properties: ])
            //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator[\"com.fasterxml.jackson.core.io.SerializedString@0000000140\"])
            //
            verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
        Class<Object> class0 = Object.class;
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-3784));
        SimpleModule simpleModule0 = new SimpleModule();
        ObjectIdGenerator<Integer> objectIdGenerator0 = objectMapper1.updateValue((ObjectIdGenerator<Integer>) objectIdGenerators_IntSequenceGenerator0, (Object) simpleModule0);
        assertFalse(objectIdGenerator0.maySerializeAsObject());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        Class<CreatorProperty> class0 = CreatorProperty.class;
        CreatorProperty creatorProperty0 = objectMapper0.treeToValue((TreeNode) objectNode0, class0);
        assertNull(creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        JsonLocation jsonLocation0 = jsonParserDelegate0.getCurrentLocation();
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        Class<BeanDeserializer.BeanReferring> class0 = BeanDeserializer.BeanReferring.class;
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 500);
        ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.findObjectId(jsonParser0, objectIdGenerators_IntSequenceGenerator0, simpleObjectIdResolver0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "T", jsonLocation0, readableObjectId0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType(26);
        BeanDeserializer.BeanReferring beanDeserializer_BeanReferring0 = new BeanDeserializer.BeanReferring(defaultDeserializationContext_Impl0, unresolvedForwardReference0, placeholderForType0, (PropertyValueBuffer) null, (SettableBeanProperty) null);
        // Undeclared exception!
        try {
            beanDeserializer_BeanReferring0.handleResolvedForwardReference(objectIdGenerators_IntSequenceGenerator0, defaultDeserializationContext_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer$BeanReferring", e);
        }
    }
}
