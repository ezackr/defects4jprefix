/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 17:52:06 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.URL;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) null, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<BinaryNode> class0 = BinaryNode.class;
        simpleModule0.setMixInAnnotation(class0, class0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        // Undeclared exception!
        try {
            objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DecimalNode> class0 = DecimalNode.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) collectionLikeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapType> class0 = MapType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        try {
            objectMapper0.readValue(byteArrayBuilder0.NO_BYTES, (JavaType) collectionLikeType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: [B@0000000269; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<TreeSet> class0 = TreeSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(collectionType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Locale locale0 = Locale.forLanguageTag("^Zb>0Qacjj_oD");
        ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
        try {
            objectMapper0.readValue("", class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: java.lang.String@0000000270; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.registerSubtypes((Class<?>[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[5];
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        try {
            objectMapper0.readValue(byteArray0, 1, (int) 3, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: [B@0000000271; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        assertFalse(objectMapper1.equals((Object) objectMapper0));
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedReader pipedReader0 = new PipedReader();
        Class<Integer> class0 = Integer.class;
        try {
            objectMapper0.readValue((Reader) pipedReader0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        byte[] byteArray0 = new byte[9];
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, (TypeReference) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        Class<DecimalNode> class0 = DecimalNode.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("");
        try {
            objectMapper0.readValue((File) mockFile0, class0);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TimeZone timeZone0 = TimeZone.getDefault();
        ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.readerFor((TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) simpleFilterProvider0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayNode> class0 = ArrayNode.class;
        Class<Integer> class1 = Integer.class;
        Class<PipedOutputStream> class2 = PipedOutputStream.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
        try {
            objectMapper0.readValue("M]Vt<CL-!1>(f)!K", (JavaType) mapLikeType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'M': was expecting ('true', 'false' or 'null')
            //  at [Source: java.lang.String@0000000272; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        objectMapper0.setFilters(simpleFilterProvider0);
        assertTrue(simpleFilterProvider0.willFailOnUnknownId());
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("TX_cnk'[~|H7Ld", "TX_cnk'[~|H7Ld");
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        try {
            objectMapper0.writeValue((File) mockFile0, (Object) bufferedInputStream0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No serializer found for class java.io.BufferedInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
            //
            verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        TypeReference<InputStreamReader> typeReference0 = (TypeReference<InputStreamReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, (int) 0, (int) 0, (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.valueToTree((Object) objectMapper0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/fasterxml/jackson/databind/JsonMappingException$Reference
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MissingNode missingNode0 = MissingNode.getInstance();
        Class<DataInputStream> class0 = DataInputStream.class;
        try {
            objectMapper0.treeToValue((TreeNode) missingNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of java.io.DataInputStream out of NOT_AVAILABLE token
            //  at [Source: java.lang.String@0000000273; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        PipedReader pipedReader0 = new PipedReader();
        LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TreeSet> class0 = TreeSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        try {
            objectMapper0.readValue((Reader) lineNumberReader0, (JavaType) collectionType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        // Undeclared exception!
        try {
            objectMapper0.disable(mapperFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.reader(typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        TypeReference<IntNode> typeReference0 = (TypeReference<IntNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
        assertFalse(jsonFactory0.canHandleBinaryNatively());
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
        assertNotNull(visibilityChecker0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        // Undeclared exception!
        try {
            objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        URL uRL0 = MockURL.getHttpExample();
        Class<POJONode> class0 = POJONode.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<Map> class1 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        try {
            objectMapper0.readValue(uRL0, (JavaType) mapType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not find: www.someFakeButWellFormedURL.org
            //
            verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
        }
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.ser.BeanSerializerFactory", ",*1l^T+%'DZ&");
        Class<TreeSet> class0 = TreeSet.class;
        Class<MissingNode> class1 = MissingNode.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        try {
            objectMapper0.readValue(file0, (JavaType) collectionType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: org.evosuite.runtime.mock.java.io.MockFile@0000000274; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFileWriter mockFileWriter0 = new MockFileWriter("Module without defined name", false);
        byte[] byteArray0 = objectMapper0.writeValueAsBytes(mockFileWriter0);
        assertEquals(19, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.readValues((JsonParser) null, (TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        PropertyNamingStrategy propertyNamingStrategy0 = objectMapper0.getPropertyNamingStrategy();
        assertNull(propertyNamingStrategy0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.writeValue((OutputStream) null, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.writeValue((Writer) null, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) ObjectMapper._defaultPrettyPrinter;
        ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<LongNode> class0 = LongNode.class;
        Class<Object> class1 = Object.class;
        objectMapper0.addMixInAnnotations(class0, class1);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
        Class<IntNode> class0 = IntNode.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class1 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
        try {
            objectMapper0.readValue((JsonParser) filteringParserDelegate0, (ResolvedType) collectionType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not find a Value deserializer for type [collection type; class com.fasterxml.jackson.databind.node.IntNode, contains [map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]
            //
            verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
        }
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
        assertNotNull(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(jacksonAnnotationIntrospector0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        IntNode intNode0 = IntNode.valueOf(1246);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
        Class<FilterOutputStream> class0 = FilterOutputStream.class;
        MappingIterator<FilterOutputStream> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        assertNotNull(mappingIterator0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
        assertNotNull(serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
        Object object0 = objectMapper0.setHandlerInstantiator(handlerInstantiator0);
        assertSame(object0, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Throwable> class0 = Throwable.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "E{_ ");
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Class<String> class0 = String.class;
        try {
            objectMapper0.readValue((InputStream) pipedInputStream0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = objectMapper0.getDateFormat();
        assertNotNull(dateFormat0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        // Undeclared exception!
        try {
            objectMapper0.readValue((JsonParser) null, (JavaType) mapType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        char[] charArray0 = new char[5];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        Class<DoubleNode> class0 = DoubleNode.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, (Object) jsonFactory0, (Object) simpleType0);
        MappingIterator<MockPrintWriter> mappingIterator0 = objectMapper0.readValues(jsonParser0, (ResolvedType) referenceType0);
        assertNotNull(mappingIterator0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        // Undeclared exception!
        try {
            objectMapper0.reader(deserializationFeature0, (DeserializationFeature[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        int int0 = objectMapper0.mixInCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigInteger bigInteger0 = BigInteger.ONE;
        BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
        String string0 = objectMapper0.writeValueAsString(bigIntegerNode0);
        assertEquals("1", string0);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        assertFalse(objectNode0.isFloatingPointNumber());
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockFileInputStream> class0 = MockFileInputStream.class;
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
        assertNotNull(serializerFactory0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<TypeIdResolver> typeReference0 = (TypeReference<TypeIdResolver>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            objectMapper0.readValue((URL) null, (TypeReference) typeReference0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
        }
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        PrettyPrinter prettyPrinter0 = objectMapper0._defaultPrettyPrinter();
        assertNotNull(prettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, 1649, 1649, (JavaType) null);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 1649
            //
            verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        // Undeclared exception!
        try {
            objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues injectableValues0 = objectMapper0.getInjectableValues();
        assertNull(injectableValues0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
        // Undeclared exception!
        try {
            objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        URL uRL0 = MockURL.getHttpExample();
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        try {
            objectMapper0.readValue(uRL0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not find: www.someFakeButWellFormedURL.org
            //
            verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
        }
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[2];
        Class<ObjectMapper> class0 = ObjectMapper.class;
        try {
            objectMapper0.readValue(byteArray0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: [B@0000000275; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ReferenceType> class0 = ReferenceType.class;
        Class<?> class1 = objectMapper0.findMixInClassFor(class0);
        assertNull(class1);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.enable((MapperFeature[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        ObjectMapper objectMapper1 = objectMapper0.setConfig(serializationConfig0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("");
        NamedType[] namedTypeArray0 = new NamedType[4];
        simpleModule0.registerSubtypes(namedTypeArray0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("");
        TypeReference<LongNode> typeReference0 = (TypeReference<LongNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        try {
            objectMapper0.readValue((File) mockFile0, (TypeReference) typeReference0);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Module> class0 = Module.class;
        JavaType javaType0 = objectMapper0.constructType(class0);
        assertFalse(javaType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Charset charset0 = Charset.defaultCharset();
        InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
        TypeReference<StringWriter> typeReference0 = (TypeReference<StringWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue((Reader) inputStreamReader0, (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setFilterProvider((FilterProvider) null);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        TypeReference<MockRandomAccessFile> typeReference0 = (TypeReference<MockRandomAccessFile>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        try {
            objectMapper0.convertValue((Object) null, (TypeReference<?>) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((ContextAttributes) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<AbstractDeserializer> typeReference0 = (TypeReference<AbstractDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue((InputStream) null, (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
        assertNotNull(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
        boolean boolean0 = objectMapper0.isEnabled(deserializationFeature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<LongNode> class0 = LongNode.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) class0, (Object) simpleType0);
        try {
            objectMapper0.readValue((InputStream) null, (JavaType) referenceType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: UNKNOWN; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ArrayNode> typeReference0 = (TypeReference<ArrayNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue("WRITE_DATES_AS_TIMESTAMPS", (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<CharArrayReader> class0 = CharArrayReader.class;
        JsonSerializer<CharArrayReader> jsonSerializer0 = (JsonSerializer<CharArrayReader>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        simpleModule0.addKeySerializer((Class<? extends CharArrayReader>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        Version version0 = jsonFactory0.version();
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<DoubleNode> class0 = DoubleNode.class;
        simpleModule0.addKeyDeserializer(class0, (KeyDeserializer) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends BufferedInputStream>) jsonDeserializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<StringWriter> class0 = StringWriter.class;
        SimpleModule simpleModule1 = simpleModule0.addValueInstantiator(class0, (ValueInstantiator) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        Version version0 = jsonFactory0.version();
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<DoubleNode> class0 = DoubleNode.class;
        JsonSerializer<DoubleNode> jsonSerializer0 = (JsonSerializer<DoubleNode>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends DoubleNode>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("");
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        Class<TextNode> class0 = TextNode.class;
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class1 = Map.class;
        Class<OutputStreamWriter> class2 = OutputStreamWriter.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
        PriorityQueue<NamedType> priorityQueue0 = new PriorityQueue<NamedType>();
        // Undeclared exception!
        try {
            objectMapper_DefaultTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, mapType0, priorityQueue0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Can not build, 'init()' not yet called
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
        // Undeclared exception!
        try {
            objectMapper0._configAndWriteValue((JsonGenerator) null, objectMapper1, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<RoundingMode> class1 = RoundingMode.class;
        CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, collectionType0);
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) mapLikeType0, (JavaType) simpleType0);
        ArrayType arrayType0 = ArrayType.construct(mapType0, mapLikeType0, objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(javaType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MockFileInputStream> class0 = MockFileInputStream.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayType> class0 = ArrayType.class;
        Class<BeanDeserializer> class1 = BeanDeserializer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(collectionLikeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        Class<DecimalNode> class0 = DecimalNode.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(collectionLikeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        assertFalse(objectMapper1.equals((Object) objectMapper0));
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BooleanNode> class0 = BooleanNode.class;
        // Undeclared exception!
        try {
            objectMapper0._checkInvalidCopy(class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Failed copy(): com.fasterxml.jackson.databind.ObjectMapper (version: 2.6.3-SNAPSHOT) does not override copy(); it has to
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule((String) null);
        // Undeclared exception!
        try {
            objectMapper0.registerModule(simpleModule0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Module without defined name
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("Current token not START_OBJECT (needed to unwrap root name '", (Version) null);
        // Undeclared exception!
        try {
            objectMapper0.registerModule(simpleModule0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Module without defined version
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[0];
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[7];
        // Undeclared exception!
        try {
            objectMapper0.registerModules(moduleArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HashSet<Module> hashSet0 = new HashSet<Module>();
        Version version0 = objectMapper0.version();
        SimpleModule simpleModule0 = new SimpleModule(version0);
        hashSet0.add(simpleModule0);
        ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) hashSet0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        List<Module> list0 = ObjectMapper.findModules(classLoader0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        // Undeclared exception!
        try {
            objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not use includeAs of EXTERNAL_PROPERTY
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_FeatureArray0[0];
        jsonParser_FeatureArray0[2] = jsonParser_FeatureArray0[1];
        jsonParser_FeatureArray0[3] = jsonParser_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_FeatureArray0[2];
        jsonGenerator_FeatureArray0[4] = jsonGenerator_FeatureArray0[3];
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_FeatureArray0[4];
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
        // Undeclared exception!
        try {
            objectMapper0.disable(jsonGenerator_FeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.JsonFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser jsonParser0 = jsonFactory0.createParser("");
        IntNode intNode0 = objectMapper0.readTree(jsonParser0);
        assertNull(intNode0);
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNode jsonNode0 = objectMapper0.readTree("-2");
        assertEquals((-2), jsonNode0.intValue());
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0);
        objectMapper0.writeValue((JsonGenerator) uTF8JsonGenerator0, (Object) byteArrayBuilder0);
        assertEquals(210, byteArrayBuilder0.getCurrentSegmentLength());
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IntNode intNode0 = new IntNode(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0);
        try {
            objectMapper0.writeTree((JsonGenerator) uTF8JsonGenerator0, (TreeNode) intNode0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test169169() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IntNode intNode0 = IntNode.valueOf(1);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0);
        try {
            objectMapper0.writeTree((JsonGenerator) uTF8JsonGenerator0, (JsonNode) intNode0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test170170() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MissingNode missingNode0 = objectMapper0.valueToTree((Object) null);
        assertNull(missingNode0);
    }

    @Test(timeout = 4000)
    public void test171171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.writerFor(typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test172172() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((TypeReference<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test173173() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("JSON");
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) minimalPrettyPrinter0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test174174() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test175175() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<FloatNode> class0 = FloatNode.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test176176() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((Class<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test177177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<OutputStreamWriter> typeReference0 = (TypeReference<OutputStreamWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.writerWithType(typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test178178() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test179179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionType> class0 = CollectionType.class;
        CollectionType collectionType0 = objectMapper0.convertValue((Object) null, class0);
        assertNull(collectionType0);
    }

    @Test(timeout = 4000)
    public void test180180() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DecimalNode> class0 = DecimalNode.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        try {
            objectMapper0.convertValue((Object) collectionLikeType0, (JavaType) collectionLikeType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not find a Value deserializer for type [collection-like type; class com.fasterxml.jackson.databind.node.DecimalNode, contains [simple type, class com.fasterxml.jackson.databind.node.DecimalNode]]
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test181181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Integer integer0 = objectMapper0.convertValue((Object) null, (JavaType) null);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test182182() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class1 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) null, (Object) mapType0);
        Object object0 = objectMapper0._convert(referenceType0, referenceType0);
        assertEquals("java.lang.Object<java.util.Map<java.lang.Object,java.lang.Object>", object0);
    }

    @Test(timeout = 4000)
    public void test183183() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionType> class0 = CollectionType.class;
        NullNode nullNode0 = NullNode.instance;
        CollectionType collectionType0 = objectMapper0.convertValue((Object) nullNode0, class0);
        assertNull(collectionType0);
    }

    @Test(timeout = 4000)
    public void test184184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        // Undeclared exception!
        try {
            objectMapper0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // type must be provided
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test185185() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, objectReader0, byteArrayOutputStream0);
        Class<TextNode> class0 = TextNode.class;
        objectMapper0._configAndWriteValue(uTF8JsonGenerator0, jsonEncoding0, class0);
        assertEquals(7, uTF8JsonGenerator0.getFeatureMask());
    }

    @Test(timeout = 4000)
    public void test186186() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, dataOutputStream0);
        Class<TextNode> class0 = TextNode.class;
        LongNode longNode0 = new LongNode(56319);
        try {
            objectMapper0._configAndWriteValue(uTF8JsonGenerator0, longNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test187187() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        NullNode nullNode0 = NullNode.getInstance();
        Class<Throwable> class0 = Throwable.class;
        Throwable throwable0 = objectMapper0.treeToValue((TreeNode) nullNode0, class0);
        assertNull(throwable0);
    }
}
