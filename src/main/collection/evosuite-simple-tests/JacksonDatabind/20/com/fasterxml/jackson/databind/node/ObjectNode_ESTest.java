/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 17:21:29 GMT 2023
 */
package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.File;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectNode_ESTest extends ObjectNode_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putNull("gKlb62zVo)W");
        assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        // Undeclared exception!
        try {
            objectNode0.putAll((ObjectNode) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Iterator<String> iterator0 = objectNode0.fieldNames();
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        boolean boolean0 = hashMap0.remove((Object) objectNode0, (Object) objectNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonPointer jsonPointer0 = JsonPointer.valueOf("");
        JsonNode jsonNode0 = objectNode0._at(jsonPointer0);
        assertNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.removeAll();
        assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Spliterator<JsonNode> spliterator0 = objectNode0.spliterator();
        assertNotNull(spliterator0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.without("m5*Oytj:Fjt/%+bTQ");
        assertFalse(jsonNode0.isBigDecimal());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonToken jsonToken0 = objectNode0.asToken();
        assertTrue(jsonToken0.isStructStart());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        String[] stringArray0 = new String[13];
        ObjectNode objectNode1 = objectNode0.retain(stringArray0);
        assertFalse(objectNode1.isBigInteger());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonParser jsonParser0 = objectNode0.traverse();
        assertEquals(0, jsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        ObjectNode objectNode1 = objectNode0.remove((Collection<String>) arrayList0);
        assertFalse(objectNode1.isLong());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        JsonNode jsonNode0 = objectNode0.remove("er@89N");
        assertNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        boolean boolean0 = objectNode0.has(2910);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("Unrecognized field \"", 0L);
        assertSame(objectNode1, objectNode0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode1 = new ObjectNode(jsonNodeFactory0, hashMap0);
        boolean boolean0 = objectNode0.equals(objectNode1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("", true);
        assertEquals(1, objectNode1.size());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        List<String> list0 = objectNode0.findValuesAsText("");
        ObjectNode objectNode1 = objectNode0.without((Collection<String>) list0);
        assertFalse(objectNode1.isBigDecimal());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("", (-109.0F));
        assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.path(4);
        assertNull(jsonNode0.textValue());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("' has value that is not of type ObjectNode (but ");
        JsonNode jsonNode0 = objectNode0.findValue("l?C$F7>G;gt/A(Sc");
        assertNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("XR\"uz/aAFNoThaj{k([");
        ObjectNode objectNode1 = objectNode0.deepCopy();
        assertEquals(1, objectNode1.size());
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("XR\"uz/aAFNoThaj{k([");
        ObjectNode objectNode1 = objectNode0.deepCopy();
        assertNotSame(objectNode1, objectNode0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.path("u<>OX@|z");
        assertFalse(jsonNode0.isBigInteger());
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double((short) (-3127));
        objectNode0.put("/g7.E^|Yb", double0);
        JsonNode jsonNode0 = objectNode0.path("/g7.E^|Yb");
        assertEquals(JsonParser.NumberType.DOUBLE, jsonNode0.numberType());
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.with("r:y1");
        objectNode1.put("l?C$F7>G;gt/A(Sc", (short) (-1925));
        objectNode0.findValue("l?C$F7>G;gt/A(Sc");
        assertEquals(1, objectNode0.size());
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("[");
        // Undeclared exception!
        try {
            objectNode0.with("[");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Property '[' has value that is not of type ObjectNode (but com.fasterxml.jackson.databind.node.ArrayNode)
            //
            verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0._put("Q6>J)I:HP(6k", objectNode0);
        ObjectNode objectNode2 = objectNode1.with("Q6>J)I:HP(6k");
        assertFalse(objectNode2.isBigInteger());
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.withArray("message");
        ArrayNode arrayNode0 = objectNode0.withArray("message");
        assertFalse(arrayNode0.isInt());
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.put("6<v;\"na3/E/)sX^", "6<v;\"na3/E/)sX^");
        // Undeclared exception!
        try {
            objectNode0.withArray("6<v;\"na3/E/)sX^");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Property '6<v;\"na3/E/)sX^' has value that is not of type ArrayNode (but com.fasterxml.jackson.databind.node.TextNode)
            //
            verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        JsonNode jsonNode0 = objectNode0.findValue(")");
        assertNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.put("l?C$F7>G;gt/A(Sc", (short) (-1925));
        JsonNode jsonNode0 = objectNode0.findValue("l?C$F7>G;gt/A(Sc");
        assertNotNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.put("l?C$F7>G;gt/A(Sc", (short) (-1925));
        JsonNode jsonNode0 = objectNode0.findValue("l?C$F7>G;gt/A(Sc");
        assertEquals((-1925), jsonNode0.intValue());
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("");
        LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
        List<JsonNode> list0 = objectNode0.findValues("[ULLv", (List<JsonNode>) linkedList0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("?pD&md$82`|Mu^0PG");
        LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
        objectNode0.findValues("?pD&md$82`|Mu^0PG", (List<JsonNode>) linkedList0);
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.put("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap$Bucket", 44);
        List<JsonNode> list0 = objectNode0.findValues("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap$Bucket", (List<JsonNode>) null);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        ArrayList<String> arrayList0 = new ArrayList<String>();
        List<String> list0 = objectNode0.findValuesAsText("L(CutaDX5]-Nt)", (List<String>) arrayList0);
        assertFalse(list0.contains(""));
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        ArrayList<String> arrayList0 = new ArrayList<String>();
        objectNode0.findValuesAsText("", (List<String>) arrayList0);
        assertFalse(arrayList0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        ArrayList<String> arrayList0 = new ArrayList<String>();
        objectNode0.findValuesAsText("", (List<String>) arrayList0);
        assertEquals(1, arrayList0.size());
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putPOJO("6<v;\"na3/E/)sX^", objectNode0);
        List<String> list0 = objectNode1.findValuesAsText("6<v;\"na3/E/)sX^");
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("?pD&md$82`|Mu^0PG");
        ObjectNode objectNode1 = objectNode0.findParent("MO^,A;O");
        assertNull(objectNode1);
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("' has value that is not of type ArrayNode (but ", (double) 44);
        ObjectNode objectNode2 = objectNode1.findParent("' has value that is not of type ArrayNode (but ");
        assertEquals(1, objectNode2.size());
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ArrayNode arrayNode0 = objectNode0.arrayNode();
        ObjectNode objectNode1 = objectNode0.putObject("");
        objectNode1.replace("im+[x;wcK@QUg%vRG.J", arrayNode0);
        objectNode0.findParent("im+[x;wcK@QUg%vRG.J");
        assertEquals(1, objectNode0.size());
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("h'");
        List<JsonNode> list0 = objectNode0.findParents("h'");
        objectNode0.findParents("h'", list0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putArray("h'");
        List<JsonNode> list0 = objectNode0.findParents("h'");
        objectNode0.findParents("h'", list0);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("{", (Double) null);
        ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
        List<JsonNode> list0 = objectNode1.findParents("' has value that is not of type ArrayNode (but ", (List<JsonNode>) arrayList0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double(196.88);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", double0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        MockFile mockFile0 = new MockFile("Ia*|beb'");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        objectNode1.serialize(jsonGenerator0, defaultSerializerProvider_Impl0);
        assertSame(objectNode1, objectNode0);
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("' has value that is not of type ObjectNode (but ");
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, (BeanProperty) null);
        objectNode0.serializeWithType(jsonGenerator0, defaultSerializerProvider_Impl0, asWrapperTypeSerializer0);
        assertEquals(0, jsonGenerator0.getHighestEscapedChar());
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        BooleanNode booleanNode0 = BooleanNode.valueOf(true);
        JsonNode jsonNode0 = objectNode0.set("{", booleanNode0);
        assertEquals(1, jsonNode0.size());
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.set("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap$Bucket", (JsonNode) null);
        assertSame(objectNode0, jsonNode0);
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.putArray("");
        JsonNode jsonNode0 = objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
        assertFalse(jsonNode0.isIntegralNumber());
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode((JsonNodeFactory) null, hashMap0);
        hashMap0.put("?z", (JsonNode) null);
        // Undeclared exception!
        try {
            objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.replace("{}", (JsonNode) null);
        assertNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.put("{", (JsonNode) null);
        assertNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Short short0 = new Short((short) 125);
        ObjectNode objectNode1 = objectNode0.put((String) null, short0);
        assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.cfg.MapperConfigBase", (Short) null);
        assertNull(objectNode1.textValue());
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Integer integer0 = new Integer(1);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", integer0);
        assertFalse(objectNode1.isBigDecimal());
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("h 8Hsxar=T", (Integer) null);
        assertFalse(objectNode1.isIntegralNumber());
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Long long0 = new Long(0L);
        ObjectNode objectNode1 = objectNode0.put("h 8Hsxar=T", long0);
        assertNull(objectNode1.numberType());
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", (Long) null);
        assertFalse(objectNode1.isDouble());
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Float float0 = new Float(196.88);
        ObjectNode objectNode1 = objectNode0.put("{", float0);
        assertFalse(objectNode1.isBigInteger());
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("", (Float) null);
        assertFalse(objectNode1.isFloat());
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        BigDecimal bigDecimal0 = objectNode0.decimalValue();
        ObjectNode objectNode1 = objectNode0.put("9X&%", bigDecimal0);
        assertFalse(objectNode1.isFloat());
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.KeyDeserializer", (BigDecimal) null);
        assertFalse(objectNode1.isBigInteger());
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put(")", (String) null);
        assertFalse(objectNode1.isBigDecimal());
    }

    @Test(timeout = 4000)
    public void test6165() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        Boolean boolean0 = new Boolean("l?C$>G;gt/A(Sc");
        ObjectNode objectNode1 = objectNode0.put("l?C$>G;gt/A(Sc", boolean0);
        assertFalse(objectNode1.isLong());
    }

    @Test(timeout = 4000)
    public void test6266() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("Base64Alphabet length must be exactly 64 (was ", (Boolean) null);
        assertFalse(objectNode1.isLong());
    }

    @Test(timeout = 4000)
    public void test6367() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        byte[] byteArray0 = new byte[1];
        ObjectNode objectNode1 = objectNode0.put("@6mywWe/}j", byteArray0);
        assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
    }

    @Test(timeout = 4000)
    public void test6468() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("JSON", (byte[]) null);
        assertEquals(1, objectNode1.size());
    }

    @Test(timeout = 4000)
    public void test6569() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        boolean boolean0 = objectNode0.equals(objectNode0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6670() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        boolean boolean0 = objectNode0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6771() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ArrayNode arrayNode0 = objectNode0.putArray("");
        boolean boolean0 = objectNode0.equals(arrayNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6872() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double(196.88);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", double0);
        String string0 = objectNode1.toString();
        assertEquals("{\"Ia*|beb'\":196.88}", string0);
    }

    @Test(timeout = 4000)
    public void test6973() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Double double0 = new Double(196.88);
        ObjectNode objectNode1 = objectNode0.put("Ia*|beb'", double0);
        objectNode1.put("{", (JsonNode) objectNode1);
        // Undeclared exception!
        objectNode1.toString();
    }
}
