/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 02:06:20 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        assertSame(dateTimeZone0, dateTimeZone1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 59);
        assertEquals("+00:59", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        try {
            DateTimeZone.forOffsetHoursMinutes(0, (-68703773));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Minutes out of range: -68703773
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+03:32:20.625");
        assertEquals("+03:32:20.625", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+03:32:20.625");
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        DateTimeZone.setDefault(dateTimeZone0);
        assertEquals("America/Los_Angeles", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.hashCode();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        dateTimeZone0.UTC.toTimeZone();
        assertEquals("+00:00:00.004", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        dateTimeZone0.UTC.toTimeZone();
        assertEquals("+00:00:00.004", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=-00:00:02.988,offset=-2988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        assertEquals("-00:00:02.988", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        dateTimeZone0.UTC.previousTransition(0L);
        assertEquals("-00:00:02.988", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));
        dateTimeZone0.UTC.previousTransition(0L);
        assertEquals("-00:00:02.988", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.UTC.previousTransition(1);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        long long0 = fixedDateTimeZone0.previousTransition((-4403L));
        assertEquals((-4403L), long0);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        dateTimeZone0.nextTransition(0L);
        assertEquals("+572:01", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.nextTransition(0L);
        assertEquals(9972000000L, long0);
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-357));
        dateTimeZone0.nextTransition((-357));
        assertEquals("-00:00:00.357", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isFixed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
        int int0 = dateTimeZone0.getStandardOffset(1804L);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        int int0 = dateTimeZone0.getStandardOffset(0L);
        assertEquals("+572:01", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        int int0 = dateTimeZone0.getStandardOffset(0L);
        assertEquals(2059260000, int0);
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        dateTimeZone0.UTC.getOffsetFromLocal(0L);
        assertEquals("+550:00", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        dateTimeZone0.UTC.getOffsetFromLocal(0L);
        assertEquals("+550:00", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
        DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
        assertEquals(2555, int0);
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);
        DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
        assertEquals("+00:00:02.555", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Instant instant0 = new Instant();
        int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
        assertEquals((-28800000), int0);
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        int int0 = dateTimeZone0.getOffset(9972000000L);
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        int int0 = dateTimeZone0.getOffset(9972000000L);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        int int0 = dateTimeZone0.getOffset(9972000000L);
        assertEquals("+00:00:00.004", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        int int0 = dateTimeZone0.getOffset(9972000000L);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffset(1173L);
        assertEquals((-28800000), int0);
    }

    @Test(timeout = 4000)
    public void test2332() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
        dateTimeZone0.getNameKey(9972000000L);
        assertEquals("+00:00:00.004", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        String string0 = dateTimeZone0.getNameKey((-575L));
        assertEquals("UTC", string0);
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
        boolean boolean0 = dateTimeZone0.UTC.equals(dateTimeZone1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        boolean boolean0 = dateTimeZone0.equals("CET");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, "ReadablePartial objects must be contiguous");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, "ReadablePartial objects must be contiguous");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        long long0 = dateTimeZone0.convertUTCToLocal(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        long long0 = dateTimeZone0.convertUTCToLocal(1);
        assertEquals(2059260001L, long0);
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);
        long long0 = dateTimeZone0.convertUTCToLocal(1);
        assertEquals("+572:01", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));
        assertEquals("+00:00:03.409", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);
        assertEquals((-2059199428L), long0);
    }

    @Test(timeout = 4000)
    public void test3043() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);
        assertEquals("+572:00", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test3144() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        long long0 = dateTimeZone0.UTC.adjustOffset(0L, false);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test3145() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);
        long long0 = dateTimeZone0.UTC.adjustOffset(0L, false);
        assertEquals("+550:00", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test3246() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.adjustOffset((-1L), true);
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test3347() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        // Undeclared exception!
        try {
            dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test3448() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(177, 0);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        // Undeclared exception!
        try {
            DateTimeZone.forTimeZone(timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid format: \"+A7:00\" is malformed at \"A7:00\"
            //
            verifyException("org.joda.time.format.DateTimeFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3549() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test3650() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, true);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test3751() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertLocalToUTC((-806L), true, (-806L));
        assertEquals(28799194L, long0);
    }

    @Test(timeout = 4000)
    public void test3852() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertUTCToLocal((-3433L));
        assertEquals((-28803433L), long0);
    }

    @Test(timeout = 4000)
    public void test3953() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertUTCToLocal(5877L);
        assertEquals((-28794123L), long0);
    }

    @Test(timeout = 4000)
    public void test4054() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        String string0 = dateTimeZone0.getName(10799996L, locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4055() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        String string0 = dateTimeZone0.getName(10799996L, locale0);
        assertEquals("-08:00", string0);
    }

    @Test(timeout = 4000)
    public void test4156() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
        String string0 = dateTimeZone0.getName(3347L, (Locale) null);
        assertEquals("+57:00", string0);
    }

    @Test(timeout = 4000)
    public void test4257() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        Locale locale0 = new Locale("xSp<QqI'HmDzP?", "L.$%ZG`>)m [Ad");
        String string0 = dateTimeZone0.getShortName((long) 1, locale0);
        assertEquals("+01:00", string0);
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone dateTimeZone0 = uTCProvider0.getZone("UTC");
        String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4359() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone dateTimeZone0 = uTCProvider0.getZone("UTC");
        String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);
        assertEquals("+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test4460() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-357), 1);
        assertEquals("-357:01", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test4561() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        dateTimeZone0.UTC.isFixed();
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test4562() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        dateTimeZone0.UTC.isFixed();
        assertEquals("UTC", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test4663() throws Throwable {
        // Undeclared exception!
        try {
            DateTimeZone.forID("hh!E!^m5qP");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The datetime zone id 'hh!E!^m5qP' is not recognised
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test4764() throws Throwable {
        DateTimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        assertEquals("America/Los_Angeles", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test4865() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.getID();
        assertEquals("America/Los_Angeles", string0);
    }

    @Test(timeout = 4000)
    public void test4966() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.adjustOffset(3409, false);
        assertEquals("+00:00:03.409", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test4967() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);
        long long0 = dateTimeZone0.adjustOffset(3409, false);
        assertEquals(3409L, long0);
    }

    @Test(timeout = 4000)
    public void test5068() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        LocalDateTime localDateTime0 = LocalDateTime.now();
        dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
        assertEquals("+03:32:20.625", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test5069() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        LocalDateTime localDateTime0 = LocalDateTime.now();
        dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
        assertEquals("+03:32:20.625", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test5170() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 2593L);
        assertEquals(28802593L, long0);
    }

    @Test(timeout = 4000)
    public void test5271() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);
        assertEquals((-91L), long0);
    }

    @Test(timeout = 4000)
    public void test5272() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);
        assertEquals("+00:00:00.091", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test5373() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        // Undeclared exception!
        try {
            dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Subtracting time zone offset caused overflow
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test5474() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        // Undeclared exception!
        try {
            dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Subtracting time zone offset caused overflow
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test5575() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertLocalToUTC(21859200000L, true, 10806818L);
        assertEquals(21884400000L, long0);
    }

    @Test(timeout = 4000)
    public void test5676() throws Throwable {
        System.setCurrentTimeMillis((-9223372036854775808L));
        LocalDateTime localDateTime0 = null;
        try {
            localDateTime0 = new LocalDateTime();
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Adding time zone offset caused overflow
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test5777() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
        long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1673L);
        assertEquals((-28798327L), long0);
    }

    @Test(timeout = 4000)
    public void test5878() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        LocalDateTime localDateTime0 = new LocalDateTime((-3597407L));
        LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1285);
        boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5979() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
        int int0 = dateTimeZone0.getOffsetFromLocal(423L);
        assertEquals(3600000, int0);
    }

    @Test(timeout = 4000)
    public void test6080() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
        assertEquals((-28378000), int0);
    }

    @Test(timeout = 4000)
    public void test6181() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(1L);
        assertEquals((-28800000), int0);
    }

    @Test(timeout = 4000)
    public void test6282() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(7L);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6383() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        dateTimeZone0.UTC.getOffset((ReadableInstant) null);
        assertEquals("+00:00:00.001", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test6384() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        dateTimeZone0.UTC.getOffset((ReadableInstant) null);
        assertEquals("+00:00:00.001", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test6485() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.getName(9223372036854775807L);
        assertEquals("-07:00", string0);
    }

    @Test(timeout = 4000)
    public void test6586() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`HAljM6#");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test6587() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`HAljM6#");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00");
        assertSame(dateTimeZone1, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test6588() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`HAljM6#");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00");
        assertNotNull(dateTimeZone1);
    }

    @Test(timeout = 4000)
    public void test6689() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));
        assertEquals("-07:52:58", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test6790() throws Throwable {
        DateTimeZone.setNameProvider((NameProvider) null);
    }

    @Test(timeout = 4000)
    public void test6891() throws Throwable {
        DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
        DateTimeZone.setNameProvider(defaultNameProvider0);
    }

    @Test(timeout = 4000)
    public void test6992() throws Throwable {
        DateTimeZone.setProvider((Provider) null);
    }

    @Test(timeout = 4000)
    public void test7093() throws Throwable {
        DateTimeZone.forOffsetMillis(12740625);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        assertEquals("+03:32:20.625", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test7194() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);
        assertEquals("UTC", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test7195() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);
        assertEquals(10800000L, long0);
    }

    @Test(timeout = 4000)
    public void test7296() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`HAljM6#");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
        //  // Unstable assertion: assertSame(dateTimeZone1, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test7397() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        assertEquals("java.util.SimpleTimeZone[id=+03:32:20.625,offset=12740625,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test7398() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        assertEquals("+03:32", dateTimeZone1.getID());
    }

    @Test(timeout = 4000)
    public void test7399() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        assertNotNull(dateTimeZone1);
    }

    @Test(timeout = 4000)
    public void test74100() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(730, "UTC");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        assertTrue(dateTimeZone0.isFixed());
    }

    @Test(timeout = 4000)
    public void test75101() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test75102() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        int int0 = dateTimeZone0.getStandardOffset((-324L));
        assertEquals((-28800000), int0);
    }

    @Test(timeout = 4000)
    public void test76103() throws Throwable {
        try {
            DateTimeZone.forOffsetHours((-2112));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Offset is too large
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test77104() throws Throwable {
        try {
            DateTimeZone.forOffsetHoursMinutes(0, 12720000);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Minutes out of range: 12720000
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test78105() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("-07:00");
        assertEquals("-07:00", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test78106() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("-07:00");
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test79107() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
        assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test80108() throws Throwable {
        // Undeclared exception!
        try {
            DateTimeZone.setDefault((DateTimeZone) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The datetime zone must not be null
            //
            verifyException("org.joda.time.DateTimeZone", e);
        }
    }

    @Test(timeout = 4000)
    public void test81109() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone.setDefault(dateTimeZone0);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
        assertEquals("UTC", dateTimeZone1.getID());
    }

    @Test(timeout = 4000)
    public void test82110() throws Throwable {
        Provider provider0 = DateTimeZone.getProvider();
        assertNotNull(provider0);
    }

    @Test(timeout = 4000)
    public void test83111() throws Throwable {
        NameProvider nameProvider0 = DateTimeZone.getNameProvider();
        assertNotNull(nameProvider0);
    }

    @Test(timeout = 4000)
    public void test84112() throws Throwable {
        Set<String> set0 = DateTimeZone.getAvailableIDs();
        assertFalse(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test85113() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        String string0 = dateTimeZone0.toString();
        assertEquals("UTC", string0);
    }

    @Test(timeout = 4000)
    public void test86114() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        assertEquals("-18:00", dateTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test86115() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        assertNotNull(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test87116() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);
        String string0 = dateTimeZone0.getShortName(4117L);
        assertEquals("+57:00", string0);
    }

    @Test(timeout = 4000)
    public void test88117() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forTimeZone(timeZone0);
        ((DateTimeZone) fixedDateTimeZone0).writeReplace();
        assertEquals("UTC", fixedDateTimeZone0.getID());
    }
}
