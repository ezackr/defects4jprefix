/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:30:30 GMT 2023
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Document_ESTest extends Document_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = new Document("S2#%*>BG");
        document0.appendText("M[#[[");
        document0.appendText("M[#[[");
        Document document1 = document0.normalise();
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Document.createShell("9B'o{xh");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        boolean boolean0 = document_OutputSettings0.prettyPrint();
        assertEquals(1, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Document document0 = Document.createShell("9B'o{xh");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        boolean boolean0 = document_OutputSettings0.prettyPrint();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
        int int0 = document_OutputSettings0.indentAmount();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
        int int0 = document_OutputSettings0.indentAmount();
        assertTrue(document_OutputSettings0.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Document document0 = new Document("~JIwDGvF)zKmbB");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.escapeMode();
        assertTrue(document_OutputSettings0.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Document document0 = new Document("~JIwDGvF)zKmbB");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.escapeMode();
        assertEquals(1, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Document document0 = new Document("7;~eiyx`f");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.encoder();
        assertTrue(document_OutputSettings0.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Document document0 = new Document("7;~eiyx`f");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.encoder();
        assertEquals(1, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Document document0 = Document.createShell("bHJ~bQ$h$`6]");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset("UTF-8");
        assertEquals(1, document_OutputSettings1.indentAmount());
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        Document document0 = Document.createShell("bHJ~bQ$h$`6]");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset("UTF-8");
        assertTrue(document_OutputSettings1.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        Document document0 = new Document("7;~eiyx`f");
        document0.normalise();
        Element element0 = document0.text("");
        assertEquals("#document", element0.nodeName());
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        Document document0 = Document.createShell("9B'o{xh");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        assertTrue(document_OutputSettings0.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        Document document0 = Document.createShell("9B'o{xh");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.prettyPrint(false);
        assertFalse(document_OutputSettings0.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        Document document0 = Document.createShell("9B'o{xh");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.prettyPrint(false);
        Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
        assertFalse(document_OutputSettings1.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        Document document0 = new Document("~{21OC{d_>4wmxR)\"");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        assertEquals(1, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        Document document0 = new Document("~{21OC{d_>4wmxR)\"");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.indentAmount(0);
        assertEquals(0, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        Document document0 = new Document("~{21OC{d_>4wmxR)\"");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.indentAmount(0);
        Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
        assertEquals(0, document_OutputSettings1.indentAmount());
    }

    @Test(timeout = 4000)
    public void test0918() throws Throwable {
        Document document0 = new Document("");
        String string0 = document0.outerHtml();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        Document document0 = new Document("Kopf");
        Document document1 = document0.normalise();
        document1.head();
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        Document document0 = Document.createShell("CFrcn=wm`]6U?7!oF~J");
        Element element0 = document0.createElement("head");
        assertEquals("head", element0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1221() throws Throwable {
        Document document0 = new Document("Kopf");
        Document document1 = document0.normalise();
        Element element0 = document1.body();
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        Document document0 = new Document("Kopf");
        Document document1 = document0.normalise();
        Element element0 = document1.body();
        assertNotNull(element0);
    }

    @Test(timeout = 4000)
    public void test1323() throws Throwable {
        Document document0 = Document.createShell("pWRv[&yJyv!x");
        Node[] nodeArray0 = new Node[3];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        document0.addChildren(nodeArray0);
        // Undeclared exception!
        document0.title("#text");
    }

    @Test(timeout = 4000)
    public void test1424() throws Throwable {
        Document document0 = new Document("");
        // Undeclared exception!
        try {
            document0.title("");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Document", e);
        }
    }

    @Test(timeout = 4000)
    public void test1525() throws Throwable {
        Document document0 = Document.createShell("tBz6;U");
        // Undeclared exception!
        try {
            document0.title((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1626() throws Throwable {
        Document document0 = new Document("radic");
        document0.prependChild(document0);
        // Undeclared exception!
        document0.title();
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        Document document0 = new Document("harr");
        // Undeclared exception!
        try {
            document0.text("harr");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Document", e);
        }
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        Document document0 = new Document("#text");
        Node[] nodeArray0 = new Node[3];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        document0.addChildren(nodeArray0);
        // Undeclared exception!
        document0.outerHtml();
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        Document document0 = new Document("");
        document0.childNodes = null;
        // Undeclared exception!
        try {
            document0.normalise();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        // Undeclared exception!
        try {
            Document.createShell((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        Document document0 = Document.createShell("html");
        // Undeclared exception!
        try {
            document0.createElement("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        Document document0 = null;
        try {
            document0 = new Document((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        Document document0 = new Document("Kopf");
        Element element0 = document0.createElement(",V^6EmI&E");
        document0.prependChild(element0);
        assertEquals(",v^6emi&e", element0.tagName());
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        Document document0 = new Document("Kopf");
        Element element0 = document0.createElement(",V^6EmI&E");
        document0.prependChild(element0);
        Element element1 = document0.head();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        Document document0 = new Document("Kopf");
        Element element0 = document0.createElement(",V^6EmI&E");
        document0.prependChild(element0);
        Element element1 = document0.head();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        Document document0 = Document.createShell("Eta");
        document0.prependText("ziL8N5Xye})SGoac");
        Document document1 = document0.normalise();
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        Document document0 = new Document("Kopf");
        Element element0 = document0.body();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test2538() throws Throwable {
        Document document0 = new Document("Kopf");
        Element element0 = document0.body();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        Document document0 = new Document("Kopf");
        String string0 = document0.nodeName();
        assertEquals("#document", string0);
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
        document_OutputSettings0.indentAmount(1363);
        assertEquals(1363, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        Document document0 = Document.createShell("8K{Eu?>*GR?7");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        // Undeclared exception!
        try {
            document_OutputSettings0.indentAmount((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2942() throws Throwable {
        Document document0 = Document.createShell("C");
        document0.appendText((String) null);
        Document document1 = document0.normalise();
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test3043() throws Throwable {
        Document document0 = Document.createShell("pWRv[&yJyv!x");
        document0.title("pWRv[&yJyv!x");
        document0.title("pWRv[&yJyv!x");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test3144() throws Throwable {
        Document document0 = Document.createShell("pWRv[&yJyv!x");
        document0.title("pWRv[&yJyv!x");
        document0.title();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        Document document0 = Document.createShell("8K{Eu?>*GR?7");
        String string0 = document0.title();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        Document document0 = Document.createShell("@qM3");
        // Undeclared exception!
        try {
            document0.text((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        Charset charset0 = Charset.defaultCharset();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
        assertTrue(document_OutputSettings1.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test3448() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        Charset charset0 = Charset.defaultCharset();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
        assertEquals(1, document_OutputSettings1.indentAmount());
    }

    @Test(timeout = 4000)
    public void test3549() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.escapeMode((Entities.EscapeMode) null);
        document0.title(":68pG[y9?Q{4;Q/PR^");
        // Undeclared exception!
        try {
            document0.outerHtml();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Entities", e);
        }
    }

    @Test(timeout = 4000)
    public void test3650() throws Throwable {
        Document document0 = new Document("");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.charset();
        assertTrue(document_OutputSettings0.prettyPrint());
    }

    @Test(timeout = 4000)
    public void test3651() throws Throwable {
        Document document0 = new Document("");
        Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
        document_OutputSettings0.charset();
        assertEquals(1, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test3752() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        document0.title("l;694tx2:4Q3.eB");
        String string0 = document0.outerHtml();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test3753() throws Throwable {
        Document document0 = Document.createShell("l;694tx2:4Q3.eB");
        document0.title("l;694tx2:4Q3.eB");
        String string0 = document0.outerHtml();
        assertEquals("<html>\n <head>\n  <title>l;694tx2:4Q3.eB</title>\n </head>\n <body></body>\n</html>", string0);
    }
}
