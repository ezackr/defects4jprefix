/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 22:45:30 GMT 2023
 */
package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        linkedList0.remove((Object) arrayList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        Integer integer0 = new Integer(538);
        multiValueMap0.removeMapping(arrayList0, integer0);
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        multiValueMap0.putAll((Integer) null, (Collection<Object>) arrayList1);
        multiValueMap0.values();
        // Undeclared exception!
        try {
            arrayList0.listIterator(538);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 538
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        multiValueMap0.iterator((Object) arrayList0);
        multiValueMap0.size((Object) arrayList0);
        multiValueMap0.iterator();
        MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, HashMap<Object, Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, HashMap<Object, Integer>>();
        ArrayList<Object> arrayList1 = null;
        try {
            arrayList1 = new ArrayList<Object>((Collection<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Integer>>();
        MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
        MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap1);
        multiValueMap2.size((Object) multiValueMap1);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        int int0 = 1;
        Integer integer0 = new Integer(1);
        multiValueMap0.values();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        arrayList0.add((Object) integer0);
        arrayList0.add((Object) null);
        multiValueMap0.containsValue((Object) integer0, (Object) arrayList0);
        MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
        LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
        linkedList0.add((Collection<Object>) arrayList0);
        multiValueMap1.putAll((Integer) null, (Collection<Collection<Object>>) linkedList0);
        multiValueMap1.iterator();
        ArrayList<ArrayList<Collection<Object>>> arrayList1 = new ArrayList<ArrayList<Collection<Object>>>();
        Factory<Collection<ArrayList<Collection<Object>>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Collection<Object>>>) arrayList1);
        // Undeclared exception!
        try {
            MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Collection<Object>>>>) null, factory0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Map must not be null.
            //
            verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
        }
    }

    @Test(timeout = 4000)
    public void test175() throws Throwable {
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Integer>>>) hashMap0);
        multiValueMap0.totalSize();
    }

    @Test(timeout = 4000)
    public void test186() throws Throwable {
        // Undeclared exception!
        try {
            MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, String>>>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Map must not be null.
            //
            verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
        }
    }

    @Test(timeout = 4000)
    public void test197() throws Throwable {
        MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>>();
        MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>>();
        BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
        multiValueMap1.forEach(biConsumer0);
        int int0 = (-2104);
        multiValueMap1.createCollection((-2104));
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        hashMap0.put(multiValueMap1, multiValueMap1);
        // Undeclared exception!
        try {
            MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The factory must not be null
            //
            verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test208() throws Throwable {
        Map<Collection<Object>, Object> map0 = null;
        Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
        // Undeclared exception!
        try {
            MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Object>>) null, factory0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Map must not be null.
            //
            verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
        }
    }

    @Test(timeout = 4000)
    public void test219() throws Throwable {
        HashMap<ArrayList<Collection<Object>>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Collection<Object>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
        MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, Object>((Map<ArrayList<Collection<Object>>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
        MultiValueMap<ArrayList<Collection<Object>>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<ArrayList<String>>>) multiValueMap0);
        multiValueMap1.putAll((Map<? extends ArrayList<Collection<Object>>, ?>) hashMap0);
        MultiValueMap<ArrayList<Integer>, String> multiValueMap2 = new MultiValueMap<ArrayList<Integer>, String>();
        multiValueMap2.createCollection((-3421));
    }

    @Test(timeout = 4000)
    public void test2210() throws Throwable {
        MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
        MultiValueMap<Collection<Integer>, Object> multiValueMap1 = new MultiValueMap<Collection<Integer>, Object>();
        multiValueMap1.iterator();
        multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
        multiValueMap1.containsValue((Object) "", (Object) multiValueMap0);
        MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap2 = new MultiValueMap<LinkedList<Object>, ArrayList<Integer>>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
        multiValueMap2.putAll(linkedList0, (Collection<ArrayList<Integer>>) arrayList0);
    }

    @Test(timeout = 4000)
    public void test2311() throws Throwable {
        MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        multiValueMap1.put(multiValueMap0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test2512() throws Throwable {
        MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Collection<Object>>>();
        Integer integer0 = new Integer(0);
        multiValueMap0.size((Object) integer0);
        multiValueMap0.totalSize();
    }

    @Test(timeout = 4000)
    public void test2813() throws Throwable {
        HashMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Object>();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        arrayList0.clear();
        AbstractMap.SimpleEntry<Object, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Collection<Object>>(hashMap0, arrayList0);
        hashMap0.put(abstractMap_SimpleEntry0, (Object) null);
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Collection<Object>>, ? super Collection<LinkedList<Object>>>) hashMap0);
        MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
        multiValueMap0.entrySet();
    }

    @Test(timeout = 4000)
    public void test2914() throws Throwable {
        MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        multiValueMap0.putAll(linkedList0, (Collection<String>) null);
        // Undeclared exception!
        try {
            MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Map must not be null.
            //
            verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
        }
    }

    @Test(timeout = 4000)
    public void test3115() throws Throwable {
        MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
        MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
        multiValueMap1.map = (Map<String, Object>) multiValueMap0;
        multiValueMap1.totalSize();
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test3216() throws Throwable {
        MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        Factory<LinkedList<AbstractMap.SimpleEntry<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<String, Object>>>) hashMap0, factory0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        multiValueMap1.removeMapping(hashMap0, arrayList0);
    }

    @Test(timeout = 4000)
    public void test3317() throws Throwable {
        MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
        MultiValueMap<Object, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
        multiValueMap1.replace((Object) multiValueMap0, (Object) null);
        multiValueMap1.size((Object) multiValueMap0);
        MultiValueMap<ArrayList<Object>, HashMap<Object, String>> multiValueMap2 = new MultiValueMap<ArrayList<Object>, HashMap<Object, String>>();
        String string0 = "bBD1O}";
        multiValueMap2.size((Object) "bBD1O}");
        MultiValueMap<Collection<String>, Collection<String>> multiValueMap3 = new MultiValueMap<Collection<String>, Collection<String>>();
        Set<Map.Entry<Collection<String>, Object>> set0 = multiValueMap3.entrySet();
        MultiValueMap<String, Integer> multiValueMap4 = new MultiValueMap<String, Integer>();
        multiValueMap4.containsValue((Object) null, (Object) set0);
        multiValueMap3.createCollection(0);
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(biFunction0).apply(any(), any());
        multiValueMap1.compute(set0, biFunction0);
        MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap5 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap2);
        multiValueMap5.clear();
        Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Collection<Object>>>) multiValueMap5, factory0);
        // Undeclared exception!
        try {
            multiValueMap4.putAll((Map<? extends String, ?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test3418() throws Throwable {
        MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        multiValueMap0.replace("org.apache.commons.collections4.map.MultiValueMap$Values", (Object) arrayList0);
        MultiValueMap<String, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) multiValueMap0);
        multiValueMap1.get(multiValueMap0);
        multiValueMap0.put("InstantiateFactory: Constructor threw an exception", (Object) null);
    }

    @Test(timeout = 4000)
    public void test3719() throws Throwable {
        HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
        MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        arrayList0.add((Object) hashMap0);
        ArrayList<Object> arrayList1 = new ArrayList<Object>();
        arrayList0.add((Object) arrayList1);
        arrayList0.trimToSize();
        String string0 = "";
        arrayList0.add((Object) "");
        arrayList0.add((Object) multiValueMap0);
        Object object0 = new Object();
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        ArrayList<Object> arrayList2 = new ArrayList<Object>();
        BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap0.computeIfPresent(arrayList2, biFunction1);
        hashMap0.merge(arrayList1, object0, biFunction0);
        Object object1 = new Object();
        hashMap0.put(arrayList0, object1);
        ArrayList<Object> arrayList3 = new ArrayList<Object>();
        ArrayList<Integer> arrayList4 = new ArrayList<Integer>();
        Integer integer0 = new Integer(0);
        arrayList4.add(integer0);
        // Undeclared exception!
        try {
            multiValueMap0.put(arrayList1, arrayList4);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Object cannot be cast to java.util.Collection
            //
            verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test3820() throws Throwable {
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0, factory0);
        // Undeclared exception!
        try {
            multiValueMap0.put(hashMap0, factory0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // ExceptionFactory invoked
            //
            verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test3921() throws Throwable {
        MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
        Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
        MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0, factory0);
        MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
        multiValueMap2.containsValue((Object) multiValueMap1, (Object) factory0);
        MultiValueMap<LinkedList<Integer>, String> multiValueMap3 = new MultiValueMap<LinkedList<Integer>, String>();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        multiValueMap3.putIfAbsent(linkedList0, "`%D_'9JyG?JX]!fSH");
        multiValueMap2.clear();
        LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
        multiValueMap3.put(linkedList1, multiValueMap2);
    }

    @Test(timeout = 4000)
    public void test4022() throws Throwable {
        MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
        Integer integer0 = new Integer((-1175));
        multiValueMap0.putIfAbsent(integer0, integer0);
        Integer integer1 = new Integer(0);
        UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
        multiValueMap0.computeIfAbsent(integer1, unaryOperator0);
        Integer integer2 = new Integer(4317);
        multiValueMap0.containsValue((Object) integer2);
        // Undeclared exception!
        try {
            MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Object>>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Map must not be null.
            //
            verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
        }
    }

    @Test(timeout = 4000)
    public void test4223() throws Throwable {
        MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
        multiValueMap0.iterator((Object) null);
        Collection<Object> collection0 = multiValueMap0.values();
        HashMap<Collection<String>, Collection<Object>> hashMap0 = new HashMap<Collection<String>, Collection<Object>>();
        hashMap0.getOrDefault((Object) null, collection0);
        MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap0);
        multiValueMap1.iterator();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        multiValueMap1.putAll((Collection<String>) arrayList0, collection0);
        MultiValueMap<Object, LinkedList<String>> multiValueMap2 = new MultiValueMap<Object, LinkedList<String>>();
        multiValueMap2.createCollection(1573);
        Factory<Collection<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
        // Undeclared exception!
        try {
            MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) null, factory0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Map must not be null.
            //
            verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
        }
    }

    @Test(timeout = 4000)
    public void test4524() throws Throwable {
        MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
        LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
        ConstantFactory<LinkedList<ArrayList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Integer>>>(linkedList0);
        MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Integer>>>) constantFactory0);
        multiValueMap1.totalSize();
        multiValueMap1.put("org.apache.commons.collections4.iterators.AbstractEmptyIterator", multiValueMap0);
        multiValueMap1.put("", linkedList0);
        MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = new MultiValueMap<Object, ArrayList<Object>>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            multiValueMap2.containsValue((Object) linkedList0, (Object) linkedList1);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4625() throws Throwable {
        MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
        ArrayList<String> arrayList0 = new ArrayList<String>();
        String string0 = "(00t8~_,Y:i[3Z";
        arrayList0.add("(00t8~_,Y:i[3Z");
        arrayList0.add("(00t8~_,Y:i[3Z");
        multiValueMap0.containsValue((Object) arrayList0);
        ArrayList<String> arrayList1 = new ArrayList<String>();
        arrayList1.add("(00t8~_,Y:i[3Z");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        arrayList1.addAll(0, (Collection<? extends String>) linkedList0);
        multiValueMap0.containsValue((Object) arrayList1);
        MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
        MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
        multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
        // Undeclared exception!
        try {
            multiValueMap1.size((Object) linkedList0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4926() throws Throwable {
        MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Integer>>();
        MultiValueMap<Integer, Collection<Integer>> multiValueMap1 = new MultiValueMap<Integer, Collection<Integer>>();
        HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
        Integer integer0 = new Integer((-1));
        BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        multiValueMap1.mapIterator();
        multiValueMap1.computeIfPresent(integer0, biFunction0);
        hashMap0.put((Integer) null, "Class to instantiate must not be null");
        multiValueMap1.putAll((Map<? extends Integer, ?>) hashMap0);
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap1);
    }

    @Test(timeout = 4000)
    public void test5027() throws Throwable {
        MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
        multiValueMap0.values();
        MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
        multiValueMap1.values();
        MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
        multiValueMap2.totalSize();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        multiValueMap2.put(arrayList0, multiValueMap1);
        HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test5328() throws Throwable {
        HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
        Integer integer0 = new Integer(1);
        hashMap0.put(integer0, integer0);
        MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Integer>>>) hashMap0);
        // Undeclared exception!
        try {
            multiValueMap0.containsValue((Object) hashMap0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Integer cannot be cast to java.util.Collection
            //
            verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
        }
    }
}
