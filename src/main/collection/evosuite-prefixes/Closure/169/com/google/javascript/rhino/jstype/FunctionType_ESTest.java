/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:46:28 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        boolean boolean0 = noResolvedType0.makesStructs();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setStruct();
        boolean boolean0 = noResolvedType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Y1haW'!S");
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, unknownType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, indexedType0, unknownType0);
        modificationVisitor0.caseParameterizedType(parameterizedType0);
        indexedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Y1haW'!S");
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, unknownType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, indexedType0, unknownType0);
        modificationVisitor0.caseParameterizedType(parameterizedType0);
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isReturnTypeInferred();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayList0);
        JSType jSType0 = unionType0.autobox();
        boolean boolean0 = jSType0.canBeCalled();
        jSType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayList0);
        JSType jSType0 = unionType0.autobox();
        boolean boolean0 = jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("bind");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("bind");
        functionType0.setPrototypeBasedOn((ObjectType) functionType1, (Node) null);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getExtendedInterfacesCount();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getOwnImplementedInterfaces();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getSubTypes();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Gvind");
        Node node0 = Node.newNumber(111.46632921);
        jSTypeRegistry0.createConstructorType("Not declared as a type name", node0, node0, (JSType) errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString(105, "X7vfXCn.^");
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "X7vfXCn.^", node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType1.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((-1495.975472109649));
        FunctionType.forInterface(jSTypeRegistry0, "): ", node0);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesStructs();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.makesStructs();
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.makesDicts();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.makesDicts();
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        boolean boolean0 = functionType1.makesDicts();
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        boolean boolean0 = functionType1.makesDicts();
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        noResolvedType0.setDict();
        errorFunctionType0.defineProperty("prototype", instanceObjectType0, false, node0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1829() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newString("Named type with empty name component", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        noResolvedType0.setDict();
        errorFunctionType0.defineProperty("prototype", instanceObjectType0, false, node0);
        boolean boolean0 = errorFunctionType0.makesDicts();
    }

    @Test(timeout = 4000)
    public void test1930() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test1931() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2032() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.hasImplementedInterfaces();
        noResolvedType0.setSource((Node) null);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2133() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test2337() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "JxK*C>8IHMhSxNGx}R");
        int int0 = errorFunctionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test2338() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "JxK*C>8IHMhSxNGx}R");
        int int0 = errorFunctionType0.getMinArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMinArguments();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2440() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test2541() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getPropertyType("");
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test2542() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getPropertyType("");
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2543() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getPropertyType("");
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2644() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "direct_eval", (Node) null);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2745() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMaxArguments();
        noType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2746() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2847() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".prottyp");
        int int0 = errorFunctionType0.getMaxArguments();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2848() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".prottyp");
        int int0 = errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2949() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("bind", (Node) null);
        functionType0.getPropertyType("prototype");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3050() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getImplementedInterfaces();
        noResolvedType0.getOwnPropertyNames();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3151() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Set<String> set0 = noResolvedType0.getOwnPropertyNames();
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3152() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Set<String> set0 = noResolvedType0.getOwnPropertyNames();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3253() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber(1003.395284014, 1, 0);
        boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
    }

    @Test(timeout = 4000)
    public void test3254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber(1003.395284014, 1, 0);
        boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
        noResolvedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("{L^", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", (Node) null, functionType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) enumType0, (ObjectType) enumType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) enumType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) enumType0, (ObjectType) instanceObjectType0, (ObjectType) enumType0, (ObjectType) instanceObjectType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        noResolvedType0.getAllImplementedInterfaces();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3456() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0, (ObjectType) instanceObjectType0);
        noResolvedType0.setImplementedInterfaces(immutableList0);
        noResolvedType0.getAllImplementedInterfaces();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3557() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        functionType0.getAllImplementedInterfaces();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test3658() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test3759() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setImplementedInterfaces(immutableList0);
    }

    @Test(timeout = 4000)
    public void test3860() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "JxK*C>8IHMhSxNGx}R");
        errorFunctionType0.getAllExtendedInterfaces();
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3961() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
        noResolvedType0.setExtendedInterfaces(immutableList0);
    }

    @Test(timeout = 4000)
    public void test4062() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        functionType0.setExtendedInterfaces((List<ObjectType>) null);
    }

    @Test(timeout = 4000)
    public void test4163() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4264() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.getPropertyType("apply");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4365() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType((-1882481052));
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4466() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "CharMatcher.INVISIBLE");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(1531);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4567() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(38);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4668() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", jSType0, false, (Node) null);
    }

    @Test(timeout = 4000)
    public void test4669() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", jSType0, false, (Node) null);
        errorFunctionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4770() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(noResolvedType0, false);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4771() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(noResolvedType0, false);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4872() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        Stack<JSType> stack0 = new Stack<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) noResolvedType0, (List<JSType>) stack0);
        JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4873() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        Stack<JSType> stack0 = new Stack<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) noResolvedType0, (List<JSType>) stack0);
        JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4874() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        Stack<JSType> stack0 = new Stack<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) noResolvedType0, (List<JSType>) stack0);
        JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4875() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        Stack<JSType> stack0 = new Stack<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) noResolvedType0, (List<JSType>) stack0);
        JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test4976() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        Node node0 = new Node((-2035458213), 8, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, functionType0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) noResolvedType0, (JSType) functionType0, (JSType) functionType0, (JSType) noResolvedType0, (JSType) functionType0, (JSType) functionType0, (JSType) enumType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4977() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        Node node0 = new Node((-2035458213), 8, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, functionType0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) noResolvedType0, (JSType) functionType0, (JSType) functionType0, (JSType) noResolvedType0, (JSType) functionType0, (JSType) functionType0, (JSType) enumType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test5078() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType0, (List<JSType>) linkedList0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5079() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType0, (List<JSType>) linkedList0);
        FunctionType functionType2 = (FunctionType) JSType.getLeastSupertype((JSType) functionType1, (JSType) functionType0);
        FunctionType functionType3 = functionType1.supAndInfHelper(functionType2, false);
    }

    @Test(timeout = 4000)
    public void test5180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noResolvedType0, noResolvedType0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionType((JSType) functionType0, false, jSTypeArray0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noResolvedType0, noResolvedType0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionType((JSType) functionType0, false, jSTypeArray0);
        functionType1.supAndInfHelper(functionType2, true);
        functionType1.equals((Object) functionType2);
    }

    @Test(timeout = 4000)
    public void test5282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1, (-1798367301), 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType0, (List<JSType>) linkedList0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5283() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1, (-1798367301), 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) JSType.getLeastSupertype(jSType0, (JSType) functionType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    }

    @Test(timeout = 4000)
    public void test5384() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1, (-1798367301), 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) functionType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) JSType.getLeastSupertype(jSType0, (JSType) functionType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test5387() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1, (-1798367301), 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) functionType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) JSType.getLeastSupertype(jSType0, (JSType) functionType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType2.isConstructor();
    }

    @Test(timeout = 4000)
    public void test5488() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) recordType0, (JSType) numberType0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) immutableList0);
        JSType.getLeastSupertype((JSType) functionType0, jSType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5589() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        JSType.getLeastSupertype((JSType) objectType0, (JSType) errorFunctionType0);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test5690() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=(q");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
        errorFunctionType0.supAndInfHelper(functionType0, false);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5791() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        JSType.getLeastSupertype((JSType) functionType0, (JSType) objectType0);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test5792() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        JSType.getLeastSupertype((JSType) functionType0, (JSType) objectType0);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test5793() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        JSType.getLeastSupertype((JSType) functionType0, (JSType) objectType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test5894() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        objectType0.canTestForShallowEqualityWith(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5895() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        objectType0.canTestForShallowEqualityWith(functionType0);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test5996() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, instanceObjectType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType2.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test5997() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, instanceObjectType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test5998() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, instanceObjectType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5999() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, instanceObjectType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    }

    @Test(timeout = 4000)
    public void test60100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType1, (List<JSType>) linkedList0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test60101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType1, (List<JSType>) linkedList0);
        JSType jSType1 = JSType.getLeastSupertype(jSType0, (JSType) functionType1);
    }

    @Test(timeout = 4000)
    public void test61102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        functionType0.getSuperClassConstructor();
    }

    @Test(timeout = 4000)
    public void test62103() throws Throwable {
        IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
        ObjectType objectType0 = FunctionType.getTopDefiningInterface(indexedType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test63104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "-3-", (Node) null);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        functionType0.setPrototypeBasedOn((ObjectType) templateType0, (Node) null);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test63105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "-3-", (Node) null);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        functionType0.setPrototypeBasedOn((ObjectType) templateType0, (Node) null);
        ObjectType objectType0 = functionType0.getTopMostDefiningType("Named type with empty name component");
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test63106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "-3-", (Node) null);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        functionType0.setPrototypeBasedOn((ObjectType) templateType0, (Node) null);
        ObjectType objectType0 = functionType0.getTopMostDefiningType("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test64107() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        functionType0.getTopMostDefiningType("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test65108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.supAndInfHelper(noResolvedType1, true);
        ObjectType objectType0 = functionType0.getTopMostDefiningType("");
        objectType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test66109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = Node.newString("Not declared as a constructor", 1, 1);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.defineProperty("prototype", instanceObjectType0, true, node0);
        ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType("Not declared as a type name");
        objectType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test68110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "b", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Not declared as a constructor", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType1);
    }

    @Test(timeout = 4000)
    public void test68111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "b", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Not declared as a constructor", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test68112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "b", (Node) null);
        FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Not declared as a constructor", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test69113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        JSType jSType0 = functionType0.getPropertyType("bind");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test69114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        JSType jSType0 = functionType0.getPropertyType("bind");
        boolean boolean0 = jSType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test70115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(0, 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, instanceObjectType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType0.isSubtype(functionType2);
    }

    @Test(timeout = 4000)
    public void test70116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(0, 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, instanceObjectType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType0.isSubtype(functionType2);
        functionType2.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test70117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(0, 0, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, instanceObjectType0);
        FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
        functionType0.isSubtype(functionType2);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test71118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(0, (-2046041850), 0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, true);
        String string0 = functionType1.toDebugHashCodeString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test71119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = new Node(0, (-2046041850), 0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, true);
        String string0 = functionType1.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test72120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("gv.`hUM_V?f9", (Node) null);
        functionType0.hashCode();
    }

    @Test(timeout = 4000)
    public void test73121() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "r_&FELJ}T");
        errorFunctionType0.setInstanceType(errorFunctionType0);
        String string0 = errorFunctionType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test74122() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test75124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("bind");
        String string0 = functionType1.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test76125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("bind", (Node) null);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test77126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) immutableList0);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test78127() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        String string0 = functionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test79128() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        boolean boolean0 = functionType0.isSubtype(objectType0);
    }

    @Test(timeout = 4000)
    public void test79129() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("valueOf", (Node) null);
        ObjectType objectType0 = functionType0.getParentScope();
        boolean boolean0 = functionType0.isSubtype(objectType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test80130() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Gvind");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test81131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test81132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        boolean boolean0 = jSType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test82133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType1, (List<JSType>) linkedList0);
        JSType.getLeastSupertype(jSType0, (JSType) functionType1);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test82134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Not declared as a type name");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) functionType1, (List<JSType>) linkedList0);
        JSType.getLeastSupertype(jSType0, (JSType) functionType1);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test83135() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test84136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        Node node0 = Node.newString("Not declared as a constructor", 1, 1);
        functionType0.setSource(node0);
    }

    @Test(timeout = 4000)
    public void test85137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        noResolvedType0.getPrototype();
        noResolvedType0.setSource(node0);
        noResolvedType0.setSource(node0);
        noResolvedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test86138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        Node node0 = Node.newString(0, "Named type with empty name component");
        noResolvedType0.getAllImplementedInterfaces();
        noResolvedType0.setPrototypeBasedOn((ObjectType) instanceObjectType0, node0);
    }

    @Test(timeout = 4000)
    public void test87139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.hasEqualCallType(noResolvedType0);
        errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", instanceObjectType0, false, (Node) null);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test87140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.hasEqualCallType(noResolvedType0);
        errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", instanceObjectType0, false, (Node) null);
    }

    @Test(timeout = 4000)
    public void test88141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
        noResolvedType0.setImplicitPrototype(objectType0);
    }

    @Test(timeout = 4000)
    public void test89142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ";+z'*AZG[7#^=lM+");
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, (JSType) numberType0, (JSType) templateType0, (JSType) numberType0, jSType0, (JSType) templateType0, (JSType) templateType0, jSType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "LAZY_NAMES");
        FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, true);
        boolean boolean0 = functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test90143() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.makesStructs();
        JSType jSType0 = functionType0.resolveInternal((ErrorReporter) null, functionType0);
    }

    @Test(timeout = 4000)
    public void test91144() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ";@1HtUqS");
        NoType noType0 = new NoType(jSTypeRegistry0);
        errorFunctionType0.setInstanceType((ObjectType) null);
        JSType jSType0 = errorFunctionType0.resolveInternal((ErrorReporter) null, noType0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test92145() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) errorFunctionType0, (ObjectType) noResolvedType0, (ObjectType) errorFunctionType0, (ObjectType) errorFunctionType0);
        errorFunctionType0.setImplementedInterfaces(immutableList0);
        JSType jSType0 = errorFunctionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
        jSType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test93146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        errorFunctionType1.getExtendedInterfacesCount();
    }

    @Test(timeout = 4000)
    public void test94147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        String string0 = functionType0.toDebugHashCodeString();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test94148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "bind", (Node) null);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test95149() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        String string0 = functionType0.toDebugHashCodeString();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test95150() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test96151() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test97152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "i`no5u\"V8");
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[2] = (JSType) templateType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, jSTypeArray0);
        boolean boolean0 = functionType0.hasAnyTemplateInternal();
    }
}
