/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:40:18 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("PARAM");
      Element element0 = document0.createElement("PARAM");
      Elements elements0 = Selector.select("PARAM", element0);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A9");
      Element element0 = new Element(tag0, "A9");
      Pattern pattern0 = Pattern.compile("^", 32);
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      Elements elements1 = Selector.select("A9", (Iterable<Element>) elements0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("MENU");
      Elements elements0 = document0.getElementsByAttributeValueNot("1V}\"VycY", "1V}\"VycY");
      Elements elements1 = Selector.select("MENU", (Iterable<Element>) elements0);
      Elements elements2 = Selector.filterOut(elements0, elements1);
      assertEquals(4, elements2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("O=(3KH.9.)(>0P*");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      Selector.select("NOSCRIPT", element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("?+b");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        Selector.select("?+b", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '?+b': unexpected token at '?+b'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell(":M.");
      Element element0 = document0.text(",!iyHx;LGjoGE");
      Pattern pattern0 = Pattern.compile(",!iyHx;LGjoGE", 856);
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      LinkedList<Element> linkedList0 = new LinkedList<Element>(elements0);
      // Undeclared exception!
      try { 
        Selector.select(",!iyHx;LGjoGE", (Iterable<Element>) linkedList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown combinator: ,
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.filterOut((Collection<Element>) null, (Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("1V}\"VycY", objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("O=(3KH.9.)(>0P*");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("O=(3KH.9.)(>0P*");
      Elements elements0 = Selector.select("N~SCRIPT", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell(":has(el) subselect must not be empty");
      // Undeclared exception!
      try { 
        Selector.select("wu[sx=", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("MENU");
      // Undeclared exception!
      try { 
        Selector.select("F7|(2,|H>|~Rnbe!9`", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'F7|(2,|H>|~Rnbe!9`': unexpected token at '(2,|H>|~Rnbe!9`'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("Kq.)gNG^9HEwi/w7LcC");
      // Undeclared exception!
      try { 
        Selector.select(":matchesOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :matches(regex) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("gX8b[tzFGEbA,#.*%Qe");
      Elements elements0 = Selector.select(":matches(regex) query must not be empty", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("O=(3KH.9.)(>0P*");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        Selector.select(":contains(", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :contains(text) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("?+b");
      Elements elements0 = Selector.select("BAS[5", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("*EG>~.");
      // Undeclared exception!
      try { 
        Selector.select(",", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown combinator: ,
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("pxNv!/^A}@6hHb");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>(8770, comparator0);
      priorityQueue0.add(document0);
      Elements elements0 = Selector.select("+DfL", (Iterable<Element>) priorityQueue0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("O=(3KH.9.)(>0P*");
      Elements elements0 = Selector.select("G,M>XM Lx0]Dj%3Fy", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("MENU");
      Elements elements0 = document0.getElementsByAttributeValueNot("1V}\"VycY", "ObiSSF:$%RX*");
      // Undeclared exception!
      try { 
        Selector.select(":gt(%d)", (Iterable<Element>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`Y2");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "^(z,C2REO^.q8>\"G", attributes0);
      // Undeclared exception!
      try { 
        Selector.select(":lt(", element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("?+b");
      // Undeclared exception!
      try { 
        Selector.select("~.y6V@Ai4w].gnH|M8", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '.y6V@Ai4w].gnH|M8': unexpected token at '@Ai4w].gnH|M8'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document(":not(selector) subselect must not be empty");
      Elements elements0 = Selector.select(":not(selector) subselect must not be empty", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell(":has(el) subselect must not be empty");
      Elements elements0 = Selector.select(":has(el) subselect must not be empty", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("MENU");
      // Undeclared exception!
      try { 
        Selector.select("J*B#4v:'[~\"M_* <F", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'J*B#4v:'[~\"M_* <F': unexpected token at ':'[~\"M_* <F'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }
}
