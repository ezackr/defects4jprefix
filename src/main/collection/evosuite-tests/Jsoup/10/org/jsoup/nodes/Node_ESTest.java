/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:37:04 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("{~ HodE");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      Element element0 = document0.appendChild(xmlDeclaration0);
      element0.prependElement("xhArr");
      xmlDeclaration0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("F,9VdJTEq#", "Dj<7o=#");
      TextNode textNode0 = TextNode.createFromEncoded("t<*hB:-f3ha", "F,9VdJTEq#");
      comment0.parentNode = (Node) textNode0;
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("empty");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      nodeArray0[1].siblingNodes();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("m9e");
      Document document1 = document0.normalise();
      document0.setParentNode(document1);
      document0.removeChild(document0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      document0.outerHtml(stringBuilder0);
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataNode dataNode0 = new DataNode("Xfr", ",\u0000Twq9");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) dataNode0;
      dataNode0.addChildren(0, nodeArray0);
      assertEquals(",\u0000Twq9", dataNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("");
      document0.setSiblingIndex(31);
      assertEquals(31, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("\u0007");
      Element element0 = document0.empty();
      String string0 = element0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("n", "Ropf");
      Node node0 = textNode0.removeAttr("8N");
      assertSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      String string0 = textNode0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("93nFD{n");
      String string0 = document0.nodeName();
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("`?d^=c@jraB?~;tI", "#text", true);
      Node node0 = xmlDeclaration0.doClone(xmlDeclaration0);
      assertNotSame(node0, xmlDeclaration0);
      assertEquals(0, (int)node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals(1, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      Node[] nodeArray0 = xmlDeclaration0.childNodesAsArray();
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("}n(Ukq@WGXV$h5ie");
      Comment comment0 = new Comment(";&W!X{SVUl>Kh,s=rC(", ";&W!X{SVUl>Kh,s=rC(");
      // Undeclared exception!
      try { 
        comment0.replaceChild((Node) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("3mZ");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("M6\"5q`Y", "WPd2<)?~t`{2\"");
      // Undeclared exception!
      try { 
        dataNode0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("abs:trie");
      // Undeclared exception!
      try { 
        document0.previousSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("(.s>>e");
      // Undeclared exception!
      try { 
        document0.indent((StringBuilder) null, 0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("vf?Qd*`9`KeVb_@7");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
      // Undeclared exception!
      try { 
        document0.indent(stringBuilder0, (-2322), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("abs:");
      // Undeclared exception!
      try { 
        document0.childNode((-138728127));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("`?d^=c@jraB?~;tI", "#text", true);
      // Undeclared exception!
      try { 
        xmlDeclaration0.attr("", "#text");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("planck");
      // Undeclared exception!
      try { 
        document0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "\n");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("4>3");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("fszc/xF-2");
      TextNode textNode0 = TextNode.createFromEncoded("#comment", "fszc/xF-2");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("abs:{y7)^b@^jfpkq]$ g");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      TextNode textNode0 = new TextNode("Colon", " km");
      nodeArray0[5] = (Node) textNode0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.addChildren((-2217), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2217, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("abs:");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.addChildren((-264984309), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("{y7)^B@^JfPkQ]$ g");
      // Undeclared exception!
      try { 
        document0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      assertEquals(0, (int)document1.siblingIndex());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comment comment0 = new Comment("k&vJVbj", "k&vJVbj");
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comment comment0 = new Comment("", "e\"9(GQMW*:PsQsP|6");
      boolean boolean0 = comment0.equals("e\"9(GQMW*:PsQsP|6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("{~ HodE");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      Element element0 = document0.appendChild(xmlDeclaration0);
      Element element1 = element0.prependElement("xhArr");
      element1.parentNode.parentNode = (Node) element0;
      element1.parentNode.parentNode.nextSibling();
      assertEquals(1, (int)xmlDeclaration0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell(",#$0(65,'V',^MFM\"");
      Node node0 = document0.nextSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("#com");
      Element element0 = document0.appendElement("#com");
      Node node0 = element0.nextSibling();
      assertNull(node0);
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = new TextNode("=\"", "=\"");
      Document document0 = textNode0.ownerDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendElement("Ufr");
      element0.ownerDocument();
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("abs:q`");
      Document document1 = document0.ownerDocument();
      assertEquals("abs:q`", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comment comment0 = new Comment("F,9VdJTEq#", "Dj<7o=#");
      String string0 = comment0.absUrl("Dj<7o=#");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("abs:q`");
      String string0 = document0.attr("@u");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comment comment0 = new Comment("F,9VdJTEq#", "Dj<7o=#");
      List<Node> list0 = comment0.childNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("abs:q`");
      Integer integer0 = document0.siblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("t<*hB:-f3ha", "F,9VdJTEq#");
      String string0 = textNode0.outerHtml();
      assertEquals("t&lt;*hB:-f3ha", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comment comment0 = new Comment("", "e\"9(GQMW*:PsQsP|6");
      // Undeclared exception!
      try { 
        comment0.outerHtml((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("swnwar", "swnwar");
      Node node0 = textNode0.clone();
      assertEquals(0, (int)node0.siblingIndex());
      assertNotSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DataNode dataNode0 = new DataNode("mgg;c", "e");
      String string0 = dataNode0.baseUri();
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("aB:", "aB:", true);
      Node node0 = xmlDeclaration0.parent();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      // Undeclared exception!
      try { 
        document0.childNode(228);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 228, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("sA9Xq:+rC}_al#b@D)");
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("`?d^=c@jraB?~;tI", "#text", true);
      Node node0 = xmlDeclaration0.attr("#text", "#text");
      assertEquals("#declaration", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      boolean boolean0 = xmlDeclaration0.hasAttr("kr8s2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("abs:");
      document0.html("abs:");
      String string0 = document0.toString();
      assertEquals("abs:", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:/.d", "abs:/.d");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("{y7)^B@^JfPkQ]$ g");
      Document document1 = document0.clone();
      document0.parentNode = (Node) document1;
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("{~ HodE");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      document0.appendChild(xmlDeclaration0);
      Node node0 = xmlDeclaration0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("m9e");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("{~ HodE");
      Element element0 = document0.prependElement("xhArr");
      element0.parentNode.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        element0.replaceWith(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("{~ HodE");
      Element element0 = document0.prependElement("xhArr");
      element0.replaceWith(document0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("\u0007");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Element element0 = document0.appendElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
      element0.setParentNode(document0);
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("abs:");
      String string0 = document0.attr("abs:trie");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("m9e");
      Element element0 = document0.attr("m9e", "m9e");
      Elements elements0 = element0.getElementsByAttributeValueContaining("m9e", "m9e");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("aB:", "aB:", true);
      // Undeclared exception!
      try { 
        xmlDeclaration0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DataNode dataNode0 = new DataNode("@LNr`+O6Q$", "@LNr`+O6Q$");
      // Undeclared exception!
      try { 
        dataNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("&26/x&<_x`RJmtmiH");
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("A#)Clg8&#", "", false);
      xmlDeclaration0.setBaseUri("");
      assertEquals("", xmlDeclaration0.baseUri());
  }
}
