/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 10:04:56 GMT 2023
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLRecoverableException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.beans.HasProperty;
import org.junit.runner.RunWith;
import org.mockito.MockSettings;
import org.mockito.Mockito;
import org.mockito.internal.creation.MockSettingsImpl;
import org.mockito.internal.verification.api.VerificationMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Mockito_ESTest extends Mockito_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Mockito.never();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Mockito.verify("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Mockito.atMost((-694));
      String string0 = "org.mockito.internal.matchers.LocalizedMatcher";
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Mockito.doNothing();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Mockito.reset((String[]) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Mockito.doCallRealMethod();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Mockito.atLeastOnce();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Mockito.withSettings();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Answer<Object> answer0 = Mockito.CALLS_REAL_METHODS;
      // Undeclared exception!
      try { 
        Mockito.mock(class0, (Answer) answer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Mockito.debug();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
      // Undeclared exception!
      try { 
        Mockito.mock(class0, (MockSettings) mockSettingsImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Mockito.verifyNoMoreInteractions(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        Mockito.doThrow(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Mockito mockito0 = new Mockito();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        Mockito.mock(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = "";
      // Undeclared exception!
      try { 
        Mockito.mock(class0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Mockito.doReturn("");
      // Undeclared exception!
      try { 
        Mockito.atLeast(1806);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Mockito.atLeast((-694));
      String string0 = "org.mockito.internal.matchers.LocalizedMatcher";
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Mockito.spy((Object) locale_FilteringMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "org.mockito.exceptions.Reporter";
      // Undeclared exception!
      try { 
        Mockito.stubVoid("org.mockito.exceptions.Reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VerificationMode verificationMode0 = Mockito.only();
      Integer integer0 = new Integer((-5));
      Mockito.verify((Object) integer0, verificationMode0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Answer<Object> answer0 = Mockito.RETURNS_MOCKS;
      Mockito.doAnswer(answer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.validateMockitoUsage();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      // Undeclared exception!
      try { 
        Mockito.inOrder(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Mockito.verifyZeroInteractions(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        Mockito.stub(locale_FilteringMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HasProperty<Object> hasProperty0 = new HasProperty<Object>("org.hamcrest.core.StringEndsWith");
      Mockito.when((Object) hasProperty0);
  }
}
