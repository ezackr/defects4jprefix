/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 16:29:03 GMT 2023
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PoissonDistributionImpl_ESTest extends PoissonDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(59.48167924, 59.48167924, 97);
      double double0 = poissonDistributionImpl0.cumulativeProbability(0);
      assertEquals(1.4703980961654014E-26, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.030589580535888672);
      double double0 = poissonDistributionImpl0.probability(1548);
      assertEquals(0.030589580535888672, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4.9E-324, 4.9E-324, 32767);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(0, int0);
      assertEquals(4.9E-324, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1151.89, 1151.89);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1151.89, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4.9E-324, 4.9E-324, 32767);
      try { 
        poissonDistributionImpl0.normalApproximateProbability(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Continued fraction diverged to NaN for value \u221E
         //
         verifyException("org.apache.commons.math.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(5.650007086920087E-9, (double) (-17));
      // Undeclared exception!
      poissonDistributionImpl0.cumulativeProbability(2396);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2322.1383677551, (-1425.3620083599687));
      try { 
        poissonDistributionImpl0.cumulativeProbability(95);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Continued fraction diverged to NaN for value 2,322.138
         //
         verifyException("org.apache.commons.math.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(5.650007086920087E-9, 5.650007086920087E-9, 0);
      try { 
        poissonDistributionImpl0.cumulativeProbability(2396);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-2289.0505632029985), (-36));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the Poisson mean must be positive (-2,289.051)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the Poisson mean must be positive (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-1067.2315), 0.0, 10000000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the Poisson mean must be positive (-1,067.232)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1427.9729143405275, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-603));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1427.9729143405275, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) 5775, 5775);
      double double0 = poissonDistributionImpl0.probability(5775);
      assertEquals(0.005249619238996912, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(1427.9729143405275, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(853.1);
      double double0 = poissonDistributionImpl0.probability((-278));
      assertEquals(0.0, double0, 0.01);
      assertEquals(853.1, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-278.599), (-278.599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the Poisson mean must be positive (-278.599)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(1439);
      assertEquals(1427.9729143405275, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.6198328899546514, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2097151, 543.590923799);
      // Undeclared exception!
      poissonDistributionImpl0.sample();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(10000000);
      assertEquals(1427.9729143405275, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(1427.9729143405275, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1435, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(853.1);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(853.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1427.9729143405275, 1427.9729143405275, 1439);
      poissonDistributionImpl0.getDomainLowerBound(1439);
  }
}
