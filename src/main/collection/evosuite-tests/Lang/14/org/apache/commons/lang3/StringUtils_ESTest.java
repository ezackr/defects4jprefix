/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:18:00 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.replace("G?T", "G?T", "~6D'3ZpW");
      assertNotNull(string0);
      assertEquals("~6D'3ZpW", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "~6D'3ZpW";
      charSequenceArray0[1] = (CharSequence) "G?T";
      charSequenceArray0[2] = (CharSequence) "~6D'3ZpW";
      charSequenceArray0[3] = (CharSequence) "~6D'3ZpW";
      int int0 = StringUtils.indexOfAny((CharSequence) "~6D'3ZpW", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("~6D'3ZpW");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("~6D'3ZpW", string1);
      
      String string2 = StringUtils.defaultString("null comparator", "`N4\"CQD");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("null comparator", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("null comparator");
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "G?T", charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      boolean boolean1 = StringUtils.isEmpty("`N4\"CQD");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat('n', 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean2 = arrayList0.add(locale_FilteringMode0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ListIterator<Locale.FilteringMode> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string4);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.capitalize("java.text.Normalizer$Form");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Java.text.Normalizer$Form", string5);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean3 = StringUtils.isBlank("G?T");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.deleteWhitespace("xJ.hgmv`/)");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("xJ.hgmv`/)", string6);
      
      String string7 = StringUtils.substringBeforeLast("p{InCombiningDiacriticalMarks}+", "`N4\"CQD");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
      
      String string8 = StringUtils.swapCase("3Bupt:8vT_y{c(~");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("3bUPT:8Vt_Y{C(~", string8);
      
      boolean boolean4 = StringUtils.isNumericSpace("3bUPT:8Vt_Y{C(~");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string9 = StringUtils.repeat(')', 8);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertEquals("))))))))", string9);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string10 = StringUtils.substringBetween("~6D'3ZpW", "org.apache.commons.lang3.ArrayUtils", (String) null);
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.left("org.apache.commons.lang3.exception.CloneFailedException", Integer.MAX_VALUE);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[1] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[2] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      objectArray0[3] = (Object) "org.apache.commons.lang3.exception.CloneFailedException";
      String string1 = StringUtils.join(objectArray0, "org.apache.commons.lang3.exception.CloneFailedException", (-1643), (-1950));
      assertNotNull(string1);
      assertEquals(4, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'v';
      charArray0[2] = '}';
      charArray0[3] = '^';
      charArray0[4] = '+';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'+', 'v', '}', '^', '+'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException", (-1643));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.exception.CloneFailedException", "", (-1950));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.trimToNull("L.`M$}co;-V");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("L.`M$}co;-V", string3);
      
      int int2 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.exception.CloneFailedException", "L.`M$}co;-V", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.trimToNull("C#IQaF\"6kHl?Q:5zb7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("C#IQaF\"6kHl?Q:5zb7", string4);
      
      boolean boolean1 = StringUtils.isEmpty("C#IQaF\"6kHl?Q:5zb7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.ordinalIndexOf("C#IQaF\"6kHl?Q:5zb7", "L.`M$}co;-V", (-1950));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean2 = StringUtils.containsWhitespace("C#IQaF\"6kHl?Q:5zb7");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.trimToEmpty("java.text.Normalizer is not available");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("java.text.Normalizer is not available", string5);
      
      String string6 = StringUtils.replace("d`^7:Q-WG", "L.`M$}co;-V", "tg<zLJTYukMb", (-37));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("d`^7:Q-WG", string6);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.chomp("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      String string1 = StringUtils.repeat("Array and element cannot both be null", (String) null, 227);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("NFD", "NFD");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat((String) null, "NFD", 227);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("|~#+%|r<");
      assertFalse(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Integer integer0 = new Integer((byte)48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertTrue(hashSet0.contains(integer0));
      assertFalse(hashSet0.contains(227));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Integer> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(hashSet0.contains(integer0));
      assertFalse(hashSet0.contains(227));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Array and element cannot both be null");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "NFD", (CharSequence) "Array and element cannot both be null");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("G8}?T");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "G8}?T", "G8}?T");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("G8}?T");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "G8}?T", "The Character must not be null");
      assertEquals(4, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.replaceOnce("+R=N5", "", "");
      assertNotNull(string0);
      assertEquals("+R=N5", string0);
      
      String string1 = StringUtils.replaceChars("", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.remove("G8}?T", '+');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("G8}?T", string2);
      
      String string3 = StringUtils.right("+R=N5", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars(";", "G8}?T", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(";", string4);
      
      String string5 = StringUtils.replace("The Character must not be null", "null/empty items", "|sUo)R29<_AKu3Jng", 2597);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("The Character must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.leftPad("u}xUC3E`xq4_$", 17, "Minimum abbreviation width is 4");
      assertNotNull(string0);
      assertEquals("Minu}xUC3E`xq4_$", string0);
      
      String string1 = StringUtils.center(",Q6AwD5V]}N<~bT@:M", (-1502), "cS$R9L.W2Kf.}vrHeBh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(",Q6AwD5V]}N<~bT@:M", string1);
      
      String string2 = StringUtils.leftPad("dOO3Mc0qdOO3Mc0q", 17, ">^(D`^eJPu@");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">dOO3Mc0qdOO3Mc0q", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "cS$R9L.W2Kf.}vrHeBh", 17, 17);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "dOO3Mc0qdOO3Mc0q", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int2 = StringUtils.indexOfAny((CharSequence) ",Q6AwD5V]}N<~bT@:M", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = "\\u";
      String string4 = StringUtils.leftPad(",Q6AwD5V]}N<~bT@:M", (-1), string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(",Q6AwD5V]}N<~bT@:M", string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '\"';
      boolean boolean0 = StringUtils.containsNone((CharSequence) ",Q6AwD5V]}N<~bT@:M", charArray0);
      assertArrayEquals(new char[] {'S', '\"'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.chomp("+R=N5");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("+R=N5", string5);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "u}xUC3E`xq4_$", (CharSequence) null);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      boolean boolean1 = StringUtils.isBlank("+R=N5");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(int0));
      
      String string6 = StringUtils.join((Iterable<?>) treeSet0, '\"');
      assertNotNull(string6);
      assertFalse(treeSet0.contains(int0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      Integer integer0 = new Integer(17);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertEquals(17, (int)integer0);
      
      Iterator<Integer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(int3));
      
      boolean boolean2 = treeSet0.add(integer0);
      assertTrue(treeSet0.contains(int3));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string7 = StringUtils.leftPad("g@T m3", (-1), " has no clone method");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("g@T m3", string7);
      
      int int4 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "g@T m3");
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      String string8 = StringUtils.abbreviate("0o3Pq1LniT?s", 256, 7);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("...iT?s", string8);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 8);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = 'c';
      charArray0[2] = 'O';
      charArray0[3] = '[';
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {']', 'c', 'O', '['}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-293));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter((String) null, "");
      assertNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = ':';
      charArray0[2] = 'U';
      charArray0[3] = 'j';
      charArray0[4] = 'M';
      charArray0[5] = '\"';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'&', ':', 'U', 'j', 'M', '\"'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.chomp("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      String string1 = StringUtils.repeat("Array and element cannot both be null", (String) null, 227);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("NFD", "NFD");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("|Y~#+%|r<", "Array and element cannot both be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("|Y~#+%|r<");
      assertFalse(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Integer integer0 = new Integer((byte)48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Iterator<Integer> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, '6');
      assertNotNull(string4);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Array and element cannot both be null");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfter("|Y~#+%|r<", "Array and element cannot both be null");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'Q';
      charArray0[4] = '6';
      charArray0[5] = '6';
      int int1 = StringUtils.indexOfAny((CharSequence) "NFD", charArray0);
      assertArrayEquals(new char[] {'6', '6', '6', 'Q', '6', '6'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) "", (int) (byte)48);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '6', 83, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.reverse("org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("slitUrahC.3gnal.snommoc.ehcapa.gro", string0);
      
      int int0 = 123;
      String string1 = StringUtils.defaultIfBlank((String) null, "sun.text.Normalizer+R=N5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("sun.text.Normalizer+R=N5", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)87;
      try { 
        StringUtils.toString(byteArray0, "sun.text.Normalizer+R=N5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("{}", '\'');
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = StringUtils.center("{}", 3, 'G');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}G", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) "{}";
      objectArray0[1] = (Object) "{}G";
      objectArray0[2] = (Object) "{}";
      String string2 = StringUtils.join(objectArray0, " in an array of ");
      assertNotNull(string2);
      assertEquals(3, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" in an array of {}G in an array of {}", string2);
      
      boolean boolean0 = StringUtils.startsWith(" in an array of {}G in an array of {}", " in an array of ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) " in an array of ", (CharSequence) "{}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("{}", 0, 'I');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{}", string3);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      String string4 = StringUtils.difference(" in an array of {}G in an array of {}", "srQ/");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("srQ/", string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase(" in an array of ");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.trim("{}");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("{}", string5);
      
      String string6 = StringUtils.overlay(";:", " in an array of {}G in an array of {}", (int) integer0, 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertEquals(" in an array of {}G in an array of {}", string6);
      
      String string7 = StringUtils.stripStart(" in an array of {}G in an array of {}", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("in an array of {}G in an array of {}", string7);
      
      boolean boolean3 = StringUtils.isNotBlank("{}");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, Integer.MAX_VALUE, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}G";
      stringArray0[3] = "srQ/";
      stringArray0[4] = "in an array of {}G in an array of {}";
      stringArray0[5] = "{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*vMaPz");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("]7ynia7", "]7ynia7", "uDy9");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "]7ynia7", (CharSequence) "uDy9");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("]7ynia7");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad(".>a", 2745, '|');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "]7ynia7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("uDy9", 2745, "]7ynia7");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isEmpty(".>a");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) ".>a");
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string3 = StringUtils.trimToNull("U");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("U", string3);
      
      String string4 = StringUtils.removeEnd("cS$R9L.W2Kf.}vrHeBh", "cDU\"cD~TYHDdJ8W>-{J");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("cS$R9L.W2Kf.}vrHeBh", string4);
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "cDU\"cD~TYHDdJ8W>-{J", (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int2 = StringUtils.length("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(91, int2);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", 16);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.rightPad("3Bupt:8vT_y{c(~", 8, "3Bupt:8vT_y{c(~");
      assertNotNull(string0);
      assertEquals("3Bupt:8vT_y{c(~", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'n';
      charArray0[2] = 'J';
      charArray0[3] = '=';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "3Bupt:8vT_y{c(~", charArray0);
      assertArrayEquals(new char[] {'}', 'n', 'J', '='}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "3Bupt:8vT_y{c(~", (CharSequence) "3Bupt:8vT_y{c(~", 1);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "3Bupt:8vT_y{c(~", 1343, 1343);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "3Bupt:8vT_y{c(~", (CharSequence) "3Bupt:8vT_y{c(~", 1343);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string1 = StringUtils.leftPad("java.text.Normalizer is not available", 8, "3Bupt:8vT_y{c(~");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.text.Normalizer is not available", string1);
      
      String string2 = StringUtils.rightPad("Index: ", (-1), 'n');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Index: ", string2);
      
      String string3 = StringUtils.difference("java.text.Normalizer is not available", "B34B");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("B34B", string3);
      
      String string4 = StringUtils.substringBefore("/KfUlkn^6sLnj", "3Bupt:8vT_y{c(~");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("/KfUlkn^6sLnj", string4);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripToNull("Index: ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Index:", string5);
      
      String string6 = StringUtils.stripToNull("Index:");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Index:", string6);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("]7ynia7", "]7ynia7", "uDy9");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "]7ynia7", (CharSequence) "uDy9");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("]7ynia7");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("]7ynia7", 2745, '|');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast(string0, "]7ynia7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("uDy9", 2745, "]7ynia7");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isEmpty("uDy9");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) "]7ynia7");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      String string3 = StringUtils.trimToNull("U");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("U", string3);
      
      String string4 = StringUtils.removeEnd("cS$R9L.W2Kf.}vrHeBh", "cDU\"cD~TYHDdJ8W>-{J");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("cS$R9L.W2Kf.}vrHeBh", string4);
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "cDU\"cD~TYHDdJ8W>-{J", (char[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int2 = StringUtils.length("]7ynia7");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, int2);
      
      int int3 = StringUtils.ordinalIndexOf("U", (CharSequence) null, 8);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.reverse("org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("slitUrahC.3gnal.snommoc.ehcapa.gro", string0);
      
      int int0 = 123;
      boolean boolean0 = StringUtils.contains((CharSequence) "slitUrahC.3gnal.snommoc.ehcapa.gro", 123);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank((String) null, "sun.text.Normalizer+R=N5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("sun.text.Normalizer+R=N5", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "slitUrahC.3gnal.snommoc.ehcapa.gro";
      stringArray0[1] = "sun.text.Normalizer+R=N5";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s", string2);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-123);
      try { 
        StringUtils.toString(byteArray0, "sun.text.Normalizer+R=N5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("]7ynia7", "]7ynia7", "uDy9");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "]7ynia7", (CharSequence) "uDy9");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("]7ynia7");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("m5@6!Wo9C(M", 2745, '|');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "]7ynia7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isEmpty("m5@6!Wo9C(M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) "m5@6!Wo9C(M");
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      String string2 = StringUtils.trimToNull("U");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("U", string2);
      
      String string3 = StringUtils.removeEnd("cS$R9L.W2Kf.}vrHeBh", "U");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("cS$R9L.W2Kf.}vrHeBh", string3);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.right("", 2717);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.uncapitalize("q8p&$zqx9U#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("q8p&$zqx9U#", string1);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "q8p&$zqx9U#", (CharSequence) "", 2717);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(11, int3);
      
      String string2 = StringUtils.strip(", Length: ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: ", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "q8p&$zqx9U#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad((String) null, 11);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("", 213, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                                                                                                                                                                                     ", string4);
      
      String string5 = StringUtils.reverse("DsL%");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("%LsD", string5);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string6 = StringUtils.join(iterator0, '5');
      assertNotNull(string6);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      int int5 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      int int6 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertEquals((-1), int6);
      
      String string7 = StringUtils.stripToEmpty(" ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "5Ez(";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("", "org.apach.commons.lang3.StringUtiks");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.CharUtils", stringArray0, stringArray0);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("org.apache.commons.lang3.CharUtils", string6);
      
      String string7 = StringUtils.defaultString("/B&A+ob7,lo8_@1v4", "z;#us4`R\"=.o");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string8 = locale0.toLanguageTag();
      assertNotNull(string8);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertEquals("zh-TW", string8);
      
      String string9 = StringUtils.upperCase((String) null, locale0);
      assertNull(string9);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string10 = StringUtils.upperCase((String) null);
      assertNull(string10);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "/B&A+ob7,lo8_@1v4", 2539);
      assertEquals((-1), int0);
      
      String string11 = StringUtils.swapCase("");
      assertNotNull(string11);
      assertTrue(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string0));
      assertEquals("", string11);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, (String) null, "/~}[\"mULOdeh!Dh&p(");
      assertNull(stringArray1);
      
      int int1 = new Integer(2539);
      assertFalse(int1 == int0);
      assertEquals(2539, int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "5Ez(", (CharSequence) "", Integer.MAX_VALUE);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(4, int3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("lg8&##;48H", 1);
      assertNotNull(string0);
      assertEquals("lg8&##;48H", string0);
      
      int int0 = StringUtils.countMatches("lg8&##;48H", "lg8&##;48H");
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lg8&##;48H";
      stringArray0[1] = "lg8&##;48H";
      String string1 = StringUtils.replaceEach("lg8&##;48H", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("lg8&##;48H", string1);
      
      int int1 = StringUtils.lastIndexOfAny("lg8&##;48H", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.isEmpty("lg8&##;48H");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "lg8&##;48H", 0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      String string2 = StringUtils.lowerCase("lg8&##;48H", locale0);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("lg8&##;48h", string2);
      
      boolean boolean3 = StringUtils.containsWhitespace("lg8&##;48h");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((Iterable<?>) null, "stZ9RYK_*dt!B:`e8h");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("stZ9RYK_*dt!B:`e8h");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("stZ9RYK_*dt!B:`e8h", string4);
      
      boolean boolean4 = StringUtils.isAsciiPrintable("lg8&##;48H");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      String string5 = StringUtils.substring("', has a length less than 2", 0, 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      boolean boolean5 = StringUtils.isNotEmpty("lg8&##;48H");
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5);
      
      String[] stringArray2 = StringUtils.split("lg8&##;48H");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean6 = StringUtils.equalsIgnoreCase("", "lg8&##;48H");
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      
      String string6 = StringUtils.trimToNull((String) null);
      assertNull(string6);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string7 = StringUtils.join(iterator0, "");
      assertNotNull(string7);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      
      boolean boolean7 = StringUtils.isAllUpperCase("lg8&##;48H");
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7);
      
      String string8 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string8);
      
      boolean boolean8 = StringUtils.containsIgnoreCase("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", "stZ9RYK_*dt!B:`e8h");
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8);
      
      String string9 = StringUtils.overlay((String) null, "stZ9RYK_*dt!B:`e8h", 0, 0);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      String string1 = StringUtils.removeEnd("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.center("InvocationTargetException occurred", 1369, "Q|_p-qRK(Kg");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove("InvocationTargetException occurred", '7');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("InvocationTargetException occurred", string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "Q|_p-qRK(Kg", 32);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.stripToNull("InvocationTargetException occurred");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("InvocationTargetException occurred", string4);
      
      String string5 = StringUtils.leftPad("InvocationTargetException occurred", (-1), '7');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("InvocationTargetException occurred", string5);
      
      String string6 = StringUtils.leftPad("", 32, "InvocationTargetException occurred");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("InvocationTargetException occurr", string6);
      
      String string7 = StringUtils.uncapitalize("org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string7);
      
      String string8 = StringUtils.leftPad("org.apache.commons.lang3.ObjectUtils$Null", 13, "InvocationTargetException occurred");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string8);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.ObjectUtils$Null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string9 = StringUtils.substringAfterLast("Q|_p-qRK(Kg", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertEquals("", string9);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '7';
      int int3 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7', '7'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.capitalize("$I|qFevXuj ");
      assertNotNull(string0);
      assertEquals("$I|qFevXuj ", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "$I|qFevXuj ", (CharSequence) "$I|qFevXuj ");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "$I|qFevXuj ", Integer.MAX_VALUE, 5);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.abbreviate("U8Yb", (-2075), 16);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("U8Yb", string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "U8Yb", (CharSequence) "U8Yb", Integer.MAX_VALUE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string2 = StringUtils.removeEnd("U8Yb", "6DQDf");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("U8Yb", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "U8Yb";
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.chomp("$I|qFevXuj ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("$I|qFevXuj ", string3);
      
      boolean boolean0 = StringUtils.startsWithAny("$I|qFevXuj ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceChars("$I|qFevXuj ", "U8Yb", "U8Yb");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("$I|qFevXuj ", string4);
      
      int int4 = StringUtils.ordinalIndexOf("$I|qFevXuj ", "$I|qFevXuj ", 1764);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      boolean boolean1 = StringUtils.isBlank("U8Yb");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.remove("The stripAccents(CharSequence) method requires at least Java6, but got: ", '{');
      assertNotNull(string0);
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got: ", string0);
      
      String string1 = StringUtils.abbreviateMiddle("The stripAccents(CharSequence) method requires at least Java6, but got: ", "p{InCombiningDiacriticalMarks}+", 57);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The stripAccep{InCombiningDiacriticalMarks}+a6, but got: ", string1);
      
      String string2 = StringUtils.substringBetween("The stripAccep{InCombiningDiacriticalMarks}+6, but got: ", "&d-}`qq", "The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("The Character must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The Character must not be null", string3);
      
      String string4 = StringUtils.abbreviate("The stripAccents(CharSequence) method requires at least Java6, but got: ", 57, 57);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...harSequence) method requires at least Java6, but got: ", string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase("The Character must not be null");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)3;
      try { 
        StringUtils.toString(byteArray0, "The stripAccep{InCombiningDiacriticalMarks}+6, but got: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "dOO3Mc0q", (-1), (-1));
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("u9oaOYFDcn-Z");
      assertNotNull(string1);
      assertEquals("u9oaOYFDcn-Z", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("dOO3Mc0q", "dOO3Mc0q", "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStart("u9oaOYFDcn-Z", "u9oaOYFDcn-Z");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "dOO3Mc0q", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = "W-";
      String string4 = StringUtils.upperCase("W-");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("W-", string4);
      
      boolean boolean1 = StringUtils.endsWithAny("W-", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.right("W-", (-1504));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = " f5bp}ISji)Bd";
      String string8 = StringUtils.substringAfter(" f5bp}ISji)Bd", "dOO3Mc0q");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string9 = StringUtils.substringBetween("u9oaOYFDcn-Z", "W-");
      assertNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = null;
      String string1 = "cS$R9L.W2Kf.}vrHeBh";
      String string2 = StringUtils.substringBetween((String) null, "cS$R9L.W2Kf.}vrHeBh");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(stack0.contains(0));
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'j');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "dOO3Mc0q", (-1), (-1));
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("u9oaOYFDcn-Z");
      assertNotNull(string1);
      assertEquals("u9oaOYFDcn-Z", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("dOO3Mc0q", "dOO3Mc0q", "dOO3Mc0q");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStart("u9oaOYFDcn-Z", "u9oaOYFDcn-Z");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "dOO3Mc0q", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = "W-";
      String string4 = StringUtils.upperCase("W-");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("W-", string4);
      
      boolean boolean1 = StringUtils.endsWithAny("W-", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.right("W-", (-1504));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = " f5bp}ISji)Bd";
      String string8 = StringUtils.substringAfter(" f5bp}ISji)Bd", "dOO3Mc0q");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string9 = StringUtils.substringBetween("u9oaOYFDcn-Z", "W-");
      assertNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.strip("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace(", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length:", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("WWpz1rM");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length:", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "WWpz1rM", (char[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.rightPad(", Length: ", 0, "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(", Length: ", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("W=Wpz=1=r=M", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", ">^(D`^eJPu@");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) ", Length:", (char[]) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String[] stringArray2 = StringUtils.split("", "");
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string5 = StringUtils.trim("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.stripToNull(", Length: ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(", Length:", string6);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens(", Length:", (String) null, 0);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(2, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      String string7 = StringUtils.substringBetween((String) null, "");
      assertNull(string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "WWpz1rM", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "W=Wpz=1=r=M", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean5 = StringUtils.isAlphaSpace(", Length: ");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String string8 = StringUtils.right("", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      
      boolean boolean6 = StringUtils.containsWhitespace("");
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.strip("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace(", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length:", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("WWpz1rM");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length:", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "WWpz1rM", (char[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.rightPad(", Length: ", 0, "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(", Length: ", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("W=Wpz=1=r=M", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", ">^(D`^eJPu@");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) ", Length:", (char[]) null);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String[] stringArray2 = StringUtils.split("", "");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string5 = StringUtils.trim("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.stripToNull(", Length: ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(", Length:", string6);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens(", Length:", (String) null, 0);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(2, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      String string7 = StringUtils.substringBetween((String) null, "");
      assertNull(string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "WWpz1rM", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "W=Wpz=1=r=M", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.trim((String) null);
      assertNull(string8);
      
      boolean boolean5 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.removeEnd("CT5yW6yoCw7e!-qkd9", "YHDdJ8W>-{JCloneable type ");
      assertNotNull(string0);
      assertEquals("CT5yW6yoCw7e!-qkd9", string0);
      
      String string1 = StringUtils.right("CT5yW6yoCw7e!-qkd9", 1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("9", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "CT5yW6yoCw7e!-qkd9", (CharSequence) "9");
      assertEquals(17, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "YHDdJ8W>-{JCloneable type ", (CharSequence) "9", 2538);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringAfterLast((String) null, "O`4+}BZY");
      assertNull(string2);
      
      String string3 = StringUtils.leftPad("O`4+}BZY", 48, 'd');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ddddddddddddddddddddddddddddddddddddddddO`4+}BZY", string3);
      
      String string4 = ".;Shj0c~\\+Y:o<9'";
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, ".;Shj0c~+Y:o<9'", (-849));
      assertNull(stringArray0);
      
      String string5 = StringUtils.substringBetween("YHDdJ8W>-{JCloneable type ", "InvocationTargetException occurred", "p{InCombiningDiacriticalMarks}+");
      assertNull(string5);
      
      int int2 = StringUtils.ordinalIndexOf("O`4+}BZY", (CharSequence) null, (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("9"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(1242);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1242, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToNull("I^vbH0Fw0Jgk,'-i&'");
      assertNotNull(string0);
      assertEquals("I^vbH0Fw0Jgk,'-i&'", string0);
      
      String string1 = StringUtils.trimToNull("I^vbH0Fw0Jgk,'-i&'");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I^vbH0Fw0Jgk,'-i&'", string1);
      
      String string2 = StringUtils.stripEnd("I^vbH0Fw0Jgk,'-i&'", "wT13UDPcv.R(-");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("I^vbH0Fw0Jgk,'-i&'", string2);
      
      String string3 = StringUtils.replace("wT13UDPcv.R(-", "I^vbH0Fw0Jgk,'-i&'", "r@_(", Integer.MAX_VALUE);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("wT13UDPcv.R(-", string3);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("I^vbH0Fw0Jgk,'-i&'"));
      
      String string4 = treeSet0.pollLast();
      assertNull(string4);
      assertFalse(treeSet0.contains("I^vbH0Fw0Jgk,'-i&'"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("I^vbH0Fw0Jgk,'-i&'"));
      
      String string5 = StringUtils.join(iterator0, 'z');
      assertNotNull(string5);
      assertFalse(treeSet0.contains("I^vbH0Fw0Jgk,'-i&'"));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.replace("AGXZ2ux%#+", (String) null, "C@h~K2'msA8|*k", 15);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("AGXZ2ux%#+", string6);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "wT13UDPcv.R(-";
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) "wT13UDPcv.R(-";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "I^vbH0Fw0Jgk,'-i&'", 15, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.chomp("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      String string1 = StringUtils.repeat("Array and element cannot both be null", (String) null, 227);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("NFD", "NFD");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("|~#+%|r<", "Array and element cannot both be null");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("|~#+%|r<");
      assertFalse(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(227));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Integer integer0 = new Integer((byte)48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      Iterator<Integer> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(hashSet0.contains(227));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, '6');
      assertNotNull(string4);
      assertFalse(hashSet0.contains(227));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Array and element cannot both be null");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Array and element cannot both be null";
      stringArray0[1] = "|~#+%|r<";
      stringArray0[2] = null;
      stringArray0[3] = string1;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = string1;
      // Undeclared exception!
      StringUtils.stripAll(stringArray0, "Array and element cannot both be null");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.chomp("Array and elemen( cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and elemen( cannot both be null", string0);
      
      String string1 = StringUtils.repeat("Array and elemen( cannot both be null", (String) null, 227);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("NFD", "NFD");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("|~#+%|r<", "Array and elemen( cannot both be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("|~#+%|r<");
      assertFalse(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(227));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Integer integer0 = new Integer((byte)48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Integer> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      String string4 = StringUtils.join(iterator0, '6');
      assertNotNull(string4);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Array and elemen( cannot both be null");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Array and elemen( cannot both be null";
      charSequenceArray0[1] = (CharSequence) "|~#+%|r<";
      String string5 = StringUtils.chomp("pEnVdbGcG6");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("pEnVdbGcG6", string5);
      
      charSequenceArray0[2] = (CharSequence) "pEnVdbGcG6";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "|~#+%|r<";
      boolean boolean2 = StringUtils.startsWithAny("|~#+%|r<", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.split((String) null, ')');
      assertNull(stringArray0);
      
      String string6 = StringUtils.replaceChars("", "_q:_", "t");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("]7ynia7", "]7ynia7", "uDy9");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "]7ynia7", (CharSequence) "uDy9");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("]7ynia7");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("m5@6!Wo9C(M", 2745, '|');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "]7ynia7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("uDy9", 2745, "]7ynia7");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isEmpty("m5@6!Wo9C(M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = new Integer(2745);
      assertFalse(int1 == int0);
      assertEquals(2745, int1);
      
      String string3 = StringUtils.trimToNull("U");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("U", string3);
      
      String string4 = StringUtils.difference("cS$R9L.W2Kf.}vrHeBh", "cDU\"cD~TYHDdJ8W>-{J");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("DU\"cD~TYHDdJ8W>-{J", string4);
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.substringBetween((String) null, "U");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("cS$R9L.W2Kf.}vrHeBh");
      assertNotNull(string0);
      assertEquals("cS$R9L.W2Kf.}vrHeBh", string0);
      
      int int0 = StringUtils.ordinalIndexOf("cS$R9L.W2Kf.}vrHeBh", "cS$R9L.W2Kf.}vrHeBh", 4096);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'a';
      charArray0[2] = 'X';
      charArray0[3] = '^';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "cS$R9L.W2Kf.}vrHeBh", charArray0);
      assertArrayEquals(new char[] {'y', 'a', 'X', '^'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "cS$R9L.W2Kf.}vrHeBh";
      charSequenceArray0[1] = (CharSequence) "cS$R9L.W2Kf.}vrHeBh";
      charSequenceArray0[2] = (CharSequence) "cS$R9L.W2Kf.}vrHeBh";
      charSequenceArray0[3] = (CharSequence) "cS$R9L.W2Kf.}vrHeBh";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "C0TkOSJD,FG$#g-m*`";
      String string1 = StringUtils.removeEnd((String) null, "C0TkOSJD,FG$#g-m*`");
      assertNull(string1);
      
      String string2 = StringUtils.difference("The stripAccents(CharSequence) method requires at least Java6, but got: ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got: ", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad((String) null, (-275), "8h>p(.EE|pW8h>p(.EE|pW");
      assertNull(string3);
      
      String string4 = StringUtils.normalizeSpace("8h>p(.EE|pW8h>p(.EE|pW");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("8h>p(.EE|pW8h>p(.EE|pW", string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      char char0 = 'u';
      String string5 = StringUtils.leftPad(" aa", (-275), 'u');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" aa", string5);
      
      boolean boolean1 = StringUtils.endsWithAny("8h>p(.EE|pW8h>p(.EE|pW", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.stripStart("The stripAccents(CharSequence) method requires at least Java6, but got: ", " aa");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got: ", string6);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "8h>p(.EE|pW8h>p(.EE|pW", (CharSequence) " aa");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string7 = StringUtils.substringBefore("", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("InvocationTargetException occurred ");
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      
      String string8 = StringUtils.defaultIfEmpty((String) null, "");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The stripAccents(CharSequence) method requires at least Java6, but got: ", (CharSequence) "", (-275));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "8h>p(.EE|pW8h>p(.EE|pW", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, 'u', (-1), 479);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.overlay("`pO.S'C{Xrh@6U", "`pO.S'C{Xrh@6U", 1342, (-608));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "`pO.S'C{Xrh@6U";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string1 = StringUtils.join(objectArray0, "Kn q#X|muH0@S", 1342, 1342);
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("`pO.S'C{Xrh@6U", "", 1342, (-608));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.capitalize("n/Nbr.',8>P9_^s");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("N/Nbr.',8>P9_^s", string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "n/Nbr.',8>P9_^s";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "n/Nbr.',8>P9_^s");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "N/Nbr.',8>P9_^s", "n/Nbr.',8>P9_^s");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("`pO.S'C{Xrh@6U", "Kn q#X|muH0@S", (-608));
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.replace((String) null, "org.apache.commons.lang3.StringUtils", "1e8A{B%?[4P%4c>%", (-608));
      assertNull(string4);
      
      String string5 = StringUtils.stripStart("", "Kn q#X|muH0@S");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 4162);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.repeat('<', 1368);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) string0, (CharSequence) string0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequence0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny(string0, (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.length(string0);
      assertEquals(1368, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      boolean boolean2 = StringUtils.containsAny(charSequence0, charArray0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.right("", 2717);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.uncapitalize("q8p&$zqx9U#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("q8p&$zqx9U#", string1);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "q8p&$zqx9U#", (CharSequence) "", 2717);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(11, int3);
      
      String string2 = StringUtils.strip(", Length: ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", Length: ", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "q8p&$zqx9U#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad((String) null, 2548);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("", 213, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                                                                                                                                                                                     ", string4);
      
      String string5 = StringUtils.reverse("DsL%");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("%LsD", string5);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      String[] stringArray3 = StringUtils.split((String) null, "m5@6!Wo9C(M", 1716);
      assertNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.right("", 2717);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.uncapitalize("q8p&$zqx9U#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("q8p&$zqx9U#", string1);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "q8p&$zqx9U#", (CharSequence) "", 2717);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(11, int3);
      
      String string2 = StringUtils.strip(", Length: ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", Length: ", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "q8p&$zqx9U#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad((String) null, 2548);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("", 213, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                     ", string4);
      
      String string5 = StringUtils.reverse("DsL%");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("%LsD", string5);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string6 = StringUtils.join(iterator0, '5');
      assertNotNull(string6);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      int int5 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int5);
      
      boolean boolean2 = StringUtils.isAlphanumeric("DsL%");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, (String) null, 213, 1790);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 213
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.rightPad("kV/OVC", (-1373), '<');
      assertNotNull(string0);
      assertEquals("kV/OVC", string0);
      
      String string1 = StringUtils.stripToEmpty("3?C7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3?C7", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("kV/OVC", "kV/OVC");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripEnd("kV/OVC", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("kV/OVC", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("kV/OVC");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("kV/OVC");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "kV/OVC", (CharSequence) "kV/OVC", (-1373));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.remove("V7!\t\"0g@:", "3?C7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("V7!\t\"0g@:", string4);
      
      String string5 = StringUtils.leftPad("V7!\t\"0g@:", (-1373), '<');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("V7!\t\"0g@:", string5);
      
      String string6 = StringUtils.chop("3?C7");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("3?C", string6);
      
      int int2 = StringUtils.indexOf((CharSequence) "3?C", (CharSequence) "V7!\t\"0g@:");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.repeat('j', 128);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string7);
      
      String string8 = StringUtils.center("", 3, "R']pXOJ]");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals("RR'", string8);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "R']pXOJ]", (CharSequence) "3?C");
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The Array must not be null", "z@(I#ltPYLa(i", "The Array must not be null");
      assertNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("Argumentscannotbothbenull", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Argumentscannotbothbenull", Integer.MAX_VALUE);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Cloneable type ", "Argumentscannotbothbenull");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cloneable type ", string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Cloneable type ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripEnd("Arguments cannot both be null", "The Array must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Arguments c", string2);
      
      String string3 = StringUtils.leftPad("Arguments c", 1145, 'c');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeEnd("YHDdJ8W>-{J", "Cloneable type ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("YHDdJ8W>-{J", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The Array must not be null", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("Arguments c", "Argumentscannotbothbenull", 1275);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "z@(I#ltPYLa(i", (-368));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = " has no clone method";
      String string1 = StringUtils.substringBeforeLast("aDOdy|B.U6u]-OyJJ-", " has no clone method");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aDOdy|B.U6u]-OyJJ-", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("aDOdy|B.U6u]-OyJJ-");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches("aDOdy|B.U6u]-OyJJ-", "aDOdy|B.U6u]-OyJJ-");
      assertEquals(1, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "aDOdy|B.U6u]-OyJJ-", (CharSequence) "aDOdy|B.U6u]-OyJJ-", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = null;
      String string3 = StringUtils.substringAfter((String) null, "The Array must not be null");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfter(" has no clone method", "7NIH7U.BU/=");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "7NIH7U.BU/=", (CharSequence) "aDOdy|B.U6u]-OyJJ-");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(17, int2);
      
      String string5 = StringUtils.chop("7NIH7U.BU/=");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("7NIH7U.BU/", string5);
      
      int int3 = StringUtils.length("7NIH7U.BU/");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(10, int3);
      
      String string6 = StringUtils.remove("7NIH7U.BU/=", 'x');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("7NIH7U.BU/=", string6);
      
      String string7 = StringUtils.trimToNull("");
      assertNull(string7);
      
      char[] charArray0 = new char[0];
      int int4 = 256;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 17, 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "8fO:[WD['*K");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8fO:[WD['*K";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.overlay("KucdgcT8[E{;fsBS(.(", "{oeL=", 25, (-1));
      assertNotNull(string0);
      assertEquals("{oeL=", string0);
      
      String string1 = StringUtils.swapCase("2wUY=#f{q8m]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2Wuy=#F{Q8M]", string1);
      
      String string2 = StringUtils.swapCase("aQ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Aq", string2);
      
      boolean boolean2 = StringUtils.isEmpty("8fO:[WD['*K");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.rightPad((String) null, (-2889), "{oeL=");
      assertNull(string3);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "Aq", (char[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.center("aQ", 25, "8fO:[WD['*K");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("8fO:[WD['*KaQ8fO:[WD['*K8", string4);
      
      boolean boolean4 = StringUtils.isBlank("8fO:[WD['*K");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.removeEndIgnoreCase("C0TkOSJD,FG$#g-m*`C0TkOSJD,FG$#g-m*`", "The Array must not be null");
      assertNotNull(string0);
      assertEquals("C0TkOSJD,FG$#g-m*`C0TkOSJD,FG$#g-m*`", string0);
      
      charSequenceArray0[0] = (CharSequence) "C0TkOSJD,FG$#g-m*`C0TkOSJD,FG$#g-m*`";
      String string1 = StringUtils.removeStartIgnoreCase("I^vbH0Fw0Jgk,'", "=93*a");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I^vbH0Fw0Jgk,'", string1);
      
      charSequenceArray0[1] = (CharSequence) "I^vbH0Fw0Jgk,'";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[1], (CharSequence) "I^vbH0Fw0Jgk,'");
      assertNotNull(charSequence0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("I^vbH0Fw0Jgk,'", charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "I^vbH0Fw0Jgk,'";
      String string2 = StringUtils.chomp("I^vbH0Fw0Jgk,'", "-i&'");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("I^vbH0Fw0Jgk,'", string2);
      
      charSequenceArray0[3] = (CharSequence) "I^vbH0Fw0Jgk,'";
      String string3 = StringUtils.substringAfter("The Array must not be null", "C0TkOSJD,FG$#g-m*`C0TkOSJD,FG$#g-m*`");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "I^vbH0Fw0Jgk,'";
      stringArray0[1] = "=93*a";
      stringArray0[2] = "The Array must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "I^vbH0Fw0Jgk,'";
      stringArray0[6] = "C0TkOSJD,FG$#g-m*`C0TkOSJD,FG$#g-m*`";
      stringArray0[7] = "C0TkOSJD,FG$#g-m*`C0TkOSJD,FG$#g-m*`";
      String string4 = StringUtils.replaceEach("I^vbH0Fw0Jgk,'", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals(8, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("I^vbH0Fw0Jgk,'", string4);
      
      charSequenceArray0[5] = (CharSequence) "I^vbH0Fw0Jgk,'";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "5Ez(";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.join(stringArray0);
      assertNotNull(string5);
      assertEquals(2, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("5Ez(", string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.CharUtils", stringArray0, stringArray0);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharUtils", string6);
      
      String string7 = StringUtils.defaultString("/B&A+ob7,lo8_@1v4", "z;#us4`R\"=.o");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("5Ez(");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string8 = locale0.toLanguageTag();
      assertNotNull(string8);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("zh-TW", string8);
      
      String string9 = StringUtils.upperCase((String) null, locale0);
      assertNull(string9);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string10 = StringUtils.upperCase((String) null);
      assertNull(string10);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "/B&A+ob7,lo8_@1v4", 2539);
      assertEquals((-1), int0);
      
      String string11 = StringUtils.swapCase("5Ez(");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertEquals("5eZ(", string11);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, (String) null, "/~}[\"mULOdeh!Dh&p(");
      assertNull(stringArray1);
      
      int int1 = StringUtils.indexOf((CharSequence) "zh-TW", (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string12 = StringUtils.replace("clone", "java.text.Normalizer$Form", "W6PU-ayV8:(Tnq", 4305);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string6));
      assertEquals("clone", string12);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.strip("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("WWpz1rM");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "WWpz1rM", (char[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.rightPad("", 0, "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("W=Wpz=1=r=M", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", ">^(D`^eJPu@");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.split("", "");
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string5 = StringUtils.stripToNull("");
      assertNull(string5);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 0);
      assertNull(stringArray3);
      
      String string6 = StringUtils.substringBetween((String) null, "");
      assertNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "WWpz1rM", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "W=Wpz=1=r=M", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)2;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("zr|Ybj-2y0h", "zr|Ybj-2y0h", "zr|Ybj-2y0h");
      assertNotNull(string0);
      assertEquals("zr|Ybj-2y0h", string0);
      
      String string1 = StringUtils.repeat("Array element ", 122);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("Array element ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBefore("zr|Ybj-2y0h", "zr|Ybj-2y0h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "zr|Ybj-2y0h", charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, "zr|Ybj-2y0h", 122);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.leftPad("_j\u0003s(MU3tx;Q<", 13);
      assertNotNull(string0);
      assertEquals("_j\u0003s(MU3tx;Q<", string0);
      
      boolean boolean0 = StringUtils.isAlpha("_j\u0003s(MU3tx;Q<");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "_j\u0003s(MU3tx;Q<", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("_j\u0003s(MU3tx;Q<"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      ArrayDeque<Object> arrayDeque1 = arrayDeque0.clone();
      assertNotNull(arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.contains("_j\u0003s(MU3tx;Q<"));
      assertFalse(arrayDeque1.contains("_j\u0003s(MU3tx;Q<"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.contains("_j\u0003s(MU3tx;Q<"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      
      String string1 = StringUtils.join(iterator0, ';');
      assertNotNull(string1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.contains("_j\u0003s(MU3tx;Q<"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween(",Ab#0BL9tHzYEn\"2,G.", ",Ab#0BL9tHzYEn\"2,G.");
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast("", ",Ab#0BL9tHzYEn\"2,G.");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.substring("%a6amr<q{P0ES?W,Bk", (-2687), (-2687));
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '3';
      charArray0[2] = 'B';
      charArray0[3] = '3';
      charArray0[4] = '~';
      charArray0[5] = 'Z';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "%a6amr<q{P0ES?W,Bk", charArray0);
      assertArrayEquals(new char[] {'`', '3', 'B', '3', '~', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "%a6amr<q{P0ES?W,Bk");
      assertFalse(boolean0);
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "%a6amr<q{P0ES?W,Bk", charArray0);
      assertArrayEquals(new char[] {'`', '3', 'B', '3', '~', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16, int2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.strip("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace(", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length:", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("WWpz1rM");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ", Length:", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "WWpz1rM", (char[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.rightPad(", Length: ", 0, "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(", Length: ", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("W=Wpz=1=r=M", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", ">^(D`^eJPu@");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) ", Length:", (char[]) null);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String[] stringArray2 = StringUtils.split("", "");
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string5 = StringUtils.trim("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.stripToNull(", Length: ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals(", Length:", string6);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens(", Length:", (String) null, 0);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(2, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      String string7 = StringUtils.substringBetween((String) null, "");
      assertNull(string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "WWpz1rM", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "W=Wpz=1=r=M", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripEnd("ls'hJt", "ls'hJt");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "[K|LwrGe-", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceChars("[K|LwrGe-", "", "ls'hJt");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[K|LwrGe-", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("[K|LwrGe-");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("ls'hJt");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.stripToEmpty(":L<d/$:h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":L<d/$:h", string2);
      
      String string3 = StringUtils.defaultString("kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`n+;vgtUmv5+7j`");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`n+;vgtUmv5+7j`", string3);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`n+;vgtUmv5+7j`", (CharSequence) "kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`n+;vgtUmv5+7j`");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "GFR,:";
      String string1 = StringUtils.deleteWhitespace("GFR,:");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("GFR,:", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "GFR,:", 818, 818);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("IllegalArgumentException occurred", 818, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G8}?T", "G8}?T");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("G8}?T");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.substringsBetween("", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("G8}?T");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", "The Character must not be null");
      assertEquals(2, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "CJz-!|xQc')e", (CharSequence) "", 128);
      assertFalse(int1 == int0);
      assertEquals(12, int1);
      
      String string0 = StringUtils.center("java.text.Normalizer is not available", 2, "CJz-!|xQc')e");
      assertNotNull(string0);
      assertEquals("java.text.Normalizer is not available", string0);
      
      String string1 = StringUtils.replaceChars("", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.remove("G8}?T", '+');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("G8}?T", string2);
      
      String string3 = StringUtils.remove("hT}GOIbqW", '(');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("hT}GOIbqW", string3);
      
      String string4 = StringUtils.removeStart(">`5Sy", "hT}GOIbqW");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(">`5Sy", string4);
      
      String string5 = StringUtils.abbreviateMiddle("", "", 13);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("XM}", '\'');
      assertNotNull(string0);
      assertEquals("XM}", string0);
      
      String string1 = StringUtils.center("XM}", 3, 'l');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("XM}", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "XM}";
      objectArray0[1] = (Object) "XM}";
      objectArray0[2] = (Object) "XM}";
      String string2 = StringUtils.join(objectArray0, " in an array of ");
      assertNotNull(string2);
      assertEquals(3, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("XM} in an array of XM} in an array of XM}", string2);
      
      boolean boolean0 = StringUtils.startsWith("XM} in an array of XM} in an array of XM}", " in an array of ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) " in an array of ", (CharSequence) "XM}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("XM}", 0, 'I');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("XM}", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) " in an array of ", (CharSequence) "XM}");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.difference("XM} in an array of XM} in an array of XM}", "srQ/");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("srQ/", string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase(" in an array of ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.difference("", "Q:+\"ti!L3bRU&");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Q:+\"ti!L3bRU&", string5);
      
      String string6 = StringUtils.overlay(";:", ", Length: 0", (-1), 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals(", Length: 0;:", string6);
      
      String string7 = StringUtils.stripStart(", Length: 0;:", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals(", Length: 0;:", string7);
      
      boolean boolean3 = StringUtils.isNotBlank("XM}");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string8 = StringUtils.deleteWhitespace(", Length: 0");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals(",Length:0", string8);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.center(" ", 1636, " ");
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents(" ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      String string3 = StringUtils.substringBetween(string1, "+gn1");
      assertNull(string3);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "+gn1";
      int int0 = StringUtils.indexOfAny((CharSequence) "+gn1", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.rightPad("+gn1", 0, '');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("+gn1", string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.right("java.text.Normalizer$Form", (-2203));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.center((String) null, 64, '');
      assertNull(string6);
      
      String string7 = StringUtils.chomp(string0, "lzGFi");
      assertNotNull(string7);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) string7);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string7;
      stringArray0[1] = " ";
      stringArray0[2] = string1;
      stringArray0[3] = " ";
      stringArray0[4] = "java.text.Normalizer$Form";
      stringArray0[5] = string1;
      stringArray0[6] = "+gn1";
      stringArray0[7] = "";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string8);
      assertEquals(8, stringArray0.length);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      
      boolean boolean3 = StringUtils.containsWhitespace("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.overlay("]|x{", "w'<--CW:LSq", 32, 32);
      assertNotNull(string0);
      assertEquals("]|x{w'<--CW:LSq", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "]|x{w'<--CW:LSq", (CharSequence) "w'<--CW:LSq");
      assertEquals(4, int0);
      
      String string1 = StringUtils.defaultIfBlank("M?8oQyaDc<", "qx[*|-HN;A");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M?8oQyaDc<", string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "M?8oQyaDc<", (CharSequence) "qx[*|-HN;A");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-966));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center((String) null, (-1), "Index: ");
      assertNull(string1);
      
      String string2 = StringUtils.remove((String) null, "^Y|e^!m#,O}Rw YkK$r");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.remove("Arguments cannot both be null", 'j');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "Arguments cannot both be null");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("Arguments cannot both be null", charSequence0);
      
      boolean boolean0 = StringUtils.startsWith("Arguments cannot both be null", "Arguments cannot both be null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.replace(string0, string0, "66=9\"*X7F", 111);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("66=9\"*X7F", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("wpiU%E0sPh&Z4$#IXE[", 111, 'J');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJwpiU%E0sPh&Z4$#IXE[", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJwpiU%E0sPh&Z4$#IXE[", (CharSequence) "wpiU%E0sPh&Z4$#IXE[");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "66=9\"*X7F", 0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf(string0, string0, (-994));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.uncapitalize("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJwpiU%E0sPh&Z4$#IXE[");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJwpiU%E0sPh&Z4$#IXE[", string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "66=9\"*X7F", (-994));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.defaultString("66=9\"*X7F", string0);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("66=9\"*X7F", string4);
      
      boolean boolean2 = StringUtils.isAllLowerCase("66=9\"*X7F");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.join((Iterator<?>) null, '<');
      assertNull(string5);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "66=9\"*X7F", (CharSequence) "jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJwpiU%E0sPh&Z4$#IXE[");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string6 = StringUtils.strip((String) null, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.replaceChars("x H aCj~Qpulzx H aCj~Qpulz", "", "66=9\"*X7F");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("x H aCj~Qpulzx H aCj~Qpulz", string7);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) string0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) "66=9\"*X7F";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJwpiU%E0sPh&Z4$#IXE[";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJwpiU%E0sPh&Z4$#IXE[";
      String string8 = "\\u000";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, string8, 3, 408);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(765);
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(765));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(1, charBuffer0.limit());
      assertEquals("g", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = linkedHashSet0.add(charBuffer0);
      assertFalse(linkedHashSet0.contains(765));
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, charBuffer0.limit());
      assertEquals("g", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "4|M");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains(765));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "java.nio.HeapCharBuffer@0000000001", 765, 765);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("4|M", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4|M", string1);
      
      boolean boolean1 = StringUtils.startsWith("java.nio.HeapCharBuffer@0000000001", "4|M");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "4|M", (CharSequence) "java.nio.HeapCharBuffer@0000000001");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "4|M", (-1), 0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.capitalize("NnS");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NnS", string2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "4|M", 32);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      boolean boolean2 = StringUtils.isNumeric("4|M");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.replace("lstxx", "lstxx", "8h>p(.EE|pW8h>p(.EE|pW", 3);
      assertNotNull(string0);
      assertEquals("8h>p(.EE|pW8h>p(.EE|pW", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("lstxx", "lstxx", 3);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "lstxx", (CharSequence) "8h>p(.EE|pW8h>p(.EE|pW");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "8h>p(.EE|pW8h>p(.EE|pW";
      charSequenceArray0[1] = (CharSequence) "lstxx";
      charSequenceArray0[2] = (CharSequence) "8h>p(.EE|pW8h>p(.EE|pW";
      charSequenceArray0[3] = (CharSequence) "lstxx";
      boolean boolean0 = StringUtils.startsWithAny("8h>p(.EE|pW8h>p(.EE|pW", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("lstxx");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "8h>p(.EE|pW8h>p(.EE|pW", (CharSequence) "8h>p(.EE|pW8h>p(.EE|pW", 2026);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string1 = StringUtils.rightPad("-:f-MDNgLp|B?Z}' Um", 3, "The Array must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-:f-MDNgLp|B?Z}' Um", string1);
      
      String string2 = StringUtils.right("8h>p(.EE|pW8h>p(.EE|pW", 2026);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8h>p(.EE|pW8h>p(.EE|pW", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("lYc", 0, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lYc", string1);
      
      String string2 = StringUtils.abbreviateMiddle("ME~%hs0YI{&S&w\"YcR", "ME~%hs0YI{&S&w\"YcR", 256);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ME~%hs0YI{&S&w\"YcR", string2);
      
      String string3 = StringUtils.substringAfter("Re<Syn?x>~02Gpvyl", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Re<Syn?x>~02Gpvyl", string3);
      
      String string4 = StringUtils.strip("ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("ME~%hs0YI{&S&w\"YcR", string4);
      
      boolean boolean0 = StringUtils.isNumeric("Re<Syn?x>~02Gpvyl");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Re<Syn?x>~02Gpvyl", "Re<Syn?x>~02Gpvyl");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      int int0 = StringUtils.indexOfAny((CharSequence) "lYc", charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "lYc", "lYc");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "lYc";
      charSequenceArray0[2] = (CharSequence) "";
      String string5 = StringUtils.stripStart("The Array must not be null", "ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("The Array must not be null", string5);
      
      charSequenceArray0[3] = (CharSequence) "The Array must not be null";
      String string6 = StringUtils.reverseDelimited("lYc", 'Q');
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("lYc", string6);
      
      charSequenceArray0[4] = (CharSequence) "lYc";
      charSequenceArray0[5] = (CharSequence) "Re<Syn?x>~02Gpvyl";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string7 = StringUtils.join(iterator0, 'f');
      assertNotNull(string7);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      charSequenceArray0[8] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "Re<Syn?x>~02Gpvyl", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int2 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.rightPad("kV/OVC", (-1373), '<');
      assertNotNull(string0);
      assertEquals("kV/OVC", string0);
      
      String string1 = StringUtils.stripToEmpty("3?C7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3?C7", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("kV/OVC", "kV/OVC");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripEnd("kV/OVC", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("kV/OVC", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("kV/OVC");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("kV/OVC");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "kV/OVC", (CharSequence) "kV/OVC", (-1373));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.remove("V7!\t\"0g@:", "3?C7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("V7!\t\"0g@:", string4);
      
      String string5 = StringUtils.leftPad("V7!\t\"0g@:", (-1373), '<');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("V7!\t\"0g@:", string5);
      
      String string6 = StringUtils.chop("3?C7");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("3?C", string6);
      
      int int2 = StringUtils.indexOf((CharSequence) "3?C", (CharSequence) "V7!\t\"0g@:");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.repeat('j', 128);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string7);
      
      String string8 = StringUtils.center("", 15, "R']pXOJ]");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("R']pXOJR']pXOJ]", string8);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "R']pXOJ]", (CharSequence) "3?C");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.substringAfter("U7cyST-\"s>9", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "U7cyST-\"s>9");
      assertNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.split("Threshold must not be negative", 'v');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("", "", "IllegalArgumentException occurred");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.remove("java.text.Normalizer$Form", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.text.Normalizer$Form", string4);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertEquals(2, stringArray0.length);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "java.text.Normalizer$Form", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.deleteWhitespace("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = StringUtils.replace("", " ", "gjR_<gEx'gpoK]z,*_,", (-1));
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.repeat("*v", 127);
      assertNotNull(string0);
      assertEquals("*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "*v", 127, 868);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "*v", (CharSequence) "*v");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("*v");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "*v", (CharSequence) "*v");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.indexOf((CharSequence) "*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v", (CharSequence) "*v", 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string1 = "\\u0";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, "*v", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlpha(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) "*v", 127);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      boolean boolean3 = StringUtils.isNumericSpace(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = StringUtils.remove("*2h@", 'n');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("*2h@", string2);
      
      String string3 = StringUtils.right("SecurityException occurred", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripStart("Array element ", "*v");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Array element ", string4);
      
      String string5 = StringUtils.substringBefore("*v", "Array element ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("*v", string5);
      
      String string6 = StringUtils.repeat('R', 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      int int4 = StringUtils.indexOf((CharSequence) "", 1629, (-1));
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.overlay("|:,RxlnVjmas= ", (String) null, (-2298), (-2298));
      assertNotNull(string0);
      assertEquals("|:,RxlnVjmas= ", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "|:,RxlnVjmas= ", (-1298), 90);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat('-', 2282);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.remove("?hCtIc{n(b m.6ra", "|:,RxlnVjmas= ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("?hCtIc{n(b m.6ra", string3);
      
      String string4 = StringUtils.repeat("`z'RCCY6Q 'X6q|zH", (-1232));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.substringBefore("org.apache.commons.lang3.StringUtils$InitStripAccents", "`z'RCCY6Q 'X6q|zH");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils$InitStripAccents", string5);
      
      String string6 = StringUtils.leftPad("\"[GW;kz", (-1), 'D');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("\"[GW;kz", string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "\"[GW;kz", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.stripToEmpty("-)R");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("-)R", string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\"[GW;kz";
      charSequenceArray0[1] = (CharSequence) "-)R";
      charSequenceArray0[2] = (CharSequence) "|:,RxlnVjmas= ";
      charSequenceArray0[3] = (CharSequence) "\"[GW;kz";
      String string8 = StringUtils.defaultString((String) null, string1);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      
      charSequenceArray0[4] = (CharSequence) string8;
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string0 = StringUtils.join(iterator0, "LSEMQ5vX`");
      assertNotNull(string0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("LSEMQ5vX`", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LSEMQ5vX`", string1);
      
      String string2 = StringUtils.rightPad("LSEMQ5vX`", (-1691));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("LSEMQ5vX`", string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "LSEMQ5vX`");
      assertNotNull(charBuffer0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("LSEMQ5vX`", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("LSEMQ5vX`", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.length());
      assertEquals("LSEMQ5vX`", charBuffer1.toString());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      
      String string3 = StringUtils.difference("^f", "@LCQ_l<&q(.FGS@#xqB");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("@LCQ_l<&q(.FGS@#xqB", string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = 'Q';
      charArray0[2] = 'L';
      charArray0[3] = ':';
      charArray0[4] = ';';
      charArray0[5] = 'm';
      charArray0[6] = 'y';
      charArray0[7] = '7';
      boolean boolean0 = StringUtils.containsAny((CharSequence) charBuffer0, charArray0);
      assertSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'L', 'Q', 'L', ':', ';', 'm', 'y', '7'}, charArray0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("LSEMQ5vX`", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = StringUtils.right("", 2717);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.uncapitalize("q8p&$zqx9U#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("q8p&$zqx9U#", string1);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "q8p&$zqx9U#", (CharSequence) "", 2717);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(11, int3);
      
      String string2 = StringUtils.strip(", Length: ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: ", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "q8p&$zqx9U#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad((String) null, 2548);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("", 213, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                     ", string4);
      
      String string5 = StringUtils.reverse("DsL%");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("%LsD", string5);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      String string6 = StringUtils.repeat('<', 13);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("<<<<<<<<<<<<<", string6);
      
      String string7 = StringUtils.abbreviateMiddle("|w,3", "LF{|YqZ", 3831);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("|w,3", string7);
      
      int int5 = StringUtils.countMatches("<<<<<<<<<<<<<", "");
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(0, int5);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("]7ynia7", "]7ynia7", "uDy9");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "]7ynia7", (CharSequence) "uDy9");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("]7ynia7");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("m5@6!Wo9C(M", 2745, '|');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "]7ynia7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("uDy9", 2745, "]7ynia7");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isEmpty("m5@6!Wo9C(M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) "m5@6!Wo9C(M");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      String string3 = StringUtils.trimToNull("U");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("U", string3);
      
      String string4 = StringUtils.removeEnd("cS$R9L.W2Kf.}vrHeBh", "cDU\"cD~TYHDdJ8W>-{J");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("cS$R9L.W2Kf.}vrHeBh", string4);
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.center(string0, 13, "o");
      assertNotNull(string6);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.defaultIfBlank(string6, "U");
      assertNotNull(string7);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      int int2 = StringUtils.countMatches(string7, "");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.remove("Arguments cannot both be null", 'j');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Arguments cannot both be null", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "Arguments cannot both be null");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("Arguments cannot both be null", charSequence0);
      
      boolean boolean0 = StringUtils.startsWith("Arguments cannot both be null", "Arguments cannot both be null");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = StringUtils.stripStart("/^G~Ut(", "/^G~Ut(");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("", (-1443), "/^G~Ut(");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.substring("%a6amr<q{P0ES?W,Bk", (-2687), (-2687));
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '3';
      charArray0[2] = 'B';
      charArray0[3] = '\\';
      charArray0[4] = 'B';
      charArray0[5] = 'Z';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "%a6amr<q{P0ES?W,Bk", charArray0);
      assertArrayEquals(new char[] {'`', '3', 'B', '\\', 'B', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat("", 84);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", 0, "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviateMiddle("-[X", "ME~%hs0YI{&S&w\"YcR", 256);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-[X", string2);
      
      String string3 = StringUtils.deleteWhitespace("-[X");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("-[X", string3);
      
      String string4 = StringUtils.strip("ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ME~%hs0YI{&S&w\"YcR", string4);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("-[X", "-[X");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "ME~%hs0YI{&S&w\"YcR", "-[X");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string5 = StringUtils.stripStart("i~[TG>", "ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("i~[TG>", string5);
      
      charSequenceArray0[3] = (CharSequence) "i~[TG>";
      String string6 = StringUtils.substring("ME~%hs0YI{&S&w\"YcR", 256);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "-[X";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string7 = StringUtils.join(iterator0, 'f');
      assertNotNull(string7);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      
      charSequenceArray0[8] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "-[X", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.replaceChars("java.text.Normalizer", 'L', 'L');
      assertNotNull(string0);
      assertEquals("java.text.Normalizer", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      int int0 = StringUtils.indexOfAny((CharSequence) "java.text.Normalizer", charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "java.text.Normalizer", (CharSequence) "java.text.Normalizer");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("java.text.Normalizer", charSequence0);
      
      boolean boolean0 = StringUtils.containsWhitespace("java.text.Normalizer");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "java.text.Normalizer", charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.mid("java.text.Normalizer", 4806, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "java.text.Normalizer", (CharSequence) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("IllegalAccessException occurred", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase(stringArray0[0]);
      assertNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.uncapitalize("q8p&$zqx9U#");
      assertNotNull(string0);
      assertEquals("q8p&$zqx9U#", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(stringArray0[1], "q8p&$zqx9U#");
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rightPad((String) null, 2548);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("", 213, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                     ", string2);
      
      String string3 = StringUtils.reverse("DsL%");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%LsD", string3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("uB");
      assertNotNull(string0);
      assertEquals("uB", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("uB");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween((String) null, "o!");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("o!", (String) null, 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "uB", (CharSequence) "uB", 32);
      assertEquals(0, int0);
      
      String string2 = StringUtils.capitalize("*PAg#ba");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("*PAg#ba", string2);
      
      String[] stringArray1 = StringUtils.split("<5H.Gmpt(\"6}", " nn", (-2913));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("uB", 16, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("       uB       ", string3);
      
      String string4 = StringUtils.remove("o!", "o!");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviateMiddle(" available", "}", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" available", string5);
      
      String string6 = StringUtils.defaultIfBlank(" available", "uB");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" available", string6);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "o!", "<5H.Gmpt(\"6}");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string7 = StringUtils.capitalize("null comparator");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("Null comparator", string7);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'j';
      charArray0[2] = '\'';
      charArray0[3] = 'd';
      charArray0[4] = '.';
      charArray0[5] = 'Z';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'D', 'j', '\'', 'd', '.', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = StringUtils.substringBetween("sun.text.Normalizer is not available", "sun.text.Normalizer is not available", "sun.text.Normalizer+R=N5");
      assertNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "sun.text.Normalizer+R=N5";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.repeat((String) null, 548);
      assertNull(string2);
      
      charSequenceArray0[4] = (CharSequence) null;
      String string3 = StringUtils.abbreviateMiddle("sun.text.Normalizer+R=N5", "", 548);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("sun.text.Normalizer+R=N5", string3);
      
      charSequenceArray0[5] = (CharSequence) "sun.text.Normalizer+R=N5";
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      String string1 = StringUtils.join(objectArray0, '!', 20, 20);
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad((String) null, 20);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", "ht&Js:8%z");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.strip("SecurityException occurred", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SecurityException occurred", string1);
      
      String string2 = StringUtils.leftPad((String) null, 1613, " ");
      assertNull(string2);
      
      String string3 = StringUtils.leftPad("%<@T<;o=", 1613);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.difference("H:<", "SecurityException occurred");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("SecurityException occurred", string4);
      
      String string5 = StringUtils.swapCase("%<@T<;o=");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("%<@t<;O=", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) "%<@t<;O=", 1613);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) string3, 256);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "");
      assertNull(stringArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("SecurityException occurred"));
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains("SecurityException occurred"));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string6 = StringUtils.join((Iterator<?>) listIterator0, ' ');
      assertNotNull(string6);
      assertFalse(linkedList0.contains("SecurityException occurred"));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.leftPad("", 1145, "%<@T<;o=");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.split(string7, " ", 48);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      int int2 = StringUtils.countMatches(string7, string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      String string8 = StringUtils.stripToNull("xXTgpVC=`");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("xXTgpVC=`", string8);
      
      int int3 = StringUtils.indexOf((CharSequence) "%<@T<;o=", 1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string9 = StringUtils.uncapitalize(" ");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertEquals(" ", string9);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("ht&Js:8%z", (String) null, 1677);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = StringUtils.defaultString("The character ");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The character ", (CharSequence) "The character ", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "The character ", (CharSequence) "The character ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("The character ", 'J');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      String string2 = StringUtils.substringBetween("The character ", "0Cu2@N");
      assertNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The character ";
      stringArray0[1] = "0Cu2@N";
      stringArray0[2] = "The character ";
      stringArray0[3] = "The character ";
      stringArray0[4] = "The character ";
      stringArray0[5] = "0Cu2@N";
      stringArray0[6] = "The character ";
      String string3 = "\\u000";
      stringArray0[7] = string3;
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals(8, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "0Cu2@N", (CharSequence) "The character ");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'U';
      charArray0[2] = 'J';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "The character ", charArray0);
      assertArrayEquals(new char[] {'J', 'U', 'J'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.remove("ykQNWR2Q.N", '^');
      assertNotNull(string0);
      assertEquals("ykQNWR2Q.N", string0);
      
      String string1 = StringUtils.right("ykQNWR2Q.N", 44);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ykQNWR2Q.N", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ykQNWR2Q.N", (String) null, 2143);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("ykQNWR2Q.N", (CharSequence) null, 44);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("*V");
      assertNotNull(string0);
      assertEquals("*V", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "*V", (CharSequence) "*V");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("*V");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.startsWith("*V", "@JH@");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "@JH@";
      charSequenceArray0[1] = (CharSequence) "@JH@";
      int int0 = StringUtils.indexOfAny((CharSequence) "@JH@", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.isAlpha("*V");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.substringsBetween("java.text.Normalizer$Form", "java.text.Normalizer$Form", "XXo1Srx");
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringAfterLast("@JH@", "*V");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.replace("Vn/')M\"7>c%IX^h", "Vn/')M\"7>c%IX^h", "JqD2.}#P$<A%sB7!", 1051);
      assertNotNull(string0);
      assertEquals("JqD2.}#P$<A%sB7!", string0);
      
      String string1 = StringUtils.trimToEmpty("b5?zFasbPOPG");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("b5?zFasbPOPG", string1);
      
      String[] stringArray0 = StringUtils.split("b5?zFasbPOPG", ' ');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "b5?zFasbPOPG", (CharSequence) "b5?zFasbPOPG");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "JqD2.}#P$<A%sB7!", (CharSequence) "JqD2.}#P$<A%sB7!");
      assertEquals(0, int0);
      
      String string2 = StringUtils.capitalize("Q<{|1jH{n>31M;bx\"oO");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q<{|1jH{n>31M;bx\"oO", string2);
      
      boolean boolean1 = StringUtils.isEmpty("b5?zFasbPOPG");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      classLoader0.setDefaultAssertionStatus(true);
      Iterator<Integer> iterator1 = serviceLoader0.iterator();
      assertNotNull(iterator1);
      assertNotSame(iterator1, iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertFalse(iterator1.equals((Object)iterator0));
      
      String string3 = StringUtils.join(iterator1, ' ');
      assertNotNull(string3);
      assertNotSame(iterator1, iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("-1Zj=", "b5?zFasbPOPG");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("-1Zj=", string4);
      
      boolean boolean2 = StringUtils.isWhitespace("b5?zFasbPOPG");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "-1Zj=", (CharSequence) "Q<{|1jH{n>31M;bx\"oO", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.substringBeforeLast("JqD2.}#P$<A%sB7!", "JqD2.}#P$<A%sB7!");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.isAlphanumeric("Q<{|1jH{n>31M;bx\"oO");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.deleteWhitespace("clone");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("clone", string6);
      
      String string7 = StringUtils.repeat(' ', 1051);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("m5@6!Wo9C(M");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "m5@6!Wo9C(M", 2792);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("cS$R9t.W2Kf.}vrHeBh", "cDU\"cD~TYHDdJ8W>-{J");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("cS$R9t.W2Kf.}vrHeBh", string1);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "cDU\"cD~TYHDdJ8W>-{J", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.length("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.rightPad("...", 3430, '4');
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("LnL", '\"');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(string0, string0, 3430);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length("...");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string1 = StringUtils.substringBetween("LnL", string0, "LnL");
      assertNull(string1);
      
      String string2 = StringUtils.difference("LnL", "kQ9,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("kQ9,", string2);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(3430));
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string2));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "LnL", (CharSequence) null, 3430);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "kQ9,", 3, 2597);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "{z>@Ha{CVQ}", (CharSequence) "kQ9,", (-1714));
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = StringUtils.right("", 2717);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.uncapitalize("q8p&$zqx9U#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("q8p&$zqx9U#", string1);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "q8p&$zqx9U#", (CharSequence) "", 2717);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(11, int3);
      
      String string2 = StringUtils.strip(", Length: ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", Length: ", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "q8p&$zqx9U#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad((String) null, 2548);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("", 213, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                     ", string4);
      
      String string5 = StringUtils.reverse("DsL%");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("%LsD", string5);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      String string6 = StringUtils.deleteWhitespace((String) null);
      assertNull(string6);
      
      int int5 = StringUtils.indexOfIgnoreCase((CharSequence) ", Length: ", (CharSequence) null, (-1));
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals((-1), int5);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("*V");
      assertNotNull(string0);
      assertEquals("*V", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "*V", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("@JH@", "*V");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "*V", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("*V");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.startsWith("", "@JH@");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "*V", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "@JH@";
      charSequenceArray0[1] = (CharSequence) "@JH@";
      int int0 = StringUtils.indexOfAny((CharSequence) "@JH@", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean5 = StringUtils.isAlpha("*V");
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.repeat(" vs ", " vs ", (-209));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", (-1), "([Kg<");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.capitalize("([Kg<");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("([Kg<", string2);
      
      String string3 = StringUtils.chomp("SP\"<<\"O6D3V+.{{");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("SP\"<<\"O6D3V+.{{", string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3ZX[AceUg&K";
      stringArray0[1] = " vs ";
      stringArray0[2] = " vs ";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals(3, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = "\\u000";
      String string6 = StringUtils.replaceChars("NFD", string5, "SP\"<<\"O6D3V+.{{");
      assertNotNull(string6);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("NFD", string6);
      
      String string7 = StringUtils.substringAfter("m.EG~4tU", "G?T");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string8 = StringUtils.normalizeSpace("NFD");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("NFD", string8);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("3ZX[AceUg&K");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.substringAfterLast(" vs ", "SP\"<<\"O6D3V+.{{");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertEquals("", string9);
      
      String[] stringArray1 = StringUtils.substringsBetween(" ", " ", "j");
      assertNull(stringArray1);
      
      String string10 = StringUtils.chop(" vs ");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertEquals(" vs", string10);
      
      String string11 = StringUtils.uncapitalize("");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string9));
      assertEquals("", string11);
      
      boolean boolean2 = StringUtils.isAllLowerCase("j");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.stripAccents(">>Um#");
      assertNotNull(string0);
      assertEquals(">>Um#", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(">>Um#");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ">>Um#", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">>Um#", (CharSequence) ">>Um#", (-1124));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ">>Um#", (CharSequence) ">>Um#");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeStartIgnoreCase("sun.text.Normalizer", "t2Y|a<E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("sun.text.Normalizer", string1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "sun.text.Normalizer", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.join((Object[]) null, 'p', 6, 6);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      char char0 = 'k';
      String string0 = StringUtils.join(objectArray0, 'k', 131, 13);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.overlay("eEs`5kFdI~^pqIY}s", "", 7, (-3656));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dI~^pqIY}s", string1);
      
      int int0 = new Integer(131);
      assertEquals(131, int0);
      
      String string2 = "10T{]s{(\"1K!W7D&m";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("10T{]s{(\"1K!W7D&m");
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("10T{]s{(\"1K!W7D&m");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("eEs`5kFdI~^pqIY}s", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2484));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("?6<a=l~1Y", (String) null, "SmEsx~J[TrB0()");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(">>Um#", ">>Um#", (-2484));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split(" vs ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string1 = StringUtils.chomp(">>Um#", "S%ki4g/]-a1Rq+A-sS");
      assertNotNull(string1);
      assertEquals(">>Um#", string1);
      
      int int1 = StringUtils.lastIndexOfAny(">>Um#", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToNull(">>Um#");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals(">>Um#", string4);
      
      String string5 = StringUtils.repeat("sun.text.Normalizer is not available+bf0iz5mvw", 1085);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.difference("sun.text.Normalizer is not available+bf0iz5mvw", "@I7$`mDe:H]b-1od");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("@I7$`mDe:H]b-1od", string6);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.swapCase("SecurityException occurred");
      assertNotNull(string0);
      assertEquals("sECURITYeXCEPTION OCCURRED", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("SecurityException occurred");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "SecurityException occurred", (CharSequence) "sECURITYeXCEPTION OCCURRED");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("sECURITYeXCEPTION OCCURRED");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "sECURITYeXCEPTION OCCURRED", (CharSequence) "SecurityException occurred");
      assertEquals(25, int0);
      
      String string1 = StringUtils.reverseDelimited("Cannot clone Cloneable type ", '^');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cannot clone Cloneable type ", string1);
      
      boolean boolean3 = StringUtils.isAllLowerCase("Cannot clone Cloneable type ");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "SecurityException occurred", (CharSequence) "sECURITYeXCEPTION OCCURRED");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.overlay("sECURITYeXCEPTION OCCURRED", " vs ", (-626), 3130);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      
      String string3 = StringUtils.removeStart(" available", " vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" available", string3);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("SecurityException occurred"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean4 = priorityQueue0.add("decompose");
      assertTrue(priorityQueue0.contains("decompose"));
      assertFalse(priorityQueue0.contains("SecurityException occurred"));
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      boolean boolean5 = priorityQueue0.add("Ok$S!B#Q 5&6");
      assertTrue(priorityQueue0.contains("Ok$S!B#Q 5&6"));
      assertFalse(priorityQueue0.contains("SecurityException occurred"));
      assertEquals(2, priorityQueue0.size());
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, '^');
      assertNotNull(string4);
      assertTrue(priorityQueue0.contains("Ok$S!B#Q 5&6"));
      assertFalse(priorityQueue0.contains("SecurityException occurred"));
      assertEquals(2, priorityQueue0.size());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("decompose^Ok$S!B#Q 5&6", string4);
      
      String string5 = StringUtils.swapCase("2");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("2", string5);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "sECURITYeXCEPTION OCCURRED", (CharSequence) "Cannot clone Cloneable type ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", " available");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" available", string6);
      
      String string7 = StringUtils.leftPad("2", (-1), '^');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("2", string7);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(", Length: ");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("Ok$S!B#Q 5&6", " available", (-1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.capitalize("Ok$S!B#Q 5&6");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Ok$S!B#Q 5&6", string8);
      
      String string9 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string9);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertEquals("", string9);
      
      int int3 = StringUtils.ordinalIndexOf("Cannot clone Cloneable type ", "", (-1));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G?T", "G?T");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("G?T");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.substringsBetween("", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("G?T");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", "The Character must not be null");
      assertEquals(2, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.leftPad("G?T", 46, "', has a length less than 2");
      assertNotNull(string0);
      assertEquals("', has a length less than 2', has a length G?T", string0);
      
      String string1 = "\\u00";
      String[] stringArray3 = StringUtils.splitByWholeSeparator(string1, "", (-1));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "The Character must not be null", 67);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      String string2 = StringUtils.remove("G?T", '+');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("G?T", string2);
      
      String string3 = StringUtils.remove("hT}GOIbqW", '(');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("hT}GOIbqW", string3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">WK6e]DBk";
      stringArray0[1] = "j";
      stringArray0[2] = ">WK6e]DBk";
      stringArray0[3] = ">WK6e]DBk";
      stringArray0[4] = ">WK6e]DBk";
      String string0 = StringUtils.replaceEachRepeatedly(">WK6e]DBk", (String[]) null, stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals(">WK6e]DBk", string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("j", ">WK6e]DBk", 57);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.stripStart(">WK6e]DBk", "Minimum abbreviation width with offset is 7");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(">WK6e]DBk", string1);
      
      String string2 = StringUtils.chomp("Pee$@qM3Jvoy_g");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Pee$@qM3Jvoy_g", string2);
      
      int int0 = StringUtils.length("Minimum abbreviation width with offset is 7");
      assertEquals(43, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf(">WK6e]DBk", ">WK6e]DBk", 57);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.capitalize("w]<");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("W]<", string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("W]<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.chomp("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      String string1 = StringUtils.repeat("Array and element cannot both be null", (String) null, 227);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("NFD", "NFD");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("|~#+%|r<", "Array and element cannot both be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("|~#+%|r<");
      assertFalse(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(227));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Integer integer0 = new Integer((byte)48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Integer> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, '6');
      assertNotNull(string4);
      assertFalse(hashSet0.contains(227));
      assertTrue(hashSet0.contains(integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Array and element cannot both be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "\\u";
      String[] stringArray0 = StringUtils.split(string1, 'C');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\u", string2);
      
      boolean boolean0 = StringUtils.startsWithAny(string2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0);
      
      String string3 = StringUtils.swapCase("The Character must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("tHE cHARACTER MUST NOT BE NULL", string3);
      
      String string4 = StringUtils.chomp(string2, "");
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\\u", string4);
      
      String string5 = StringUtils.trim("^K6+6F=ez-JsEx6c!");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("^K6+6F=ez-JsEx6c!", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string1, 16);
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertEquals(2, int0);
      
      String string6 = StringUtils.replaceOnce("Search and Replace array lengths don't match: ", "", "^K6+6F=ez-JsEx6c!");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Search and Replace array lengths don't match: ", string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.removeEndIgnoreCase(string4, "eX5A[>%C8Kn=k]");
      assertNotNull(string7);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string6));
      assertTrue(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("\\u", string7);
      
      String string8 = StringUtils.chop("b;");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("b", string8);
      
      String string9 = StringUtils.join((Object[]) stringArray0, "^K6+6F=ez-JsEx6c!", 0, 0);
      assertNotNull(string9);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string6));
      assertTrue(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      
      String string10 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string10);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string6));
      assertTrue(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertTrue(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertEquals("\\u", string10);
      
      String string11 = StringUtils.substringBefore("Array ement ", "");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertEquals("", string11);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string12 = StringUtils.leftPad("", 16);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
      assertEquals("                ", string12);
      
      String string13 = StringUtils.substring("a93aF", 1, 2);
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertEquals("9", string13);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string2, (CharSequence) "eX5A[>%C8Kn=k]");
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string13));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string12));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string9));
      assertTrue(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string8));
      assertTrue(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string13));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2549));
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring((String) null, (-2549), (-2549));
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1074));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-45);
      String string2 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-107), (byte)4, (byte)65, (byte) (-34), (byte)0, (byte)0, (byte) (-45)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("%\uFFFD\u0004A\uFFFD\u0000\u0000\uFFFD", string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 8192);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-909));
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The stripAccents(CharSequence) method requires at least Java6, but got: ", ';');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", "The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertNull(stringArray1);
      
      String string1 = StringUtils.upperCase("MT>kBoav@");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MT>KBOAV@", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-909), (-909));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.deleteWhitespace("MT>KBOAV@");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("MT>KBOAV@", string2);
      
      String string3 = StringUtils.leftPad("MT>KBOAV@", 64);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("                                                       MT>KBOAV@", string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("The character must not be null", "");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string4 = StringUtils.substringBetween((String) null, "org.apache.commons.lang3.StringUtils$InitStripAccents");
      assertNull(string4);
      
      String string5 = StringUtils.repeat(';', 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String[] stringArray3 = StringUtils.split("MT>KBOAV@", (String) null);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      String string6 = StringUtils.replace("MT>KBOAV@", "M1uR QA'46X{]X`2*j", "org.apache.commons.lang3.StringUtils$InitStripAccents");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("MT>KBOAV@", string6);
      
      String string7 = StringUtils.overlay("", "Array and element cannot both be null", 7, (-1));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("Array and element cannot both be null", string7);
      
      String string8 = StringUtils.stripToEmpty(" is not in the range '0' - '9'");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertEquals("is not in the range '0' - '9'", string8);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("MT>kBoav@", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("is not in the range '0' - '9'");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string9 = StringUtils.stripAccents("");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string0));
      assertEquals("", string9);
      
      String string10 = StringUtils.substringBetween(">(^", "MT>KBOAV@");
      assertNull(string10);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.stripToNull("1K<bd*");
      assertNotNull(string0);
      assertEquals("1K<bd*", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "1K<bd*", "1K<bd*");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat("1K<bd*", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("", 2855, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("1K<bd*", "", "O>~&");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, "]]S7Uwt*N5$-");
      assertNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("1K<bd*"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int1 = 65;
      String string5 = null;
      Iterator<String> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains("1K<bd*"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        arrayList0.set(65, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.strip("E\"-k5]?}5<R");
      assertNotNull(string0);
      assertEquals("E\"-k5]?}5<R", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "E\"-k5]?}5<R", (CharSequence) "E\"-k5]?}5<R");
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("E\"-k5]?}5<R", "Array and element cannot both be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "E\"-k5]?}5<R", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.right("p{InCombiningDiacriticalMarks}+", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("Strings must not be null=\"wF?Y");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Strings must not be null=\"wF?Y", string3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "Strings must not be null=\"wF?Y");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string4 = StringUtils.rightPad("E\"-k5]?}5<R", (-1), 'O');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("E\"-k5]?}5<R", string4);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "E\"-k5]?}5<R", (CharSequence) "E\"-k5]?}5<R", 12);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.strip("KJ+Dze");
      assertNotNull(string0);
      assertEquals("KJ+Dze", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "KJ+Dze", "KJ+Dze");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("KJ+Dze", "KJ+Dze");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "KJ+Dze", (CharSequence) "KJ+Dze");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "KJ+Dze";
      charSequenceArray0[1] = (CharSequence) "KJ+Dze";
      charSequenceArray0[2] = (CharSequence) "KJ+Dze";
      charSequenceArray0[3] = (CharSequence) "KJ+Dze";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "KJ+Dze";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("KJ+Dze", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(6, int0);
      
      String string2 = StringUtils.abbreviateMiddle("The Character must not be null", "KJ+Dze", 6);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The Character must not be null", string2);
      
      String string3 = StringUtils.defaultString("Array and element cannot both be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Array and element cannot both be null", string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'X');
      assertNotNull(string4);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("KJ+DzeXKJ+DzeXKJ+DzeXKJ+DzeXXKJ+DzeXX", string4);
      
      String[] stringArray0 = StringUtils.split("KJ+Dze", "?&Ba=2nRVl4sDXO");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string5 = StringUtils.replaceChars("KJ+DzeXKJ+DzeXKJ+DzeXKJ+DzeXXKJ+DzeXX", 'X', 'X');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("KJ+DzeXKJ+DzeXKJ+DzeXKJ+DzeXXKJ+DzeXX", string5);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("KJ+DzeXKJ+DzeXKJ+DzeXKJ+DzeXXKJ+DzeXX");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "KJ+Dze");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.substringBetween((String) null, "KJ+DzeXKJ+DzeXKJ+DzeXKJ+DzeXXKJ+DzeXX", "Array and element cannot both be null");
      assertNull(string6);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase(charSequenceArray0[7], "KJ+DzeXKJ+DzeXKJ+DzeXKJ+DzeXXKJ+DzeXX");
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("The Character must not be null");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = StringUtils.swapCase("KJ+DzeXKJ+DzeXKJ+DzeXKJ+DzeXXKJ+DzeXX");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExx", string7);
      
      String string8 = StringUtils.trim("");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      
      boolean boolean5 = StringUtils.isAlphanumeric("");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.containsAny((CharSequence) "", (CharSequence) "The Character must not be null");
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      boolean boolean7 = StringUtils.isNumericSpace("KJ+Dze");
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      String string9 = StringUtils.repeat("kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExx", "n+;vgtUmv5+7j`", 6);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertEquals("kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExxn+;vgtUmv5+7j`kj+dZExkj+dZExkj+dZExkj+dZExxkj+dZExx", string9);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = StringUtils.replace("e-v 6IfE", "", "a}dXw|j", (-1249));
      assertNotNull(string0);
      assertEquals("e-v 6IfE", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "a}dXw|j", (CharSequence) "a}dXw|j");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "a}dXw|j";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.trimToNull("!]/c&pU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!]/c&pU", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) charSequenceArray0[1];
      String string2 = StringUtils.join(objectArray0, 'x', (-896), (-3614));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "!]/c&pU", "e-v 6IfE");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("e-v 6IfE");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string3 = StringUtils.substringBetween("', is neither of type Map.Entry nor an Array", "", "^^");
      assertNull(string3);
      
      String string4 = StringUtils.defaultString("/`M8|xhrd6");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("/`M8|xhrd6", string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "e-v 6IfE");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = "-%=Hl*7I3]8g";
      String string6 = StringUtils.stripStart((String) null, "-%=Hl*7I3]8g");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = StringUtils.left("a}dXw|j", 0);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String string8 = StringUtils.substringBefore((String) null, "!]/c&pU");
      assertNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "!]/c&pU", charSequenceArray0[0], (-3614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1), 'm');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.mid("", 0, (-1));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 8, 8);
      assertNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "Aborting to protect against SWackOverflowrror - output of ne loop is the input of an@ther";
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(6, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.swapCase(" is not in the range '0' - '9'");
      assertNotNull(string0);
      assertEquals(" IS NOT IN THE RANGE '0' - '9'", string0);
      
      String string1 = StringUtils.repeat(" is not in the range '0' - '9'", (-5779));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) " is not in the range '0' - '9'");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string2 = StringUtils.replace((String) null, (String) null, "$j5~y5l1", (-936));
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " IS NOT IN THE RANGE '0' - '9'";
      charSequenceArray0[3] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny(" is not in the range '0' - '9'", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripToNull("I)v-3ygL0}Au7,");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("I)v-3ygL0}Au7,", string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " IS NOT IN THE RANGE '0' - '9'", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '<';
      charArray0[2] = '/';
      charArray0[3] = 'W';
      charArray0[4] = 'X';
      charArray0[5] = 'Z';
      charArray0[6] = 'k';
      charArray0[7] = 'S';
      charArray0[8] = 'm';
      int int2 = StringUtils.indexOfAny(charSequenceArray0[1], charArray0);
      assertArrayEquals(new char[] {'t', '<', '/', 'W', 'X', 'Z', 'k', 'S', 'm'}, charArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(9, charArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The ABray must not be _ull", "The ABray must not be _ull");
      assertNotNull(stringArray0);
      assertEquals(27, stringArray0.length);
      
      String string0 = StringUtils.substring("The ABray must not be _ull", (-501), (-501));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(27, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(27, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("FUgfDGN", "FUgfDGN");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "FUgfDGN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.deleteWhitespace("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.reverseDelimited("", '%');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.strip("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      
      int int0 = StringUtils.indexOf((CharSequence) charBuffer0, 0, 0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'W', 0, 641);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("n|72+!D", "5mq}oI\"g!");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'V';
      charArray0[2] = '-';
      charArray0[3] = '&';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "n|72+!D", charArray0);
      assertArrayEquals(new char[] {'e', 'V', '-', '&'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.split("5mq}oI\"g!", "n|72+!D");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.repeat("org.apache.commons.lang3.StringUtils$InitStripAccents", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("5mq}oI\"g!", "n|72+!D", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.deleteWhitespace("org.apache.commons.lang3.StringUtils$InitStripAccents");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils$InitStripAccents", string1);
      
      String string2 = StringUtils.stripEnd("The Character must not be null", "\"j,B<HW6Ab/|3{~");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The Character must not be null", string2);
      
      boolean boolean1 = StringUtils.startsWithAny("The Character must not be null", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("n|72+!D");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(6, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils$InitStripAccents", (CharSequence) "org.apache.commons.lang3.StringUtils$InitStripAccents");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.replaceChars("", "The Character must not be null", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.right("sun.text.Normalizer", 5);
      assertNotNull(string0);
      assertEquals("lizer", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "lizer", (CharSequence) "sun.text.Normalizer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("sun.text.Normalizer");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Sun.text.Normalizer", string1);
      
      String string2 = StringUtils.substringBefore("sun.text.Normalizer", "IllegalAccessException occurred");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("sun.text.Normalizer", string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "sun.text.Normalizer", (CharSequence) "IllegalAccessException occurred");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "lizer", 5);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNotEmpty("IllegalAccessException occurred");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'b'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.trim("sun.text.Normalizer");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("sun.text.Normalizer", string4);
      
      String string5 = StringUtils.normalizeSpace("', is neither of type Map.Entry nor an Array");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string5);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "IllegalAccessException occurred", (CharSequence) "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(5));
      assertEquals(0, linkedList0.size());
      
      String string6 = StringUtils.join((Iterable<?>) linkedList0, 'b');
      assertNotNull(string6);
      assertFalse(linkedList0.contains(5));
      assertEquals(0, linkedList0.size());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Sun.text.Normalizer", (-2933));
      assertNull(stringArray1);
      
      String string7 = StringUtils.chop((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.swapCase("IllegalAccessException occurred");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("iLLEGALaCCESSeXCEPTION OCCURRED", string8);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "sun.text.Normalizer");
      assertNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("...");
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      String[] stringArray4 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray4);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "lizer", 0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      String string9 = StringUtils.upperCase("", locale0);
      assertNotNull(string9);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.substringBetween("b/(>M'c", "b/(>M'c");
      assertNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'f';
      char char0 = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '/';
      charArray0[4] = 'A';
      charArray0[5] = 'V';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "b/(>M'c", charArray0);
      assertArrayEquals(new char[] {'\\', 'f', 'a', '/', 'A', 'V'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replace((String) null, "X}.?`M", (String) null);
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.uncapitalize("me{!dtM7{@Nm573jA");
      assertNotNull(string2);
      assertEquals("me{!dtM7{@Nm573jA", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("me{!dtM7{@Nm573jA"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string3 = StringUtils.lowerCase("me{!dtM7{@Nm573jA", locale0);
      assertNotNull(string3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertFalse(string3.equals((Object)string2));
      assertEquals("me{!dtm7{@nm573ja", string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("NFD");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("NFD", "s-N|L\"y]tgPd~q", 122);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.chop("Index: ");
      assertNotNull(string0);
      assertEquals("Index:", string0);
      
      String string1 = StringUtils.trim("Index:");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Index:", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Index:", (CharSequence) "Index:");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Index:", "s-N|L\"y]tgPd~q");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("Index:", 2, '6');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Index:", string2);
      
      String string3 = StringUtils.swapCase("0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0", string3);
      
      String string4 = StringUtils.center("0", 0, "Index:");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("0", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.substringAfterLast("Threshold must not be negative", " m;5Z)'F#^xxDCJ0");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.substringAfter("\"pf3?`UjC!", "0");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.stripToNull("java.text.Normalizer");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("java.text.Normalizer", string7);
      
      String string8 = StringUtils.right("Threshold must not be negative", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      
      String string9 = StringUtils.replaceOnce("", "Index:", "qx-Xs'");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertEquals("", string9);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string10 = StringUtils.substringAfterLast("\"pf3?`UjC!", "org.apache.commons.lang3.StringUtils$InitStripAccents");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string9));
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.remove("", '6');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "\\u000";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("", "", 1228);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 2362);
      assertEquals(0, int0);
      
      String string3 = StringUtils.rightPad("Minimum abbreviation width with offset is 7", 1228, string1);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((Integer[]) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.defaultIfBlank(string3, "Minimum abbreviation width with offset is 7");
      assertNotNull(string5);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.removeStart(">`5Syp!6bP", string1);
      assertNotNull(string6);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals(">`5Syp!6bP", string6);
      
      String string7 = "\\u00";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("9H6Y", string7, (-1101));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean2 = StringUtils.startsWith("", "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ">`5Syp!6bP", 1228);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.substring((String) null, 0, 0);
      assertNull(string8);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Locale locale0 = new Locale(string1, "");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("\\u000", locale0.getLanguage());
      assertEquals("\\u000", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      
      String string9 = StringUtils.upperCase((String) null, locale0);
      assertNull(string9);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("\\u000", locale0.getLanguage());
      assertEquals("\\u000", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      
      String string10 = StringUtils.removeStartIgnoreCase("Array element ", (String) null);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertEquals("Array element ", string10);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'H');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Array and element cannot both be null", "Array and element cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Array and element cannot both be null", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween("lqVcE", "lqVcE", "lqVcE");
      assertNull(string1);
      
      String string2 = "\\u";
      String string3 = StringUtils.rightPad(string2, (-1));
      assertNotNull(string3);
      assertEquals("\\u", string3);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.upperCase("", locale0);
      assertNotNull(string4);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = locale0.getScript();
      assertNotNull(string5);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Array and element cannot both be null", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.stripStart("Array and element cannot both be null", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Array and element cannot both be null", string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array and element cannot both be null", (CharSequence) string2, 0);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        charBuffer0.put(charArray0, (-2723), (-1406));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.rightPad("kV/OVC", (-1373), '<');
      assertNotNull(string0);
      assertEquals("kV/OVC", string0);
      
      String string1 = StringUtils.stripToEmpty("3?C7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3?C7", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("kV/OVC", "kV/OVC");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripEnd("kV/OVC", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("kV/OVC", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("kV/OVC");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("kV/OVC");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "kV/OVC", (CharSequence) "kV/OVC", (-1373));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.remove("V7!\t\"0g@:", "3?C7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("V7!\t\"0g@:", string4);
      
      String string5 = StringUtils.leftPad("V7!\t\"0g@:", (-1373), '<');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("V7!\t\"0g@:", string5);
      
      String string6 = StringUtils.chop("3?C7");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("3?C", string6);
      
      int int2 = StringUtils.indexOf((CharSequence) "3?C", (CharSequence) "V7!\t\"0g@:");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.repeat('j', 128);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string7);
      
      String string8 = StringUtils.center("", 32, "R']pXOJ]");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("R']pXOJ]R']pXOJ]R']pXOJ]R']pXOJ]", string8);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "R']pXOJ]", (CharSequence) "3?C");
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.upperCase("]Zx#2^G}Sp<PkZFq$,4");
      assertNotNull(string0);
      assertEquals("]ZX#2^G}SP<PKZFQ$,4", string0);
      
      String string1 = StringUtils.replaceOnce("]Zx#2^G}Sp<PkZFq$,4", "]Zx#2^G}Sp<PkZFq$,4", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]Zx#2^G}Sp<PkZFq$,4", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "]Zx#2^G}Sp<PkZFq$,4", (CharSequence) "]ZX#2^G}SP<PKZFQ$,4");
      assertTrue(boolean0);
      
      String string2 = "\\u";
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.center((String) null, 4, 'r');
      assertNull(string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "]Zx#2^G}Sp<PkZFq$,4";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "]ZX#2^G}SP<PKZFQ$,4";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "]Zx#2^G}Sp<PkZFq$,4";
      stringArray1[2] = "Minimum abbreviation width with offset is 7";
      stringArray1[3] = null;
      stringArray1[4] = "";
      stringArray1[5] = null;
      String string4 = StringUtils.replaceEachRepeatedly("Minimum abbreviation width with offset is 7", stringArray0, stringArray1);
      assertNotNull(string4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("Minimum abbreviation width with offset is 7", string4);
      
      String string5 = StringUtils.rightPad(")5P-+8>TZ?UE0$HL", 8192, 'r');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "]Zx#2^G}Sp<PkZFq$,4", (CharSequence) string3, 3713);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = new String[9];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = null;
      stringArray1[4] = "";
      stringArray1[5] = null;
      stringArray1[6] = null;
      stringArray1[7] = null;
      stringArray1[8] = null;
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray1, stringArray1);
      assertNull(string0);
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("{}", '\'');
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = StringUtils.center("{}", 3, 'l');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}l", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "{}";
      objectArray0[1] = (Object) "{}l";
      objectArray0[2] = (Object) "{}";
      String string2 = StringUtils.join(objectArray0, " in an array of ");
      assertNotNull(string2);
      assertEquals(3, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{} in an array of {}l in an array of {}", string2);
      
      boolean boolean0 = StringUtils.startsWith("{} in an array of {}l in an array of {}", " in an array of ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) " in an array of ", (CharSequence) "{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("{}", 0, 'I');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{}", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) " in an array of ", (CharSequence) "{}");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.difference("{} in an array of {}l in an array of {}", "srQ/");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("srQ/", string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase(" in an array of ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.difference("", "Q:+\"ti!L3bRU&");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Q:+\"ti!L3bRU&", string5);
      
      String string6 = StringUtils.overlay(";:", ", Length: 0", (-1), 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals(", Length: 0;:", string6);
      
      String string7 = StringUtils.stripStart(", Length: 0;:", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals(", Length: 0;:", string7);
      
      boolean boolean3 = StringUtils.isNotBlank("{}");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string8 = StringUtils.deleteWhitespace(", Length: 0");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals(",Length:0", string8);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      String string1 = StringUtils.chomp("Array and element cannot both be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string1);
      
      String string2 = StringUtils.repeat("Array and element cannot both be null", (String) null, 227);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("NFD", "NFD");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)48;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "n";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.mid("", 2048, 2048);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 2048);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(arrayList0.contains(Integer.MAX_VALUE));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "The String must not be empty");
      assertNotNull(string0);
      assertTrue(arrayList0.contains(Integer.MAX_VALUE));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      String string1 = StringUtils.center("java.lang.Integer@0000000001", 2050);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Integer integer1 = new Integer(2050);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2050, (int)integer1);
      
      boolean boolean1 = arrayList0.add(integer1);
      assertTrue(arrayList0.contains(Integer.MAX_VALUE));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("java.text.Normalizer", "java.text.Normalizer", 1161);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.remove(string1, '.');
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("3CIv2pa9@:3:$YX&:", "java.text.Normalizer");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.text.Normalizer", string3);
      
      boolean boolean2 = StringUtils.endsWithAny("java.lang.Integer@0000000001", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.defaultString("p~", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p~", string4);
      
      String string5 = StringUtils.strip("IllegalAccessException occurred");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("IllegalAccessException occurred", string5);
      
      String[] stringArray1 = StringUtils.split("The String must not be empty", '.');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.isNotEmpty("3CIv2pa9@:3:$YX&:");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string6 = StringUtils.mid("java.text.Normalizer", (-2054), 3059);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("java.text.Normalizer", string6);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(", Length: 0");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.abbreviateMiddle("", "Minimum abbreviation width with offset is 7", 90);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("", (-1824));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("", 'N', '@');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = " ";
      String string5 = StringUtils.replace(" ", "Minimum abbreviation width with offset is 7", "", 90);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" ", string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) "", 7);
      assertEquals(7, int0);
      
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(",38pL{Fz<x#p", ",38pL{Fz<x#p");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", (String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad(",38pL{Fz<x#p", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(",38pL{Fz<x#p", string2);
      
      String string3 = "4|7|\\*=";
      String[] stringArray0 = StringUtils.split("/O;", "4|7|*=");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '5');
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/O;", string4);
      
      String string5 = StringUtils.trimToEmpty("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "e<", (-462));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.indexOf((CharSequence) ",38pL{Fz<x#p", (CharSequence) "/O;", 16);
      assertEquals((-1), int0);
      
      String string6 = "";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 404, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("cS$R9L.W2Kf.}vrHeBh", "cS$R9L.W2Kf.}vrHeBh", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.leftPad("", 0, '{');
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      char char0 = 'n';
      charArray0[0] = 'n';
      charArray0[1] = '{';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "cS$R9L.W2Kf.}vrHeBh", charArray0);
      assertArrayEquals(new char[] {'n', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("Threshold must not be negative", 0, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.substringAfterLast("Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.reverse("Threshold must not be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("evitagen eb ton tsum dlohserhT", string3);
      
      String string4 = "9>a\\XJkb?{^/w6!A";
      String string5 = StringUtils.center("9>aXJkb?{^/w6!A", 48, 'n');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("nnnnnnnnnnnnnnnn9>aXJkb?{^/w6!Annnnnnnnnnnnnnnn", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "The Array must not be null", (-542), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -542
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.rightPad("java.text.Normalizer", 0);
      assertNotNull(string0);
      assertEquals("java.text.Normalizer", string0);
      
      String string1 = StringUtils.substringBefore("decompose", "decompose");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.ordinalIndexOf("", "java.text.Normalizer", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast((String) null, "java.text.Normalizer");
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("decompose", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("decompose", string3);
      
      boolean boolean0 = StringUtils.isAlphanumeric("decompose");
      assertTrue(boolean0);
      
      String string4 = StringUtils.trimToEmpty("decompose");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("decompose", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat(',', (-615));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("szEP", "szEP");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("InvocationTargetException occurred", "", 57);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.ordinalIndexOf("", "", 57);
      assertEquals(0, int0);
      
      String string2 = "";
      String string3 = "\\p{InCombiningDiacriticalMarks}+";
      String string4 = StringUtils.substringAfterLast("", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int1 = (-267);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", (-267), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.substringAfter("cS$R9L.W2Kf.}vrHeBh", "l");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEnd("l", "cS$R9L.W2Kf.}vrHeBh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("l", string1);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.ObjectUtils", "cS$R9L.W2Kf.}vrHeBh", (-4117));
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string2 = StringUtils.leftPad("InvocationTargetException occurred", 10, "x H aCj~Qpulzx H aCj~Qpulz");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("InvocationTargetException occurred", string2);
      
      String string3 = StringUtils.defaultIfBlank("InvocationTargetException occurred", "l");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("InvocationTargetException occurred", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "x H aCj~Qpulzx H aCj~Qpulz", "InvocationTargetException occurred");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'l';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "l", charArray0);
      assertArrayEquals(new char[] {')', 'l'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.stripAccents("InvocationTargetException occurred");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("InvocationTargetException occurred", string4);
      
      String string5 = StringUtils.defaultString("lzx|bnvIk+`");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("lzx|bnvIk+`", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ESf}{nu\"<i9'x(Q", (-4117), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~}N00cZ|";
      String string0 = "\\u0";
      stringArray0[1] = string0;
      stringArray0[2] = " is not in the range '0' - '9'";
      stringArray0[3] = "{W[5N8u9W";
      stringArray0[4] = "";
      stringArray0[5] = "1%ii%$OLx$4Uuv";
      stringArray0[6] = "...";
      stringArray0[7] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " is not in the range '0' - '9'");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" is not in the range '0' - '9'");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("{W[5N8u9W", stringArray0[1]);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("...", " is not in the range '0' - '9'", (-841));
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.endsWithAny("1%ii%$OLx$4Uuv", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.chomp("n~)Gr1DC\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("n~)Gr1DC\"", string1);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "...", "Z}I*D-V6a");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.indexOf((CharSequence) "1%ii%$OLx$4Uuv", (CharSequence) "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "1%ii%$OLx$4Uuv", (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) " is not in the range '0' - '9'", (CharSequence) "n~)Gr1DC\"");
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string2 = StringUtils.replaceOnce(string0, "...", "The character must not be null");
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\\u0", string2);
      
      String string3 = StringUtils.reverse("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, ", Length: ");
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", 538, 538);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(", Length: ", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(", Length: ", string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripEnd(" vs ", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" vs", string5);
      
      int int1 = StringUtils.length(", Length: ");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String string6 = StringUtils.center("The Array must not be null", 0, '[');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("The Array must not be null", string6);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.substringBetween("", "The Array must not be null");
      assertNull(string7);
      
      int int3 = StringUtils.lastOrdinalIndexOf("", " vs ", 538);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string8 = StringUtils.overlay("", (String) null, 0, 10);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" vs");
      assertTrue(boolean0);
      
      String string9 = StringUtils.strip("", " vs ");
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string8));
      assertEquals("", string9);
      
      String string10 = StringUtils.repeat('q', 10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertEquals("qqqqqqqqqq", string10);
      
      String string11 = StringUtils.removeStart(" vs", "");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string5));
      assertEquals(" vs", string11);
      
      String string12 = StringUtils.replaceChars((String) null, "Zby: ?e#V", ", Length: ");
      assertNull(string12);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean0 = arrayDeque0.add(")cB1e7.");
      assertTrue(arrayDeque0.contains(")cB1e7."));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayDeque0.add("org.apache.commons.lang3.CharUtils");
      assertTrue(arrayDeque0.contains(")cB1e7."));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.contains(")cB1e7."));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      String string0 = StringUtils.join(iterator0, "");
      assertNotNull(string0);
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains(")cB1e7."));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(")cB1e7.org.apache.commons.lang3.CharUtils", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "...", 1331);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.isBlank("...");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.removeStart("k{^E", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k{^E", string1);
      
      int int0 = StringUtils.countMatches("k{^E", ")cB1e7.");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) null, 48, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.substringsBetween("_[euD", "_[euD", "_[euD");
      assertNull(stringArray0);
      
      String string0 = "";
      String string1 = StringUtils.replace("_[euD", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_[euD", string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "_[euD", "_[euD");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '#';
      charArray0[2] = 'Z';
      int int2 = StringUtils.indexOfAny((CharSequence) "_[euD", charArray0);
      assertArrayEquals(new char[] {'7', '#', 'Z'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("UT", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace(">{YyAw!l(");
      assertNotNull(string1);
      assertEquals(">{YyAw!l(", string1);
      
      String string2 = StringUtils.replaceOnce("", (String) null, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = ':';
      charArray0[2] = 'f';
      charArray0[3] = 'A';
      charArray0[4] = 'a';
      charArray0[5] = 'A';
      boolean boolean1 = StringUtils.containsNone((CharSequence) ">{YyAw!l(", charArray0);
      assertArrayEquals(new char[] {' ', ':', 'f', 'A', 'a', 'A'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty(">{YyAw!l(");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.leftPad((String) null, 2410, " ");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (-560));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.rightPad("", (-1917));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("PbHJ~bQ$h$`6]E", 13, "F]L0WvI+um]W6");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("PbHJ~bQ$h$`6]E", string1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "PbHJ~bQ$h$`6]E", (-560));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("PbHJ~bQ$h$`6]E");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("qq_.^QCXU", (-1917), 97);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qq_.^QCXU", string2);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "PbHJ~bQ$h$`6]E");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.remove("qq_.^QCXU", 'f');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("qq_.^QCXU", string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.center("s+", 2454, '.');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) "s+", 113);
      assertEquals(1226, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = 'M';
      charArray0[4] = '.';
      charArray0[5] = '.';
      charArray0[6] = '.';
      charArray0[7] = '.';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s+", charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', 'M', '.', '.', '.', '.'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("%a6amr<q{P0ES?W,Bk", (-2687), (-2687));
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '3';
      charArray0[2] = 'B';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = 'Z';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "%a6amr<q{P0ES?W,Bk", charArray0);
      assertArrayEquals(new char[] {'`', '3', 'B', '3', '3', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "%a6amr<q{P0ES?W,Bk");
      assertFalse(boolean0);
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substringBetween("i9M3Yn\"jQ;WqLx", "i9M3Yn\"jQ;WqLx", "F=X_Bul]Oc[O");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Z");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "F=X_Bul]Oc[O", ",~,\"rPd&B");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string1 = StringUtils.remove("", '1');
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.capitalize(",~,\"rPd&B");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(",~,\"rPd&B", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ",~,\"rPd&B", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "java.text.Normalizer$Form");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertNotNull(string4);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.swapCase("9xl8cN~IO2 d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("9XL8Cn~io2 D", string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string7 = StringUtils.removeStart("We", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("We", string7);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.replace("e-v 6IfE", "", "a}dXw|j", (-1249));
      assertNotNull(string0);
      assertEquals("e-v 6IfE", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "a}dXw|j", (CharSequence) "a}dXw|j");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "a}dXw|j";
      charSequenceArray0[1] = (CharSequence) "e-v 6IfE";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.trimToNull("!]/c&pU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!]/c&pU", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) charSequenceArray0[1];
      String string2 = StringUtils.join(objectArray0, 'x', (-896), (-3614));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "!]/c&pU", "e-v 6IfE");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("e-v 6IfE");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string3 = StringUtils.substringBetween("', is neither of type Map.Entry nor an Array", "", "^^");
      assertNull(string3);
      
      String string4 = StringUtils.defaultString("/`M8|xhrd6");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("/`M8|xhrd6", string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "e-v 6IfE");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = "-%=Hl*7I3]8g";
      String string6 = StringUtils.stripStart((String) null, "-%=Hl*7I3]8g");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = StringUtils.left("a}dXw|j", 0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String string8 = StringUtils.substringBefore((String) null, "!]/c&pU");
      assertNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "!]/c&pU", charSequenceArray0[0], (-3614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.reverse("Bw<'O?");
      assertNotNull(string0);
      assertEquals("?O'<wB", string0);
      
      String string1 = StringUtils.rightPad("?O'<wB", (-2572), 'U');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("?O'<wB", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Bw<'O?", "?O'<wB", (-2572));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replace(";qqr@*?B3@IUZ4iN:w", (String) null, "?O'<wB", (-2572));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";qqr@*?B3@IUZ4iN:w", string2);
      
      String string3 = StringUtils.stripToNull("7u@N6 i0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("7u@N6 i0", string3);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, '0');
      assertNotNull(string4);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("7u@N6 i0", "?O'<wB");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "?O'<wB", (CharSequence) ";qqr@*?B3@IUZ4iN:w");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'U');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "7u@N6 i0", "?O'<wB");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      String string5 = StringUtils.upperCase("?/.]'9V=#*", locale0);
      assertNotNull(string5);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("?/.]'9V=#*", string5);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(26, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.replaceChars(";qqr@*?B3@IUZ4iN:w", ')', '2');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals(";qqr@*?B3@IUZ4iN:w", string6);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, 'R');
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("java.lang.Object@46e960f3Rjava.lang.Object@28cf1fc0", "java.lang.Object@46e960f3Rjava.lang.Object@28cf1fc0");
      assertTrue(boolean0);
      
      String string1 = "\\u00";
      String string2 = StringUtils.substringBetween(string1, "Y!+2xSu<", " is not in the range '0' - '9'");
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "java.lang.Object@46e960f3Rjava.lang.Object@28cf1fc0", (-1528));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@46e960f3Rjava.lang.Object@28cf1fc0";
      charSequenceArray0[2] = (CharSequence) "Y!+2xSu<";
      charSequenceArray0[3] = (CharSequence) "Y!+2xSu<";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@46e960f3Rjava.lang.Object@28cf1fc0";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) " is not in the range '0' - '9'", charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.replaceChars("`;[PmO8$", (String) null, (String) null);
      assertNotNull(string0);
      assertEquals("`;[PmO8$", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`;[PmO8$");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("`;[PmO8$", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`;[PmO8$", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`;[PmO8$";
      stringArray0[1] = "!#Il~q&t(@F";
      stringArray0[2] = "`;[PmO8$";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("`;[PmO8$"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("`;[PmO8$"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string3 = StringUtils.join(iterator0, "`;[PmO8$");
      assertNotNull(string3);
      assertFalse(arrayDeque0.contains("`;[PmO8$"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.center("", 57, "4");
      assertNotNull(string0);
      assertEquals("444444444444444444444444444444444444444444444444444444444", string0);
      
      String string1 = StringUtils.capitalize("444444444444444444444444444444444444444444444444444444444");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("444444444444444444444444444444444444444444444444444444444", string1);
      
      String string2 = StringUtils.substringBetween("", (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "444444444444444444444444444444444444444444444444444444444", 463);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("4");
      assertFalse(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.chomp("444444444444444444444444444444444444444444444444444444444");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("444444444444444444444444444444444444444444444444444444444", string3);
      
      String string4 = StringUtils.stripToEmpty("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.indexOf((CharSequence) "444444444444444444444444444444444444444444444444444444444", (CharSequence) "");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string5 = StringUtils.mid((String) null, (-3716), (-480));
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array");
      assertNotNull(stringArray0);
      assertEquals(45, stringArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("444444444444444444444444444444444444444444444444444444444"));
      assertEquals(0, priorityQueue0.size());
      
      String string6 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertNotNull(string6);
      assertFalse(priorityQueue0.contains("444444444444444444444444444444444444444444444444444444444"));
      assertEquals(0, priorityQueue0.size());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(45, stringArray1.length);
      assertEquals(45, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string7 = StringUtils.swapCase("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.stripToEmpty("xAJX$");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertEquals("xAJX$", string8);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.leftPad("InvocationTargetException occurred", (-2270), 'U');
      assertNotNull(string0);
      assertEquals("InvocationTargetException occurred", string0);
      
      String string1 = StringUtils.repeat("InvocationTargetException occurred", "java.text.Normalizer", 2095);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "java.text.Normalizer", (CharSequence) "java.text.Normalizer", 16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace(", Length: 0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: 0", string2);
      
      String string3 = StringUtils.left("HD.,HZm?C$GDU3I", (-2270));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviate("", 16);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceOnce(", Length: 0", "InvocationTargetException occurred", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(", Length: 0", string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, 2);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("InvocationTargetException occurred");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string6 = StringUtils.substringAfter(", Length: 0", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'U', 'U'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", ", Length: 0", (-4055));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = StringUtils.abbreviate((String) null, 48);
      assertNull(string7);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "InvocationTargetException occurred", 2095, 256);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.upperCase("R");
      assertNotNull(string0);
      assertEquals("R", string0);
      
      boolean boolean0 = StringUtils.isAlpha("R");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", "l!)q%ebV,\"h?2k)", (-3169));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "l!)q%ebV,\"h?2k)", (CharSequence) "R");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.swapCase("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substring("R", (-3169));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("R", string2);
      
      String string3 = StringUtils.leftPad("[", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[", string3);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "*icd'>gF`-", (-1630));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'y';
      charArray0[2] = '@';
      charArray0[3] = '1';
      charArray0[4] = '^';
      charArray0[5] = 'a';
      charArray0[6] = ':';
      int int0 = StringUtils.indexOfAny((CharSequence) "[", charArray0);
      assertArrayEquals(new char[] {'d', 'y', '@', '1', '^', 'a', ':'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'a';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.removeEnd("l!)q%ebV,\"h?2k)", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("l!)q%ebV,\"h?2k)", string4);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("lg8&##;48H", 1);
      assertNotNull(string0);
      assertEquals("lg8&##;48H", string0);
      
      int int0 = StringUtils.countMatches("lg8&##;48H", "lg8&##;48H");
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lg8&##;48H";
      stringArray0[1] = "lg8&##;48H";
      String string1 = StringUtils.replaceEach("lg8&##;48H", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("lg8&##;48H", string1);
      
      int int1 = StringUtils.lastIndexOfAny("lg8&##;48H", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.isEmpty("lg8&##;48H");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "lg8&##;48H", 0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = StringUtils.lowerCase("lg8&##;48H", locale0);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("lg8&##;48h", string2);
      
      boolean boolean3 = StringUtils.containsWhitespace("lg8&##;48h");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((Iterable<?>) null, "stZ9RYK_*dt!B:`e8h");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("stZ9RYK_*dt!B:`e8h");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("stZ9RYK_*dt!B:`e8h", string4);
      
      boolean boolean4 = StringUtils.isAsciiPrintable("lg8&##;48H");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      String string5 = StringUtils.substring("', has a length less than 2", 0, (-1245));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      boolean boolean5 = StringUtils.isNotEmpty("lg8&##;48H");
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      
      String[] stringArray2 = StringUtils.split("lg8&##;48H");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean6 = StringUtils.equalsIgnoreCase("", "lg8&##;48H");
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      String string6 = StringUtils.trimToNull((String) null);
      assertNull(string6);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string7 = StringUtils.join(iterator0, "");
      assertNotNull(string7);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      boolean boolean7 = StringUtils.isAllUpperCase("lg8&##;48H");
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7);
      
      String string8 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string8);
      
      boolean boolean8 = StringUtils.containsIgnoreCase("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", "stZ9RYK_*dt!B:`e8h");
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "en(twdW3Wh[ 3]7";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("en(twdW3Wh[ 3]7");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "en(twdW3Wh[ 3]7", (CharSequence) "en(twdW3Wh[ 3]7");
      assertEquals((-1), int0);
      
      int int1 = 0;
      String string1 = StringUtils.join((Object[]) stringArray0, '%', 0, (-1262));
      assertNotNull(string1);
      assertEquals(11, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "en(twdW3Wh[ 3]7", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(15, int2);
      
      String string2 = StringUtils.center(")/LqJoL@", 15);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("   )/LqJoL@    ", string2);
      
      String string3 = StringUtils.left("cr{ ;3)zly05!@wn", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int3 = StringUtils.lastOrdinalIndexOf(")/LqJoL@", "", (-1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.chomp("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("\"E~V", (String) null);
      assertNotNull(string1);
      assertEquals("\"E~V", string1);
      
      String string2 = StringUtils.trimToEmpty(".$&D");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(".$&D", string2);
      
      String string3 = StringUtils.rightPad("rCz{{IX?U`.", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("rCz{{IX?U`.", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(".$&D");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("\"E~V"));
      assertEquals(0, priorityQueue0.size());
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, "rCz{{IX?U`.");
      assertNotNull(string4);
      assertFalse(priorityQueue0.contains("\"E~V"));
      assertEquals(0, priorityQueue0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.substringAfter("KvyS$Ssa", "KvyS$Ssa");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.overlay("", "", 256, 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "KvyS$Ssa";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "KvyS$Ssa";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'k');
      assertNotNull(string2);
      assertEquals(9, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "4>3";
      String string1 = StringUtils.strip("4>3");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("4>3", string1);
      
      String[] stringArray0 = StringUtils.split("4>3", "", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = "Z2UR^0'$[MCnK_7qJN";
      String string3 = StringUtils.upperCase("Z2UR^0'$[MCnK_7qJN");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Z2UR^0'$[MCNK_7QJN", string3);
      
      String string4 = StringUtils.trim("4>3");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("4>3", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, ':', 0, 0);
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("4>3"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        arrayList0.subList(0, (-1507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1507)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("trIE", "trIE", "trIE");
      assertNull(string1);
      
      String string2 = " ).G,";
      String string3 = StringUtils.rightPad((String) null, 2, " ).G,");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "trIE", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat('P', (-374));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 156, '!');
      assertNotNull(string0);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      String string2 = "$B";
      String string3 = "The String must not be empty";
      String string4 = StringUtils.substringBetween("$B", "The String must not be empty");
      assertNull(string4);
      
      String string5 = "H'yQxJJ\"Z?2<O^";
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0", "H'yQxJJ\"Z?2<O^", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string6);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", (CharSequence) "0", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("$B", "AWKAmEI.Twzz%y<+s,", 1363);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = "";
      String string8 = StringUtils.substringAfter("", "H'yQxJJ\"Z?2<O^");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      String string9 = StringUtils.replaceChars("%kn.s%AUXbVoK%", '!', '<');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertEquals("%kn.s%AUXbVoK%", string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "%kn.s%AUXbVoK%", (CharSequence) "", (-634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "";
      String string1 = "j&kEMbw9Bg@";
      String string2 = StringUtils.replaceChars("", "", "j&kEMbw9Bg@");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string3 = "G*?G<-2z";
      String string4 = StringUtils.trimToEmpty("G*?G<-2z");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("G*?G<-2z", string4);
      
      boolean boolean1 = StringUtils.endsWith("G*?G<-2z", "G*?G<-2z");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = "AI<l~HS6";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("AI<l~HS6", "G*?G<-2z");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.startsWith("", "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.repeat(" vs ", " vs ", (-209));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", (-1), "([Kg<");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("3ZX[AceUg&K");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("3ZX[AceUg&K", string2);
      
      String string3 = StringUtils.chomp("SP\"<<\"O6D3V+.{{");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("SP\"<<\"O6D3V+.{{", string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3ZX[AceUg&K";
      stringArray0[1] = " vs ";
      stringArray0[2] = " vs ";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals(3, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = "\\u000";
      String string6 = StringUtils.replaceChars("NFD", string5, "SP\"<<\"O6D3V+.{{");
      assertNotNull(string6);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("NFD", string6);
      
      String string7 = StringUtils.substringAfter("m.EG~4tU", "G?T");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string8 = StringUtils.normalizeSpace("NFD");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("NFD", string8);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("3ZX[AceUg&K");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.substringAfterLast(" vs ", "SP\"<<\"O6D3V+.{{");
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", string9);
      
      String[] stringArray1 = StringUtils.substringsBetween(" ", " ", "j");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.leftPad("h", (-1), "<K-$_H");
      assertNotNull(string0);
      assertEquals("h", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "h", charArray0);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = "\\u0";
      String string2 = StringUtils.substringBeforeLast(string1, (String) null);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\u0", string2);
      
      String string3 = StringUtils.substringBefore(string1, "^v(A{0");
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\\u0", string3);
      
      String string4 = StringUtils.trim("h");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("h", string4);
      
      String string5 = StringUtils.stripToNull("");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isNotEmpty("<K-$_H");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "8h>p(.EE|pW";
      String string1 = StringUtils.removeEnd("8h>p(.EE|pW", "8h>p(.EE|pW");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("", 1087, "8h>p(.EE|pW");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) string2);
      assertNotNull(charSequence0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charSequence0, 0, (-191));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 13, (-2666));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.lowerCase("$\"EuAz", locale0);
      assertNotNull(string1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals("$\"euaz", string1);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "$\"euaz";
      stringArray1[1] = "EL>Y_ 1Sa@P\"";
      stringArray1[2] = "";
      stringArray1[3] = "$\"EuAz";
      String string2 = StringUtils.replaceEachRepeatedly(":3_d9g,DCPq|lf", stringArray0, stringArray1);
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":3_d9g,DCPq|lf", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '3');
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'k';
      charArray0[2] = '^';
      charArray0[3] = '$';
      charArray0[4] = 'v';
      charArray0[5] = 'C';
      charArray0[6] = 'I';
      charArray0[7] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'U', 'k', '^', '$', 'v', 'C', 'I', '('}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("Uk^$vCI(", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charArray0.length);
      
      charBufferArray0[0] = charBuffer0;
      charBufferArray0[1] = charBuffer0;
      String string1 = StringUtils.join(charBufferArray0);
      assertNotNull(string1);
      assertEquals(2, charBufferArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Uk^$vCI(Uk^$vCI(", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.rightPad("...", 3430, '4');
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("LnL", '\"');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(string0, string0, 3430);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length("...");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string1 = StringUtils.substringBetween("NFD", string0, "NFD");
      assertNull(string1);
      
      String string2 = StringUtils.difference("LnL", "kQ9,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("kQ9,", string2);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(int0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.contains(int0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string3 = StringUtils.join(iterator0, "{z>@Ha{CVQ}");
      assertNotNull(string3);
      assertFalse(stack0.contains(int0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase((String) null, string0);
      assertNull(string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "NFD", (CharSequence) null, 3430);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.mid("K .xCO$m", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "K .xCO$m", (CharSequence) "K .xCO$m");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "K .xCO$m", (-2559));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.remove("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "K .xCO$m");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split(" in an array of ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string2 = StringUtils.removeStartIgnoreCase("K .xCO$m", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("K .xCO$m", string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1757));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.countMatches("", " in an array of ");
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string3 = StringUtils.stripStart("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.replaceOnce((String) null, "", "");
      assertNull(string4);
      
      String string5 = StringUtils.chomp("; or a Sun JVM: ", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("; or a Sun JVM: ", string5);
      
      String[] stringArray3 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray3);
      
      String string6 = StringUtils.removeStart("", "K .xCO$m");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      int int4 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", (-997));
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      String string7 = StringUtils.trim("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2484));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "SmEsx~J[TrB0()");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(">>Um#", ">>Um#", (-2484));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split(" vs ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string1 = StringUtils.chomp(">>Um#", "S%ki4g/]-a1Rq+A-sS");
      assertNotNull(string1);
      assertEquals(">>Um#", string1);
      
      int int1 = StringUtils.lastIndexOfAny(">>Um#", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToNull(">>Um#");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(">>Um#", string4);
      
      String string5 = StringUtils.repeat("sun.text.Normalizer is not available+bf0iz5mvw", 1085);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.difference("sun.text.Normalizer is not available+bf0iz5mvw", "SmEsx~J[TrB0()");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("SmEsx~J[TrB0()", string6);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertTrue(locale1.equals((Object)locale0));
      
      String string1 = StringUtils.replaceChars((String) null, "org.apache.commons.lang3.StringUtils", (String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("NFD", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Cannot store ");
      assertNotNull(string0);
      assertEquals("Cannotstore", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 5);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("Cannot store ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("E_P'?", '6');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("E_P'?", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2, 256);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("8b%Fg6f\"6", "8b%Fg6f\"6");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot store ", (CharSequence) "E_P'?");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.reverseDelimited((String) null, ';');
      assertNull(string3);
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      Locale locale1 = new Locale("^kD:[0gtHkC6OC", "E_P'?");
      assertNotNull(locale1);
      assertEquals("E_P'?", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("^kd:[0gthkc6oc", locale1.getLanguage());
      assertEquals("^kd:[0gthkc6oc_E_P'?", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale0.getDisplayScript(locale1);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("E_P'?", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("^kd:[0gthkc6oc", locale1.getLanguage());
      assertEquals("^kd:[0gthkc6oc_E_P'?", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("OmsjU;A*2A$S", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("omsju;a*2a$s", string5);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.center((String) null, (-262));
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 13);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.left((String) null, 8192);
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase("6");
      assertNotNull(string3);
      assertEquals("6", string3);
      
      String string4 = StringUtils.stripStart("", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.substring("", 2316, 117);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.swapCase("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = StringUtils.upperCase("y7:");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Y7:", string7);
      
      String string8 = StringUtils.abbreviateMiddle("NFD", "; or a Sun JVM: ", (-593));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("NFD", string8);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-1));
      assertEquals((-1), int0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertFalse(vector0.contains((-1)));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertFalse(vector0.contains((-1)));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToNull("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string1);
      
      String string2 = StringUtils.swapCase("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.aRRAYuTILS", string2);
      
      String string3 = StringUtils.repeat("org.apache.commons.lang3.ArrayUtils", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviateMiddle("T<yhYGe", "", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("T<yhYGe", string4);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.overlay("Arguments cannot both be null", "Arguments cannot both be null", 4096, (-314));
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Arguments cannot both be null", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "";
      stringArray0[2] = "Arguments cannot both be null";
      stringArray0[3] = "";
      stringArray0[4] = "Arguments cannot both be null";
      stringArray0[5] = "Arguments cannot both be null";
      stringArray0[6] = "Arguments cannot both be null";
      stringArray0[7] = "Arguments cannot both be null";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Arguments cannot both be null", 0, 0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(29, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(29, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(29, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      
      String string2 = StringUtils.replaceChars("0:D", '5', '=');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0:D", string2);
      
      String string3 = StringUtils.replace("B/wHT*[rT]^", "Arguments cannot both be null", "Arguments cannot both be null", 4096);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("B/wHT*[rT]^", string3);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int0 = StringUtils.ordinalIndexOf("Arguments cannot both be null", "Arguments cannot both be null", 4096);
      assertEquals((-1), int0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("Arguments cannot both be null"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("Arguments cannot both be null"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string5 = StringUtils.join(iterator0, "<jn2]+9v=*Y");
      assertNotNull(string5);
      assertFalse(arrayDeque0.contains("Arguments cannot both be null"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.removeStartIgnoreCase("", "d%20vG?)8ft?oc:QQ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.center("", (-77), 'w');
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBefore((String) null, "");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase(charSequenceArray0[2], charSequenceArray0[5]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.chomp("", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.isAlpha(charSequenceArray0[6]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], 4096, 4096);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("M[#[[");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.repeat((String) null, (-2847));
      assertNull(string4);
      
      boolean boolean3 = StringUtils.equals(charSequenceArray0[0], (CharSequence) null);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, '8', 4096, (-2446));
      assertNotNull(string5);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.substringBetween("", (String) null);
      assertNull(string6);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean4 = StringUtils.isNumeric("");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      HashSet<Object> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Object>((-369), 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -369
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.repeat("+s:", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "+s:", 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null, "", Integer.MAX_VALUE, 0);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 3809);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.replaceChars("V", 'U', 'K');
      assertNotNull(string0);
      assertEquals("V", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "V", (CharSequence) "V");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "V", (CharSequence) "V");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "V", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.rightPad("V", 0, (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("V", string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "V", (CharSequence) "V", 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("V", "Strings must not be null", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("V", string3);
      
      String string4 = StringUtils.substringBeforeLast("V", ";(j#4JXNUz?vk3.t2");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("V", string4);
      
      String string5 = StringUtils.substringAfterLast((String) null, "n{Wo(k_N\"fBGh,ls*");
      assertNull(string5);
      
      int int3 = StringUtils.indexOf((CharSequence) null, (CharSequence) "V");
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.defaultString("elDq# !hTb");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("elDq# !hTb", string6);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringAfter("+W'7e", "$y$wIb,n<M");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      
      String string1 = StringUtils.lowerCase("$y$wIb,n<M", locale0);
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertEquals("$y$wib,n<m", string1);
      
      boolean boolean1 = StringUtils.isNotEmpty("+W'7e");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeEndIgnoreCase("/NZF=:2<<\"", "/NZF=:2<<\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.normalizeSpace(";gr");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(";gr", string3);
      
      String string4 = StringUtils.reverseDelimited(";gr", '~');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(";gr", string4);
      
      boolean boolean2 = StringUtils.startsWith(";gr", "/NZF=:2<<\"");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(587);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedHashSet0);
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string5 = StringUtils.defaultString("", "dHx/NXTwnRp-");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.chop("$y$wib,n<m");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("$y$wib,n<", string6);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1), 'm');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.mid("", 0, 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.replace("", "G\"", "]a/9S,W^5 a3i%", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = 'd';
      charArray0[2] = 'P';
      charArray0[3] = 'C';
      charArray0[4] = 'k';
      charArray0[5] = 'R';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'4', 'd', 'P', 'C', 'k', 'R'}, charArray0);
      assertEquals("4dPCkR", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) charBuffer0);
      assertArrayEquals(new char[] {'4', 'd', 'P', 'C', 'k', 'R'}, charArray0);
      assertEquals("4dPCkR", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "]a/9S,W^5 a3i%";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substring("tuV?;1L@YWxG2", 0);
      assertNotNull(string0);
      assertEquals("tuV?;1L@YWxG2", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "tuV?;1L@YWxG2", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "tuV?;1L@YWxG2", (CharSequence) "tuV?;1L@YWxG2");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "tuV?;1L@YWxG2", (CharSequence) "tuV?;1L@YWxG2", 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string1 = StringUtils.remove("tuV?;1L@YWxG2", "tuV?;1L@YWxG2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "tuV?;1L@YWxG2");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'K';
      charArray0[2] = 'e';
      charArray0[3] = 'W';
      int int3 = StringUtils.indexOfAny((CharSequence) "tuV?;1L@YWxG2", charArray0);
      assertArrayEquals(new char[] {'R', 'K', 'e', 'W'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(9, int3);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.strip("GtmGTkXj");
      assertNotNull(string0);
      assertEquals("GtmGTkXj", string0);
      
      String string1 = StringUtils.replaceChars((String) null, 's', 's');
      assertNull(string1);
      
      String string2 = StringUtils.substring("", (-1428), 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substring(" in an array of ", (-106));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" in an array of ", string3);
      
      String string4 = StringUtils.repeat("", (-1628));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.leftPad(" in an array of ", (-106), '>');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" in an array of ", string5);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.trimToEmpty("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.swapCase("GtmGTkXj");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("gTMgtKxJ", string7);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      try { 
        StringUtils.toString(byteArray0, "gTMg\tKxJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.remove("Minimum abbreviation width with offset is 7", "M.7pnb]");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is 7", string0);
      
      int int0 = StringUtils.ordinalIndexOf("M.7pnb]", "Minimum abbreviation width with offset is 7", (-2723));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Minimum abbreviation width with offset is 7";
      objectArray0[1] = (Object) "M.7pnb]";
      objectArray0[2] = (Object) "M.7pnb]";
      objectArray0[3] = (Object) "Minimum abbreviation width with offset is 7";
      objectArray0[4] = (Object) "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.join(objectArray0, 'X');
      assertNotNull(string1);
      assertEquals(5, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7XM.7pnb]XM.7pnb]XMinimum abbreviation width with offset is 7XMinimum abbreviation width with offset is 7", string1);
      
      String string2 = StringUtils.removeEnd("", "Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("Minimum abbreviation width with offset is 7XM.7pnb]XM.7pnb]XMinimum abbreviation width with offset is 7XMinimum abbreviation width with offset is 7", 16, 'p');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7XM.7pnb]XM.7pnb]XMinimum abbreviation width with offset is 7XMinimum abbreviation width with offset is 7", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("XX", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charArray0.length);
      
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is 7";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is 7";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is 7";
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width with offset is 7XM.7pnb]XM.7pnb]XMinimum abbreviation width with offset is 7XMinimum abbreviation width with offset is 7", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-2289), "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", ":");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceEach(":", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":", string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      String string3 = StringUtils.join(iterator0, ')');
      assertNotNull(string3);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replace("XGY<~]Py^S/SZr", "q[V,\"m", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("XGY<~]Py^S/SZr", string4);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.repeat("O>R_=_;Y@mVA(E", (-188));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", (-188));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat('9', (-1545));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("*V");
      assertNotNull(string0);
      assertEquals("*V", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "*V", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "*V", (CharSequence) "*V");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("*V");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.startsWith("*V", "@JH@");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = StringUtils.center("@JH@", 10, "*V");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*V*@JH@*V*", string1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean4 = StringUtils.isEmpty(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string2 = StringUtils.stripAccents("*V");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("*V", string2);
      
      String string3 = StringUtils.substringBeforeLast("@JH@", "*V");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("@JH@", string3);
      
      boolean boolean5 = StringUtils.isBlank("@JH@");
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string4 = StringUtils.replaceEach("*V", (String[]) null, (String[]) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("*V", string4);
      
      boolean boolean6 = StringUtils.isAllUpperCase("*V");
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "E1){VKi=[~{)");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "E1){VKi=[~{)";
      stringArray0[1] = "";
      stringArray0[2] = "E1){VKi=[~{)";
      stringArray0[3] = "=r(%>wwCFTF=0U";
      stringArray0[4] = "";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("E1){VKi=[~{)", "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.overlay("E1){VKi=[~{)", "E1){VKi=[~{)", 0, 3390);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("E1){VKi=[~{)", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "E1){VKi=[~{)", 0, 32);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "@Qn(k@", 0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("E1){VKi=[~{)", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "E1){VKi=[~{)");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.repeat("eGt*b$QI8?\"y2ThQ]", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "?";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray2);
      
      int int0 = StringUtils.ordinalIndexOf("?", "", 90);
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("", (-2912), "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "\\u";
      String[] stringArray0 = StringUtils.split(string1, 'C');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\u", string2);
      
      boolean boolean0 = StringUtils.startsWithAny(string2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0);
      
      String string3 = StringUtils.swapCase("The Character must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("tHE cHARACTER MUST NOT BE NULL", string3);
      
      String string4 = StringUtils.chomp(string2, "");
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\\u", string4);
      
      String string5 = StringUtils.trim("^K6+6F=ez-JsEx6c!");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("^K6+6F=ez-JsEx6c!", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string1, 16);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertEquals(2, int0);
      
      String string6 = StringUtils.replaceOnce("Search and Replace array lengths don't match: ", "", "^K6+6F=ez-JsEx6c!");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Search and Replace array lengths don't match: ", string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.removeEndIgnoreCase(string4, "eX5A[>%C8Kn=k]");
      assertNotNull(string7);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string4.equals((Object)string6));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertEquals("\\u", string7);
      
      String string8 = StringUtils.chop("b;");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("b", string8);
      
      String string9 = StringUtils.join((Object[]) stringArray0, "^K6+6F=ez-JsEx6c!", 0, 0);
      assertNotNull(string9);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertTrue(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertEquals("", string9);
      
      String string10 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string10);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertTrue(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertEquals("\\u", string10);
      
      String string11 = StringUtils.substringBefore("Array element ", "");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertEquals("", string11);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "@");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean2 = StringUtils.endsWith("", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substring("", 3559, 1616);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, " :");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "]cM[6O\"0";
      stringArray0[7] = "Threshold must not be negative";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("]cM[6O\"0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("gN&{,/q*B\"3!YfVct(", "VnFgL,a-=PM");
      assertNotNull(string0);
      assertEquals("gN&{,/q*B\"3!YfVct(", string0);
      
      String string1 = StringUtils.substring("gN&{,/q*B\"3!YfVct(", 5624, 5624);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("VnFgL,a-=PM", "", 90, 5624);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("VnFgL,a-=PM", string2);
      
      String string3 = StringUtils.chop("rSlbs+,W*N");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("rSlbs+,W*", string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("rSlbs+,W*", "gN&{,/q*B\"3!YfVct(");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "rSlbs+,W*", (CharSequence) "rSlbs+,W*", 90);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.chomp("", (String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "rSlbs+,W*N", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String string5 = "5.@N4S";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "5.@N4S");
      assertNull(stringArray0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "VnFgL,a-=PM", 90);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("rSlbs+,W*", "");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      try { 
        StringUtils.toString(byteArray0, "gN&{,/q*B\"3!YfVct(");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.substringBetween((String) null, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      char char0 = 'z';
      String string2 = StringUtils.reverseDelimited((String) null, 'z');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("w].gnH|", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("w].gnH|", string3);
      
      String string4 = StringUtils.difference("The character must not be null", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("The character must not be null", string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase("The character must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase((CharSequence) null, "w].gnH|");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = "\\u000";
      String string6 = StringUtils.upperCase(string5);
      assertNotNull(string6);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\\U000", string6);
      
      int int0 = StringUtils.ordinalIndexOf("w].gnH|", (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, (-1), (-2118));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.upperCase("", locale0);
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-985));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("', is neither of type Map.Entry nor an Array", "FZKKYQaD");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "', is neither of type Map.Entry nor an Array";
      objectArray0[1] = (Object) "FZKKYQaD";
      objectArray0[2] = (Object) "FZKKYQaD";
      String string1 = StringUtils.join(objectArray0, 'C');
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an ArrayCFZKKYQaDCFZKKYQaD", string1);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.chomp("', is neither of type Map.Entry nor an Array", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("', is neither of type Map.Entry nor an Array");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("', is neither of type Map.Entry nor an ArrayCFZKKYQaDCFZKKYQaD", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.leftPad("jmKK?+b,)!O", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("jmKK?+b,)!O", string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("jmKK?+b,)!O");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "FZKKYQaD", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.endsWith("", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.containsWhitespace("', is neither of type Map.Entry nor an Array");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isBlank("', is neither of type Map.Entry nor an Array");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.startsWith("jmKK?+b,)!O", (CharSequence) null);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String string6 = StringUtils.uncapitalize(">|U>C`Sl7/Z");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(">|U>C`Sl7/Z", string6);
      
      String string7 = StringUtils.deleteWhitespace("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'z';
      charArray0[2] = 'C';
      boolean boolean6 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'C', 'z', 'C'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 64);
      assertNotNull(string0);
      assertEquals("                                                                ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "                                                                ", (CharSequence) "                                                                ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("S*mC", 64);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("S*mC", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "                                                                ", 2749);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      boolean boolean0 = stack0.add((Object) integer0);
      assertTrue(stack0.contains(Integer.MAX_VALUE));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[2147483647]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) stack0, "WHu-'I|;vxdN");
      assertNotNull(string0);
      assertTrue(stack0.contains(Integer.MAX_VALUE));
      assertFalse(stack0.contains("WHu-'I|;vxdN"));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[2147483647]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String string1 = StringUtils.join((Iterator<?>) null, "WHu-'I|;vxdN");
      assertNull(string1);
      
      String string2 = StringUtils.substringBeforeLast((String) null, "java.lang.Integer@0000000001");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<LJf-<p'c[jG", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.remove((String) null, '~');
      assertNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.join((Iterator<?>) null, "CV-qOcIV1>'8E9%");
      assertNull(string4);
      
      String string5 = StringUtils.repeat('0', 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      boolean boolean1 = stack0.add((Object) integer0);
      assertTrue(stack0.contains(Integer.MAX_VALUE));
      assertFalse(stack0.contains("java.lang.Integer@0000000001"));
      assertFalse(stack0.isEmpty());
      assertEquals("[2147483647, 2147483647]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.defaultString((String) null, "m9G\"BSP`_IQ1");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("m9G\"BSP`_IQ1", string6);
      
      String string7 = StringUtils.stripToNull((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.replaceOnce("", "j7)*@new9&DAC-ekb8W", "m9G\"BSP`_IQ1");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      
      String string9 = StringUtils.chomp((String) null, (String) null);
      assertNull(string9);
      
      String string10 = StringUtils.replaceOnce((String) null, "The Character must not be null", (String) null);
      assertNull(string10);
      
      String string11 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1), '0');
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertEquals("Search and Replace array lengths don't match: ", string11);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, '');
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "m9G\"BSP`_IQ1", (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) null, (CharSequence) "<LJf-<p'c[jG");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.endsWithIgnoreCase((CharSequence) null, "CV-qOcIV1>'8E9%");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.repeat("I{s", 16);
      assertNotNull(string0);
      assertEquals("I{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{s", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "I{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{s", (CharSequence) "I{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{s");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad((String) null, (-2745));
      assertNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "I{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{s");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "I{s", (CharSequence) "I{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{sI{s", 32);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase((CharSequence) null, "I{s");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = "";
      String string3 = StringUtils.substring("", (-1), 48);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripEnd("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = "=-,_eC%Z~X!cep<3";
      String string6 = StringUtils.reverse("=-,_eC%Z~X!cep<3");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("3<pec!X~Z%Ce_,-=", string6);
      
      String string7 = StringUtils.stripToNull("");
      assertNull(string7);
      
      String string8 = StringUtils.center("", 48);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("                                                ", string8);
      
      String string9 = "<m(ro>)wKc";
      String string10 = StringUtils.rightPad("<m(ro>)wKc", 32, (String) null);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertEquals("<m(ro>)wKc                      ", string10);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "<m(ro>)wKc                      ", (CharSequence) null, 1531);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = " >>`";
      String string1 = StringUtils.join((Object[]) null, " >>`");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) " >>`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) " >>`", (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1));
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.leftPad("L0$", (-1));
      assertNotNull(string2);
      assertEquals("L0$", string2);
      
      Locale locale0 = new Locale("0)7d@9 2zNlqO{F");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      
      Locale locale2 = Locale.FRANCE;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      Locale locale3 = Locale.TAIWAN;
      assertNotNull(locale3);
      assertSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("TW", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("zh", locale3.getLanguage());
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      
      String string4 = locale2.getDisplayName(locale3);
      assertNotNull(string4);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("TW", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("zh", locale3.getLanguage());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\u6CD5\u6587 (\u6CD5\u570B)", string4);
      
      String string5 = locale2.getDisplayVariant(locale1);
      assertNotNull(string5);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = locale0.getDisplayName(locale2);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.upperCase("L0$", locale0);
      assertNotNull(string7);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("L0$", string7);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "L0$", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.upperCase("}5Ea)^AavF^U}j]O", locale0);
      assertNotNull(string8);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertEquals("}5EA)^AAVF^U}J]O", string8);
      
      String string9 = StringUtils.replace("Strings must not be null", "?p9j*K", "s+");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertEquals("Strings must not be null", string9);
      
      boolean boolean1 = StringUtils.isAlpha("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string10 = StringUtils.trimToEmpty("L0$");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertEquals("L0$", string10);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.substring("ECP`FJm5-&", 323);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference((String) null, "=\"wF?Y");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("=\"wF?Y", string1);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(boolean0);
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("United Kingdom", string2);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotNull(stringArray1);
      assertEquals(188, stringArray1.length);
      
      String string3 = locale0.getDisplayCountry();
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("United Kingdom", string3);
      
      String string4 = locale0.getScript();
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String[] stringArray2 = Locale.getISOCountries();
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(250, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string5 = StringUtils.lowerCase("ECP`FJm5-&", locale0);
      assertNotNull(string5);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ecp`fjm5-&", string5);
      
      String string6 = StringUtils.center("=\"wF?Y", (-1177), '|');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("=\"wF?Y", string6);
      
      int int0 = StringUtils.lastIndexOfAny("=\"wF?Y", stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertEquals((-1), int0);
      
      String string7 = StringUtils.removeEnd("Strings must not be null", "=\"wF?Y");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("Strings must not be null", string7);
      
      String[] stringArray3 = StringUtils.split("=\"wF?Y", " vs ");
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "Strings must not be null");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("=\"wF?Y", "=\"wF?Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.removeEndIgnoreCase(" vs ", "=\"wF?Y");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals(" vs ", string8);
      
      String string9 = StringUtils.reverseDelimited("United Kingdom", '|');
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertEquals("United Kingdom", string9);
      
      boolean boolean2 = StringUtils.isAlphanumeric("=\"wF?Y");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray4 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray4);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray1);
      assertEquals(0, stringArray4.length);
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      
      String string10 = StringUtils.leftPad("United Kingdom", (-793));
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertEquals("United Kingdom", string10);
      
      String[] stringArray5 = StringUtils.splitByWholeSeparator("Strings must not be null", "United Kingdom", (-2495));
      assertNotNull(stringArray5);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray1);
      assertNotSame(stringArray5, stringArray2);
      assertEquals(1, stringArray5.length);
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Strings must not be null", (CharSequence) "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string11 = StringUtils.abbreviateMiddle(" vs ", "Strings must not be null", (-1177));
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertEquals(" vs ", string11);
      
      String[] stringArray6 = StringUtils.stripAll(stringArray3);
      assertNotNull(stringArray6);
      assertNotSame(stringArray6, stringArray1);
      assertNotSame(stringArray6, stringArray2);
      assertNotSame(stringArray6, stringArray5);
      assertNotSame(stringArray6, stringArray3);
      assertNotSame(stringArray6, stringArray4);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray6);
      assertNotSame(stringArray3, stringArray5);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray6.length);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray4));
      assertFalse(stringArray3.equals((Object)stringArray5));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      int int2 = StringUtils.length(" vs ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 2);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.removeEnd((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("In0bp:p\"zg|8/;r=u", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("In0bp:p\"zg|8/;r=u", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 0);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("Y", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charArray0.length);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) null);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("Y", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charArray0.length);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "", (-3715), 0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.split("", "A#u#6uxk9s_n K28'E");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.rightPad("The Character must not be null", 65, "The Character must not be null");
      assertNotNull(string0);
      assertEquals("The Character must not be nullThe Character must not be nullThe C", string0);
      
      boolean boolean0 = StringUtils.isEmpty("The Character must not be nullThe Character must not be nullThe C");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Character must not be null");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be nullThe Character must not be nullThe C");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replace("{SVUl>Kh,s=r", "`h", "Minimum abbreviation width is 4");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{SVUl>Kh,s=r", string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is 4", (CharSequence) "The Character must not be null");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.repeat("`h", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd((String) null, "pb");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "{SVUl>Kh,s=r", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replaceEachRepeatedly("Minimum abbreviation width is 4", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals(6, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Minimum abbreviation width is 4", string4);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("Minimum abbreviation width is 4", (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("ab&Ox<ZA:/<9n>");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.center("", 65);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("                                                                 ", string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("MH", '\\');
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.defaultString("tfVvSk6", "tfVvSk6");
      assertNotNull(string0);
      assertEquals("tfVvSk6", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "tfVvSk6", (CharSequence) "tfVvSk6");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trim("|w,3");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|w,3", string1);
      
      String string2 = StringUtils.rightPad("| e,P9b", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("| e,P9b", string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|w,3";
      stringArray0[1] = "|w,3";
      stringArray0[2] = "|w,3";
      String string3 = StringUtils.replaceEachRepeatedly("tfVvSk6", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(3, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("tfVvSk6", string3);
      
      String string4 = StringUtils.removeEnd("tL^gwMXm8", "|w,3");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("tL^gwMXm8", string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "|w,3", (CharSequence) "| e,P9b");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "+Bf0iZ5MVW";
      String string1 = StringUtils.lowerCase("+Bf0iZ5MVW");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("+bf0iz5mvw", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+bf0iz5mvw", (CharSequence) "+bf0iz5mvw", (-1644));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches("+Bf0iZ5MVW", "+bf0iz5mvw");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.chomp("sun.text.Normalizer is not available", "+bf0iz5mvw");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("sun.text.Normalizer is not available", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+Bf0iZ5MVW", "+Bf0iZ5MVW");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("sun.text.Normalizer is not available");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeStartIgnoreCase("org.apache.commons.lang3.ArrayUtils", "sun.text.Normalizer is not available");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string3);
      
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("+bf0iz5mvw", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "", 256);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.substringAfter("", "java.text.Normalizer");
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "java.text.Normalizer");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.right("", 256);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("E.t<O", 256, 'd');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("E.t<Oddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string4);
      
      String string5 = StringUtils.stripToNull("E.t<Oddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("E.t<Oddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string5);
      
      boolean boolean1 = StringUtils.endsWith("E.t<Oddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", "E.t<Oddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = '\"';
      charArray0[7] = 'd';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd', 'd', '\"', 'd'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "Ly_!a!U<\"#|o";
      String string1 = StringUtils.chomp("Ly_!a!U<\"#|o");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Ly_!a!U<\"#|o", string1);
      
      String string2 = StringUtils.defaultIfEmpty("Ly_!a!U<\"#|o", "a.$!45T8R");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Ly_!a!U<\"#|o", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Ly_!a!U<\"#|o", "C0TkOSJD,FG$#g-m*`");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Ly_!a!U<\"#|o", "Ly_!a!U<\"#|o");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Ly_!a!U<\"#|o", "C0TkOSJD,FG$#g-m*`");
      assertFalse(boolean0);
      
      String string3 = "m&D\\6l|RZylZ,k$p";
      String string4 = StringUtils.substring("m&D\u0006l|RZylZ,k$p", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("m&D\u0006l|RZylZ,k$p", string4);
      
      String string5 = "=fS/>*3)!w";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("=fS/>*3)!w", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.stripToNull("org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("&B$~jf5Am", (-1095), 'F');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&B$~jf5Am", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("&B$~jf5Am");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("", "x3[uC_^N/{u$i8{P!u");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.normalizeSpace("lkrlysWU^Zd");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("lkrlysWU^Zd", string3);
      
      String string4 = StringUtils.replaceOnce("", (String) null, "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 3115, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.strip("&ro", " in an array of ");
      assertNotNull(string0);
      assertEquals("&", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " in an array of ";
      charSequenceArray0[1] = (CharSequence) "&";
      charSequenceArray0[2] = (CharSequence) " in an array of ";
      charSequenceArray0[3] = (CharSequence) "&ro";
      charSequenceArray0[4] = (CharSequence) "&ro";
      int int0 = StringUtils.lastIndexOfAny(" in an array of ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " in an array of ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'V';
      charArray0[2] = '$';
      charArray0[3] = 'z';
      charArray0[4] = '_';
      charArray0[5] = '5';
      charArray0[6] = '+';
      charArray0[7] = 'E';
      charArray0[8] = '<';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "&", charArray0);
      assertArrayEquals(new char[] {'4', 'V', '$', 'z', '_', '5', '+', 'E', '<'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'O');
      assertNotNull(string0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = "\\u000";
      String string2 = StringUtils.replaceChars("", "Is", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Is";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Is";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) string1;
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.difference("*bNhe8F", "NFD");
      assertNotNull(string0);
      assertEquals("NFD", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "NFD", (CharSequence) "*bNhe8F", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("NFD", "NFD");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "*bNhe8F";
      charSequenceArray0[1] = (CharSequence) "NFD";
      charSequenceArray0[2] = (CharSequence) "*bNhe8F";
      charSequenceArray0[3] = (CharSequence) "*bNhe8F";
      charSequenceArray0[4] = (CharSequence) "*bNhe8F";
      int int1 = StringUtils.indexOfAny((CharSequence) "NFD", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.substring("tY5", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("NFD", "NFD", 0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NFDNFD", string2);
      
      String string3 = StringUtils.defaultString("NFDNFD");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("NFDNFD", string3);
      
      String string4 = StringUtils.right("", (-1649));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.swapCase("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "tY5", Integer.MAX_VALUE);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.removeEnd("The String must not be empty", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("The String must not be empty", string6);
      
      String[] stringArray0 = StringUtils.split("NFD", 'm');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(":", "Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals(":", string0);
      
      String string1 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", "\r *13=oi?~_", 3825);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("E{_ ", "\r *13=oi?~_", 3825, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r *13=oi?~_", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ":";
      boolean boolean0 = StringUtils.endsWithAny("\r *13=oi?~_", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ":", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.repeat("\r *13=oi?~_", "2_n'Vw", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.strip("Arguments cannot both be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Arguments cannot both be null", string4);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.replace("", "", "7+", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace(":");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.defaultString("xaB}BOo], Jex<zi", "})SGo");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("xaB}BOo], Jex<zi", string6);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 754);
      assertNull(string0);
      
      String string1 = StringUtils.remove("CY\"1z(nX*iI@:", (String) null);
      assertNotNull(string1);
      assertEquals("CY\"1z(nX*iI@:", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("gQ[pan#ITis", "", 2623);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 128);
      assertNotNull(string0);
      assertEquals("                                                                                                                                ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "                                                                                                                                ", (CharSequence) "                                                                                                                                ");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "", "");
      assertNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "                                                                                                                                ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '}';
      charArray0[2] = '\"';
      charArray0[3] = 'P';
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[2], charArray0);
      assertArrayEquals(new char[] {'&', '}', '\"', 'P'}, charArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.reverse("4edpq*l2+Kt@O%WJK");
      assertNotNull(string0);
      assertEquals("KJW%O@tK+2l*qpde4", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "4edpq*l2+Kt@O%WJK", (CharSequence) "4edpq*l2+Kt@O%WJK");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'b';
      charArray0[2] = 'u';
      charArray0[3] = '-';
      charArray0[4] = 'u';
      charArray0[5] = '!';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "KJW%O@tK+2l*qpde4", charArray0);
      assertArrayEquals(new char[] {'j', 'b', 'u', '-', 'u', '!'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "4edpq*l2+Kt@O%WJK", 4096);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '-';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "KJW%O@tK+2l*qpde4", charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "KJW%O@tK+2l*qpde4", (CharSequence) "KJW%O@tK+2l*qpde4");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("r9v,V^?& 5+{ i", "");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.stripEnd("KJW%O@tK+2l*qpde4", "4edpq*l2+Kt@O%WJK");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.substring("%a6amr<q{P0ES?W,Bk", (-2687), (-2687));
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '3';
      charArray0[2] = 'B';
      charArray0[3] = '\\';
      charArray0[4] = '~';
      charArray0[5] = 'Z';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "%a6amr<q{P0ES?W,Bk", charArray0);
      assertArrayEquals(new char[] {'`', '3', 'B', '\\', '~', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.center("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("", "Minimum abbreviation width is 4", 1106, 1106);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is 4", string2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0, "I[");
      assertNull(string0);
      
      String string1 = StringUtils.strip("", " in an array of ");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceOnce("", "J>8xxG6sqHZ", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("2VvSxU", "U<>w-", "2VvSxU");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("2VvSxU", string3);
      
      String string4 = StringUtils.center((String) null, 0, 'V');
      assertNull(string4);
      
      String string5 = StringUtils.swapCase((String) null);
      assertNull(string5);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string2));
      assertEquals(0, priorityQueue0.size());
      
      String string6 = StringUtils.join((Iterable<?>) priorityQueue0, 's');
      assertNotNull(string6);
      assertFalse(priorityQueue0.contains(string2));
      assertEquals(0, priorityQueue0.size());
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((Iterable<?>) priorityQueue0, 'O');
      assertNotNull(string7);
      assertFalse(priorityQueue0.contains(string2));
      assertEquals(0, priorityQueue0.size());
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      String string8 = StringUtils.substringBefore((String) null, "L&1\"c");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 3214);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      String string1 = StringUtils.join(integerArray0);
      assertNotNull(string1);
      assertEquals(0, integerArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string4);
      
      String string5 = StringUtils.substringBefore("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceChars("", "Search and Replace array lengths don't match: ", "~ui3b|e\"s>");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringAfter("", "-xr'3");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = StringUtils.leftPad((String) null, 0, '4');
      assertNull(string8);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("*V");
      assertNotNull(string0);
      assertEquals("*V", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "*V", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("@JH@", "*V");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "*V", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("*V");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.startsWith("", "@JH@");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlpha("");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string2 = StringUtils.swapCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "", 3298);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 128);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.center("", 128);
      assertNotNull(string0);
      assertEquals("                                                                                                                                ", string0);
      
      boolean boolean2 = StringUtils.endsWith("                                                                                                                                ", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string1 = StringUtils.join((Iterable<?>) vector0, '<');
      assertNotNull(string1);
      assertFalse(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.center("s1Fc[0*J&@6vCI", (-1426), '5');
      assertNotNull(string0);
      assertEquals("s1Fc[0*J&@6vCI", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "s1Fc[0*J&@6vCI", (CharSequence) "s1Fc[0*J&@6vCI");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.rightPad("W", (-1789), "W");
      assertNotNull(string0);
      assertEquals("W", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.defaultString("Array element ", "Array element ");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Array element ", (CharSequence) "Array element ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Array element ", "Array element ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("Array element ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("array element ", string1);
      
      String string2 = StringUtils.rightPad("Array element ", 16, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Array element   ", string2);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviate("Array element ", 0, 535);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Array element ", string3);
      
      String string4 = StringUtils.trim("+nWrcKJs'S9{B9xJr");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("+nWrcKJs'S9{B9xJr", string4);
      
      int int1 = StringUtils.lastOrdinalIndexOf("+nWrcKJs'S9{B9xJr", "Array element ", 792);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWith(charSequenceArray0[2], charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '(');
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("(((", string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ';');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.center("", 782);
      assertNotNull(string0);
      assertEqualsstring0);
      
      String string1 = StringUtils.removeEndIgnoreCasemQ^zjzmK(Ki)");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.abbreviate("|hac:cA74j", 3371);
      assertNotNull(string0);
      assertEquals("|hac:cA74j", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "|hac:cA74j", "|hac:cA74j");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("x", 3371);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'e';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "|hac:cA74j", charArray0);
      assertArrayEquals(new char[] {'i', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.substring("|hac:cA74j", 1488);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllLowerCase("|hac:cA74j");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.remove("|hac:cA74j", '2');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|hac:cA74j", string3);
      
      String string4 = StringUtils.capitalize("|hac:cA74j");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("|hac:cA74j", string4);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "idrqM@9`JJr", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace("", "idrqM@9`JJr", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty("p{InCombiningDiacriticalMarks}+", "Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = 972;
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>(972, 972);
      assertNotNull(vector0);
      assertEquals(972, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string0 = "";
      String string1 = StringUtils.join((Iterable<?>) vector0, "");
      assertNotNull(string1);
      assertEquals(972, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("", string1);
      
      String string2 = "";
      String string3 = StringUtils.leftPad("", (-693), "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("lYc", 0, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lYc", string1);
      
      String string2 = StringUtils.abbreviateMiddle("-[X", "ME~%hs0YI{&S&w\"YcR", 256);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-[X", string2);
      
      String string3 = StringUtils.deleteWhitespace("Re<Syn?x>~02Gpvyl");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Re<Syn?x>~02Gpvyl", string3);
      
      String string4 = StringUtils.strip("ME~%hs0YI{&S&w\"YcR");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ME~%hs0YI{&S&w\"YcR", string4);
      
      boolean boolean0 = StringUtils.isNumeric("Re<Syn?x>~02Gpvyl");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Re<Syn?x>~02Gpvyl", "Re<Syn?x>~02Gpvyl");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      int int0 = StringUtils.indexOfAny((CharSequence) "lYc", charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "lYc", "sun.text.Normalizer is not available");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-232));
      assertNotNull(integer0);
      assertEquals((-232), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 90;
      Integer integer1 = new Integer(90);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2452));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2452), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(90);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(90, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertEquals(90, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertEquals(90, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertNotNull(integer7);
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertEquals(90, (int)integer7);
      
      integerArray0[7] = integer7;
      String string1 = StringUtils.join(integerArray0);
      assertNotNull(string1);
      assertEquals(8, integerArray0.length);
      assertEquals("-23290-2452909009090", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'j', (-1805), 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1805
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 3042);
      assertEquals((-1), int0);
      
      String string2 = "\\u";
      String string3 = StringUtils.uncapitalize(string2);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertEquals("\\u", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string3, (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Cm/{Vt[FGu*'u", "[H0Ka");
      assertNotNull(string0);
      assertEquals("Cm/{Vt[FGu*'u", string0);
      
      String string1 = StringUtils.repeat("", (-944));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cm/{Vt[FGu*'u", (CharSequence) "");
      assertEquals(13, int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Cm/{Vt[FGu*'u";
      objectArray0[1] = (Object) "Cm/{Vt[FGu*'u";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, "", 13, (-944));
      assertNotNull(string2);
      assertEquals(3, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultIfBlank("Jus", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Jus", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, "[H0Ka");
      assertNull(string4);
      
      String string5 = StringUtils.strip("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.join((Iterator<?>) null, ']');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.mid("T'Sv($GMuQluqoa", 10, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "T'Sv($GMuQluqoa", 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.startsWith("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.stripEnd("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-110);
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-42), (byte)48, (byte)3, (byte) (-91), (byte) (-110)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("\uFFFD\uFFFD0\u0003\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Array element ";
      stringArray0[1] = "Array element ";
      stringArray0[2] = "Array element ";
      stringArray0[3] = "Array element ";
      stringArray0[4] = "Array element ";
      String string0 = StringUtils.replaceEach("Array element ", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("Array element ", string0);
      
      String[] stringArray1 = StringUtils.split("", "", 3);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.replaceOnce("5$N$@8:@~", "Array element ", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5$N$@8:@~", string1);
      
      String string2 = StringUtils.stripStart("5$N$@8:@~", "Array element ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("5$N$@8:@~", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Array element ", (CharSequence) "Array element ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.swapCase("`");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`", string3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 791, 'w');
      assertNotNull(string0);
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.rightPad("", 791);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEqualsstring2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.difference("Array and element cannot both be null", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Array and element cannot both be null";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string1 = StringUtils.join(objectArray0, ":Uhxdjbv", (-2381), (-2381));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripToEmpty("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string3);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)108;
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("l", string1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.substringBetween("7x[6{#|", "7x[6{#|", ".k{}IK,BP_");
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.replace("7x[6{#|", "7x[6{#|", (String) null, 450);
      assertNotNull(string2);
      assertEquals("7x[6{#|", string2);
      
      boolean boolean0 = StringUtils.isEmpty("7x[6{#|");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string4 = StringUtils.difference(".k{}IK,BP_", ".k{}IK,BP_");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "7x[6{#|";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Array must not be null", "The Array must not be null");
      assertNotNull(stringArray0);
      assertEquals(27, stringArray0.length);
      
      String string0 = StringUtils.substring("The Array must not be null", (-501), (-501));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(27, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(27, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("FUgfDGN", "FUgfDGN");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "FUgfDGN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "FUgfDGN");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(27, stringArray0.length);
      assertEquals(27, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.deleteWhitespace("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.reverseDelimited("", '%');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.strip("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(27, stringArray0.length);
      assertEquals(27, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G?T", "G?T");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("G?T");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.substringsBetween("", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("G?T");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", "The Character must not be null");
      assertEquals(2, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.remove("G?T", '+');
      assertNotNull(string0);
      assertEquals("G?T", string0);
      
      String string1 = StringUtils.remove("hT}GOIbqW", '(');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hT}GOIbqW", string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, "S%=]S#Vn");
      assertNotNull(string0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertEquals("", string0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2660);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = StringUtils.substringsBetween("6njoAaP?Ft", "IllegalArgumentException occurred", "S%=]S#Vn");
      assertNull(stringArray0);
      
      serviceLoader0.reload();
      assertSame(classLoader0, classLoader1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string1 = StringUtils.stripStart(">CNg", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">CNg", string1);
      
      String string2 = StringUtils.repeat("6njoAaP?Ft", "S%=]S#Vn", 10);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?FtS%=]S#Vn6njoAaP?Ft", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("', has a length less than 2", "IllegalArgumentException occurred");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2660);
      assertNotNull(charBuffer0);
      assertEquals(2660, charBuffer0.limit());
      assertEquals(2660, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2660, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2660, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(2660, charBuffer0.limit());
      assertEquals(2660, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2660, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2660, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2660, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(2660, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(2660, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(2660, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.center("Yi'{t!", 127);
      assertNotNull(string0);
      assertEquals("                                                            Yi'{t!                                                             ", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "                                                            Yi'{t!                                                             ", (CharSequence) "                                                            Yi'{t!                                                             ");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Yi'{t!", "Yi'{t!", "                                                            Yi'{t!                                                             ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("1h{x", "1h{x", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 128);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("De0=0AU^");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.leftPad((String) null, 128, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("sun.text.Normalizer is not available");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("sun.text.Normalizer is not available", stringArray0);
      assertEquals(11, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat((String) null, "Fa[&$S6MiO)W", 484);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.reverseDelimited((String) null, 'X');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("y.]1r55=Tq>J<Z)HU", " vs ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isBlank(" vs ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.stripEnd("S", "y.]1r55=Tq>J<Z)HU");
      assertNotNull(string1);
      assertEquals("S", string1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-1);
      try { 
        StringUtils.toString(byteArray0, "eD+AXt;Wl#c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.substring("", (-633));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("", 'b');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('b'));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-832));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -832, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.defaultString("1D,2$80wZmRb9");
      assertNotNull(string0);
      assertEquals("1D,2$80wZmRb9", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "1D,2$80wZmRb9";
      charSequenceArray0[1] = (CharSequence) "1D,2$80wZmRb9";
      boolean boolean0 = StringUtils.startsWithAny("1D,2$80wZmRb9", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1D,2$80wZmRb9", "{^J2{.|?W8Nmlf.>\"5Z", (-2974));
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean2 = StringUtils.startsWithAny("1D,2$80wZmRb9", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace("1D,2$80wZmRb9");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("{^J2{.|?W8Nmlf.>\"5Z");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(17, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripEnd("", "|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean4 = StringUtils.containsIgnoreCase("{^J2{.|?W8Nmlf.>\"5Z", "");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String string3 = StringUtils.reverse("1D,2$80wZmRb9");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("9bRmZw08$2,D1", string3);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean5 = vector0.removeElement("MBoC)8pkBvutvuVq7");
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      String string4 = StringUtils.lowerCase("1D,2$80wZmRb9", locale0);
      assertNotNull(string4);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("1d,2$80wzmrb9", string4);
      
      String string5 = StringUtils.overlay("@]}24tV", "", (-1), (-868));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("@]}24tV", string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, '(', 2581, 0);
      assertNotNull(string6);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean6 = StringUtils.startsWithIgnoreCase("1D,2$80wZmRb9", "1d,2$80wzmrb9");
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.strip("Array and element cannot both be null", "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.center("/)3x.Q&HRB.Pj\"ey", 4096, '7');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) string1;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.reverseDelimited("\";.(nzy", '#');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\";.(nzy", string2);
      
      String string3 = StringUtils.overlay("H,'-ra^I)", "/)3x.Q&HRB.Pj\"ey", 128, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("/)3x.Q&HRB.Pj\"ey", string3);
      
      String string4 = StringUtils.remove("", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripEnd("H,'-ra^I)", "Cannot store ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("H,'-ra^I)", string5);
      
      String string6 = StringUtils.right("/)3x.Q&HRB.Pj\"ey", 10);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("&HRB.Pj\"ey", string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("I.VRh$9KpXL5S|%iJU", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string8 = StringUtils.lowerCase("H,'-ra^I)", locale0);
      assertNotNull(string8);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertEquals("h,'-ra^i)", string8);
      
      String string9 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string9);
      assertEquals(1, stringArray0.length);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertEquals("I.VRh$9KpXL5S|%iJU", string9);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "_U@Q(}A,N}hGWsz6";
      String[] stringArray0 = StringUtils.splitByCharacterType("_U@Q(}A,N}hGWsz6");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast("_U@Q(}A,N}hGWsz6", "};O=/!]hDfTa");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "";
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("};O=/!]hDfTa", 2463, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = "decompose";
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("decompose", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.reverse("4edpq*l2+Kt@O%WJK");
      assertNotNull(string0);
      assertEquals("KJW%O@tK+2l*qpde4", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "4edpq*l2+Kt@O%WJK", (CharSequence) "4edpq*l2+Kt@O%WJK");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'b';
      charArray0[2] = 'u';
      charArray0[3] = '-';
      charArray0[4] = 'G';
      charArray0[5] = '!';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "KJW%O@tK+2l*qpde4", charArray0);
      assertArrayEquals(new char[] {'j', 'b', 'u', '-', 'G', '!'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "4edpq*l2+Kt@O%WJK", 4096);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '-';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "KJW%O@tK+2l*qpde4", charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "KJW%O@tK+2l*qpde4", (CharSequence) "KJW%O@tK+2l*qpde4");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("r9v,V^?& 5+{ i", "");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.center("+j'&di~O|dH4_/)", 943);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                               +j'&di~O|dH4_/)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ", string0);
      
      String string1 = StringUtils.overlay("", "'Dz-NbS#KwH/Y0{nL", 0, 943);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Dz-NbS#KwH/Y0{nL", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.join(objectArray0, "', is neither of type Map.Entry nor an Array", 2874, 97);
      assertNotNull(string1);
      assertEquals(1, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("', is neither of type Map.Entry nor an Array", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "3-.nrA^/\"jW {GAa");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("", "", "q%9gl[I:'Nq5Ymq");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.replace((String) null, "", "", 97);
      assertNull(string4);
      
      String string5 = "\\u00";
      String string6 = StringUtils.rightPad(string5, 2874, '|');
      assertNotNull(string6);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.abbreviateMiddle("", string5, 97);
      assertNotNull(string7);
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      
      String string8 = StringUtils.repeat("", (String) null, 2874);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "", 2874);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.deleteWhitespace("");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string7));
      assertEquals("", string9);
      
      String string10 = StringUtils.stripStart((String) null, string5);
      assertNull(string10);
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string11 = StringUtils.substringBetween("", "', is neither of type Map.Entry nor an Array", "org.apache.commons.lang3.StringUtils");
      assertNull(string11);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}K,+BhbF+U";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = "";
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "}K,+BhbF+U");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int0 = 724;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 724, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("|O+WBl-H7?%<Dy!x/nu", "9]eQ-gx\u0004APw$ mc?");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string0 = StringUtils.substring("', is neither of type Map.Entry nor an Array", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.left("", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast((String) null, ">Z]1 OWk^`");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.overlay("AA7\"a4|7]L$EZ$", " in an array of ", 3895, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" in an array of ", string3);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string2 = StringUtils.join(iterator0, '*');
      assertNotNull(string2);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-512));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("e1xB{", (-1573), "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("e1xB{", string3);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", '?', 'T');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize(", '");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      String string2 = StringUtils.chomp(", '", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", '", string2);
      
      boolean boolean0 = StringUtils.isNotBlank(", '");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ", '", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", '", ", '");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.replace("", "", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ", '", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("3o UAb])u3J8n");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int2 = StringUtils.lastIndexOfAny(", '", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.substring("^k>B*nF~+?x1bgj", 0, Integer.MAX_VALUE);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("^k>B*nF~+?x1bgj", string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "3o UAb])u3J8n", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.strip("", "1-~!u<W&c.sO'");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String[] stringArray2 = StringUtils.substringsBetween("v{Q\"SJx|R!R5Yn", "", "");
      assertNull(stringArray2);
      
      String[] stringArray3 = StringUtils.substringsBetween("^k>B*nF~+?x1bgj", "3o UAb])u3J8n", (String) null);
      assertNull(stringArray3);
      
      int int3 = StringUtils.length("");
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, (String) null, Integer.MAX_VALUE);
      assertNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.text.Normalizer$Form", (String) null, Integer.MAX_VALUE);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string2 = StringUtils.remove("p{InCombiningDiacriticalMarks}+", "The String must not be empty");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "19HOGw88IFqD";
      stringArray0[1] = "Hn7-];fP>%Q\"wi`},";
      stringArray0[2] = "";
      stringArray0[3] = "BZ\"xiJ&`";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Hn7-];fP>%Q\"wi`},", charArray0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.right("}O", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "}O");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "}O");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("}O", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.remove("C?1<vv1M@PP,`m", '6');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("C?1<vv1M@PP,`m", string1);
      
      boolean boolean2 = StringUtils.endsWith("C?1<vv1M@PP,`m", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.deleteWhitespace("'PF:vg&>96:qIxO");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'PF:vg&>96:qIxO", string2);
      
      String string3 = StringUtils.replace("G{?", (String) null, "The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("G{?", string3);
      
      String string4 = StringUtils.substringBeforeLast("G{?", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("G{?", string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "G{?", 0, 3109);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean3 = StringUtils.startsWithAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.join((Object[]) stringArray1);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("}O", string5);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "G{?", (CharSequence) "}O", 60);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(3, int3);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("z", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) charBuffer0, 424);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("z", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substring("", 424, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object2));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object1));
      
      objectArray0[8] = object8;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.center("", 7, "");
      assertNotNull(string0);
      assertEquals("       ", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'e');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceChars("; or a Su JVM: ", "; or a Su JVM: ", "; or a Su JVM: ");
      assertNotNull(string0);
      assertEquals("; or a Su JVM: ", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "; or a Su JVM: ", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToEmpty("; or a Su JVM: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("; or a Su JVM:", string1);
      
      String string2 = StringUtils.center("; or a Su JVM: ", 2851, "; or a Su JVM: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "; or a Su JVM: ";
      objectArray0[1] = (Object) string2;
      objectArray0[2] = (Object) stringUtils0;
      objectArray0[3] = (Object) "; or a Su JVM: ";
      objectArray0[1] = (Object) string2;
      objectArray0[5] = (Object) stringUtils0;
      objectArray0[6] = (Object) stringUtils0;
      String string3 = StringUtils.join(objectArray0, "; or a Su JVM: ");
      assertNotNull(string3);
      assertEquals(7, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) string3, (-535), 0);
      assertEquals(7, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("; or a Su JVM: "));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("; or a Su JVM: "));
      
      String string4 = StringUtils.right("; or a Su JVM:", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("sun.text.Normalizer", (-1), "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("sun.text.Normalizer", string5);
      
      String string6 = StringUtils.lowerCase("; or a Su JVM: ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("; or a su jvm: ", string6);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.substringBefore("=~u", "=~u");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "=~u", (CharSequence) "=~u");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.split("k&k#", 's');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "=~u");
      assertTrue(boolean0);
      
      String string3 = StringUtils.mid("", 0, 108);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "Minimum abbreviation width with offset is 7");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.lowerCase("Minimum abbreviation width with offset is 7");
      assertNotNull(string1);
      assertEquals("minimum abbreviation width with offset is 7", string1);
      
      boolean boolean1 = StringUtils.isAlpha("minimum abbreviation width with offset is 7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.substring("java.text.Normalizer", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.text.Normalizer", string2);
      
      String string3 = StringUtils.substringBeforeLast((String) null, "minimum abbreviation width with offset is 7");
      assertNull(string3);
      
      String string4 = StringUtils.right("java.text.Normalizer", 2056);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("java.text.Normalizer", string4);
      
      String string5 = StringUtils.upperCase("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "java.text.Normalizer";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean2 = StringUtils.startsWithAny("java.text.Normalizer", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = StringUtils.replace("", "XZVY_3`\n:xMp:", "0|@e(WN#v=");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chop("v");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "v", (CharSequence) "");
      assertEquals(1, int0);
      
      String string1 = StringUtils.replace("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "v";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = "";
      String[] stringArray0 = StringUtils.substringsBetween("", "", "v");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("", 'G');
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.difference("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat("", (-3240));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "v", (-3240), 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3240
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.remove("", 'Y');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.right("%'HSL", (-1860));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 522);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = '{';
      charArray0[2] = 'O';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {')', '{', 'O'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("?%Tu");
      assertNotNull(string0);
      assertEquals("?%Tu", string0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.right("", 65);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "?%Tu";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "?%Tu";
      objectArray0[3] = (Object) "?%Tu";
      objectArray0[4] = (Object) "?%Tu";
      objectArray0[5] = (Object) "";
      String string3 = StringUtils.join(objectArray0, 'p', 65, 65);
      assertNotNull(string3);
      assertEquals(6, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.stripStart("/^G~Ut(", "|!vv&07dZ=[}&");
      assertNotNull(string0);
      assertEquals("/^G~Ut(", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("/^G~Ut(");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("", (-1443), "Gtn{]LUG&#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 4096);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("NFD", "JKk72(");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NFD", string1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfterLast("Array and element cannot both be null", "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Array and element cannot both be null", "Array and element cannot both be null", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.rightPad("...", 122);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...                                                                                                                       ", string3);
      
      String string4 = StringUtils.replaceChars("*MXRx^.W", 'H', 'H');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("*MXRx^.W", string4);
      
      String string5 = StringUtils.swapCase("The character ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("tHE CHARACTER ", string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace("uEt\"cv[pga");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.leftPad("9pA.)p?p+9F", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("9pA.)p?p+9F", string6);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.leftPad("EY9|^gz~=4n(a!$m", (-3599), "MAx;9kK5=$j:6P1A[");
      assertNotNull(string0);
      assertEquals("EY9|^gz~=4n(a!$m", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "EY9|^gz~=4n(a!$m", (CharSequence) "EY9|^gz~=4n(a!$m");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("EY9|^gz~=4n(a!$m", '\\');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      String string1 = StringUtils.lowerCase("EY9|^gz~=4n(a!$m", locale0);
      assertNotNull(string1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertEquals("ey9|^gz~=4n(a!$m", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("EY9|^gz~=4n(a!$m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replace(", Length: ", ", Length: ", ", Length: ", 0);
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '*';
      charArray0[2] = 'k';
      boolean boolean0 = StringUtils.containsNone((CharSequence) ", Length: ", charArray0);
      assertArrayEquals(new char[] {'l', '*', 'k'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.length(", Length: ");
      assertEquals(10, int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ", Length: ", charArray0);
      assertArrayEquals(new char[] {'l', '*', 'k'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      char char0 = 'k';
      String string0 = StringUtils.join(objectArray0, 'k', 131, 13);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.overlay("eEs`5kFdI~^pqIY}s", "", 7, (-3656));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dI~^pqIY}s", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "dI~^pqIY}s", 13);
      assertEquals((-1), int0);
      
      String string2 = "**&lY&Mh";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("**&lY&Mh");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("**&lY&Mh");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("eEs`5kFdI~^pqIY}s", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.overlay("ry4", "", (-742), 8192);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.chomp("r)AwX|D");
      assertNotNull(string0);
      assertEquals("r)AwX|D", string0);
      
      String string1 = StringUtils.center("z*EG>~.ppng% ", 1, "r)AwX|D");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z*EG>~.ppng% ", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "r)AwX|D";
      String string2 = StringUtils.join(objectArray0, ':', 1, 1);
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.right("", 1);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "r)AwX|D");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.text.Normalizer$Form");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripAccents("java.text.Normalizer$Form");
      assertNotNull(string0);
      assertEquals("java.text.Normalizer$Form", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "java.text.Normalizer$Form", 590, 590);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(", Length: 0");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.swapCase(" wh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" WH", string1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Object[]) null, 'C');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase("Array and element cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("ARRAY AND ELEMENT CANNOT BOTH BE NULL", string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 0, 't');
      assertNull(string4);
      
      String string5 = StringUtils.defaultIfBlank(")", "ARRAY AND ELEMENT CANNOT BOTH BE NULL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(")", string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      int int1 = StringUtils.indexOfAny((CharSequence) "Array and element cannot both be null", charArray0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.startsWith(")", (CharSequence) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(0));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(0));
      assertFalse(treeSet0.contains(0));
      assertEquals(0, priorityQueue0.size());
      
      String string6 = StringUtils.join((Iterable<?>) priorityQueue0, "IllegalArgumentException occurred");
      assertNotNull(string6);
      assertFalse(priorityQueue0.contains(0));
      assertFalse(treeSet0.contains(0));
      assertEquals(0, priorityQueue0.size());
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "T`(UO56(X_P", (-2163));
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripAccents(" 7aD~vKiL");
      assertNotNull(string1);
      assertEquals(" 7aD~vKiL", string1);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      Class<String> class1 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, " 7aD~vKiL");
      assertNotNull(string2);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripEnd("", "X");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty("", "X");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("X", string2);
      
      String string3 = StringUtils.substringBefore("FXDow8F+(1Au1:bx[C", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("X", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 3327);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wq", "Minimum abbreviation width with offset is 7");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.overlay("Minimum abbreviation width with offset is 7", "c,5:]B-", 0, 5);
      assertNotNull(string0);
      assertEquals("c,5:]B-um abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "{}");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("(KYGY?GH", 0, 'G');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(KYGY?GH", string1);
      
      String string2 = StringUtils.center(">_FwLvb.Fsa#", 114, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                                   >_FwLvb.Fsa#                                                   ", string2);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("normalize");
      assertNotNull(string0);
      assertEquals("normalize", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "normalize", (-307));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("", (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace("", "@yW", "normalize", (-307));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.chomp("!");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("!", string3);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(")~rsry-p");
      assertNotNull(string0);
      assertEquals(")~rsry-p", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chomp("G?T");
      assertNotNull(string0);
      assertEquals("G?T", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width is 4", "G?T", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.leftPad("~,SwF|Q_", (-1), "G?T");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~,SwF|Q_", string1);
      
      boolean boolean0 = StringUtils.isEmpty("~,SwF|Q_");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("G?T");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("G?T");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("G?T", string2);
      
      String string3 = StringUtils.substringBefore("", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "G?T", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = "\\u0cDU\"cD~TYHDdJ8W>-{J";
      String string5 = StringUtils.stripToNull(string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\\u0cDU\"cD~TYHDdJ8W>-{J", string5);
      
      boolean boolean2 = StringUtils.isAllLowerCase("G?T");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("G?T");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.lastOrdinalIndexOf("~,SwF|Q_", string4, 10);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.capitalize("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      int int2 = StringUtils.ordinalIndexOf("", "G?T", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.abbreviateMiddle("G?T", "LyM*yI", 753);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("G?T", string7);
      
      String string8 = StringUtils.replace("G?T", "G?T", "");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      
      int int3 = StringUtils.ordinalIndexOf(string5, "", 10);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.trimToNull("9ifb*lZ");
      assertNotNull(string0);
      assertEquals("9ifb*lZ", string0);
      
      String string1 = StringUtils.repeat("9ifb*lZ", 2450);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate(string1, 66, 2450);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.replaceChars("KucdgcT8[E{;fsBS(.(", "KucdgcT8[E{;fsBS(.(", "KucdgcT8[E{;fsBS(.(");
      assertNotNull(string0);
      assertEquals("KucdgcT8[E{;fsBS(.(", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'Z';
      charArray0[2] = '5';
      charArray0[3] = ' ';
      charArray0[4] = 'c';
      charArray0[5] = 'v';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "KucdgcT8[E{;fsBS(.(", charArray0);
      assertArrayEquals(new char[] {'J', 'Z', '5', ' ', 'c', 'v'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "KucdgcT8[E{;fsBS(.(", (CharSequence) "KucdgcT8[E{;fsBS(.(");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "KucdgcT8[E{;fsBS(.(", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "KucdgcT8[E{;fsBS(.(", "u9oaOYFDcn-Zu9oaOYFDcn-Z");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substring("Array element ", (-964));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Array element ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "u9oaOYFDcn-Zu9oaOYFDcn-Z";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      charSequenceArray0[3] = (CharSequence) "KucdgcT8[E{;fsBS(.(";
      charSequenceArray0[4] = (CharSequence) "KucdgcT8[E{;fsBS(.(";
      charSequenceArray0[5] = (CharSequence) "KucdgcT8[E{;fsBS(.(";
      boolean boolean2 = StringUtils.endsWithAny("Array element ", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "dOO3Mc0q", (-1), (-1));
      assertNull(string0);
      
      String string1 = StringUtils.swapCase("u9oaOYFDcn-Z");
      assertNotNull(string1);
      assertEquals("U9OAoyfdCN-z", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("dOO3Mc0q", "dOO3Mc0q", "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStart("u9oaOYFDcn-Z", "u9oaOYFDcn-Z");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "dOO3Mc0q", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.upperCase("W-");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W-", string3);
      
      boolean boolean1 = StringUtils.endsWithAny("W-", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.right("W-", (-1504));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.substringAfter(" f5bp}ISji)Bd", "dOO3Mc0q");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      String string7 = StringUtils.upperCase("", locale0);
      assertNotNull(string7);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.substringBeforeLast(" f5bp}ISji)Bd", "+-");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals(" f5bp}ISji)Bd", string8);
      
      boolean boolean2 = StringUtils.isAlpha("W-");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StringUtils.substringsBetween("]7ynia7", "]7ynia7", "uDy9");
      StringUtils.indexOf((CharSequence) "]7ynia7", (CharSequence) "uDy9");
      boolean boolean0 = StringUtils.isWhitespace("]7ynia7");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("m5@6!Wo9C(M", 2745, '|');
      String string1 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "]7ynia7");
      assertEquals("", string1);
      
      String string2 = StringUtils.center("uDy9", 2745, "]7ynia7");
      StringUtils.isEmpty("m5@6!Wo9C(M");
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) "m5@6!Wo9C(M");
      assertEquals(11, int0);
      
      StringUtils.trimToNull("U");
      StringUtils.removeEnd("cS$R9L.W2Kf.}vrHeBh", "cDU\"cD~TYHDdJ8W>-{J");
      String string3 = StringUtils.substringBefore(string2, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string1));
      
      StringUtils.containsNone((CharSequence) "cDU\"cD~TYHDdJ8W>-{J", (char[]) null);
      int int1 = StringUtils.length("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(91, int1);
      
      String string4 = StringUtils.chop(string0);
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "C0TkOSJD,FG$#g-m*`";
      StringUtils.removeEnd("C0TkOSJD,FG$#g-m*`", "C0TkOSJD,FG$#g-m*`");
      StringUtils.difference("The stripAccents(CharSequence) method requires at least Java6, but got: ", (String) null);
      StringUtils.isAlphaSpace("The stripAccents(CharSequence) method requires at least Java6, but got: ");
      StringUtils.leftPad("", (-275), "l");
      StringUtils.normalizeSpace("l");
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      char char0 = 'u';
      StringUtils.leftPad(" ava", (-275), 'u');
      StringUtils.endsWithAny("l", stringArray0);
      StringUtils.stripStart("The stripAccents(CharSequence) method requires at least Java6, but got: ", " ava");
      StringUtils.equals((CharSequence) "l", (CharSequence) " ava");
      StringUtils.substringBefore("", "");
      String[] stringArray1 = StringUtils.splitByCharacterType("InvocationTargetException occurred ");
      StringUtils.defaultString("");
      StringUtils.lastIndexOf((CharSequence) "The stripAccents(CharSequence) method requires at least Java6, but got: ", (CharSequence) "", (-275));
      StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "l", (-1));
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, 'u', (-1), 479);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      StringUtils.rightPad("lg8&##;48H", 1);
      StringUtils.countMatches("lg8&##;48H", "lg8&##;48H");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lg8&##;48H";
      stringArray0[1] = "lg8&##;48H";
      StringUtils.replaceEach("lg8&##;48H", stringArray0, stringArray0);
      StringUtils.lastIndexOfAny("lg8&##;48H", stringArray0);
      StringUtils.isEmpty("lg8&##;48H");
      StringUtils.contains((CharSequence) "lg8&##;48H", 0);
      Locale locale0 = Locale.KOREAN;
      StringUtils.lowerCase("lg8&##;48H", locale0);
      StringUtils.containsWhitespace("lg8&##;48h");
      StringUtils.join((Iterable<?>) null, "stZ9RYK_*dt!B:`e8h");
      StringUtils.uncapitalize("stZ9RYK_*dt!B:`e8h");
      StringUtils.isAsciiPrintable("lg8&##;48H");
      StringUtils.splitPreserveAllTokens((String) null);
      StringUtils.substring("', has a length less than 2", 0, 0);
      StringUtils.isNotEmpty("lg8&##;48H");
      StringUtils.split("lg8&##;48H");
      StringUtils.equalsIgnoreCase("", "lg8&##;48H");
      StringUtils.trimToNull((String) null);
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      StringUtils.join(iterator0, "");
      StringUtils.isAllUpperCase("lg8&##;48H");
      StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      StringUtils.containsIgnoreCase("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", "stZ9RYK_*dt!B:`e8h");
      String string0 = StringUtils.removeStart((String) null, "stZ9RYK_*dt!B:`e8h");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StringUtils.chomp("Array and element cannot both be null");
      StringUtils.repeat("Array and element cannot both be null", (String) null, 227);
      String string0 = StringUtils.removeStart("NFD", "NFD");
      String string1 = StringUtils.substringAfterLast("|~#+%|r<", "Array and element cannot both be null");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("|~#+%|r<");
      assertFalse(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer((byte)48);
      hashSet0.add(integer0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      Iterator<Integer> iterator0 = hashSet0.iterator();
      String string2 = StringUtils.join(iterator0, '6');
      assertFalse(string2.equals((Object)string0));
      
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Array and element cannot both be null");
      String string3 = StringUtils.center("Array and element cannot both be null", 227, "");
      assertEquals("                                                                                               Array and element cannot both be null                                                                                               ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chomp("Array and element cannot both be null");
      assertEquals("Array and element cannot both be null", string0);
      
      String string1 = StringUtils.repeat("Array and element cannot both be null", (String) null, 227);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("NFD", "NFD");
      assertEquals("", string2);
      
      StringUtils.substringAfterLast("|~#+%|r<", "Array and element cannot both be null");
      boolean boolean0 = StringUtils.isAlphaSpace("|~#+%|r<");
      assertFalse(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      Integer integer0 = new Integer((byte)48);
      hashSet0.add(integer0);
      hashSet0.iterator();
      String string3 = StringUtils.normalizeSpace("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Array and element cannot both be null");
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "NFD", (CharSequence) "Array and element cannot both be null");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StringUtils.splitByWholeSeparator("G8}?T", "G8}?T");
      StringUtils.split("G8}?T");
      StringUtils.substringsBetween("", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      StringUtils.isAlphanumericSpace("G8}?T");
      StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", "The Character must not be null");
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.replaceOnce("+R=N5", "?,m{", "Minimum abbreviation width with offset is 7");
      String string0 = StringUtils.replaceChars("", "", "");
      StringUtils.remove("G8}?T", '+');
      StringUtils.remove("hT}GOIbqW", '(');
      StringUtils.replaceChars(";", "G8}?T", "");
      StringUtils.replace("The Character must not be null", "null/empty items", "|sUo)R29<_AKu3Jng", 2597);
      String string1 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "/PHN'B#}mc");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "5Ez(";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.trimToEmpty("");
      StringUtils.chop((String) null);
      StringUtils.defaultString("", "org.apache.commons.lang3.StringUtils");
      StringUtils.stripToEmpty((String) null);
      String string0 = StringUtils.join(stringArray0);
      assertEquals("5Ez(", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.CharUtils", stringArray0, stringArray0);
      assertEquals("org.apache.commons.lang3.CharUtils", string1);
      
      StringUtils.defaultString("/B&A+ob7,lo8_@1v4", "z;#us4`R\"=.o");
      boolean boolean0 = StringUtils.isAsciiPrintable("5Ez(");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.toLanguageTag();
      StringUtils.upperCase((String) null, locale0);
      StringUtils.upperCase((String) null);
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "/B&A+ob7,lo8_@1v4", 2539);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.swapCase("5Ez(");
      assertEquals("5eZ(", string2);
      
      StringUtils.substringsBetween((String) null, (String) null, "/~}[\"mULOdeh!Dh&p(");
      int int1 = StringUtils.countMatches("zh-TW", "org.apache.commons.lang3.CharUtils");
      assertEquals(0, int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringUtils.substringAfter("", "ME~%hs0YI{&S&w\"YcR");
      StringUtils.leftPad("lYc", 0, "");
      StringUtils.abbreviateMiddle("ME~%hs0YI{&S&w\"YcR", "ME~%hs0YI{&S&w\"YcR", 256);
      StringUtils.substringAfter("Re<Syn?x>~02Gpvyl", "");
      String string0 = StringUtils.strip("ME~%hs0YI{&S&w\"YcR");
      assertEquals("ME~%hs0YI{&S&w\"YcR", string0);
      assertNotNull(string0);
      
      StringUtils.isNumeric("Re<Syn?x>~02Gpvyl");
      StringUtils.startsWithIgnoreCase("Re<Syn?x>~02Gpvyl", "Re<Syn?x>~02Gpvyl");
      char[] charArray0 = new char[16];
      charArray0[0] = 'Q';
      StringUtils.indexOfAny((CharSequence) "lYc", charArray0);
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "lYc", "lYc");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "lYc";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.stripStart("The Array must not be null", "ME~%hs0YI{&S&w\"YcR");
      assertEquals("The Array must not be null", string1);
      
      charSequenceArray0[4] = (CharSequence) "The Array must not be null";
      String string2 = StringUtils.reverseDelimited("lYc", 'Q');
      assertNotNull(string2);
      assertEquals("lYc", string2);
      
      charSequenceArray0[4] = (CharSequence) "lYc";
      charSequenceArray0[5] = (CharSequence) "Re<Syn?x>~02Gpvyl";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      StringUtils.join(iterator0, 'f');
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "Re<Syn?x>~02Gpvyl", charSequenceArray0);
      assertEquals(0, int0);
      
      StringUtils.containsAny((CharSequence) "", charArray0);
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[2]);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StringUtils.deleteWhitespace("*V");
      char[] charArray0 = new char[0];
      StringUtils.containsNone((CharSequence) "*V", charArray0);
      StringUtils.containsAny((CharSequence) "*V", (CharSequence) "*V");
      StringUtils.isNotEmpty("*V");
      StringUtils.startsWith("*V", "@JH@");
      int int0 = 10;
      StringUtils.center("@JH@", 10, "*V");
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringUtils.isEmpty(charBuffer0);
      StringUtils.stripAccents("*V");
      StringUtils.substringBeforeLast("@JH@", "*V");
      StringUtils.isBlank("@JH@");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "@JH@", (CharSequence) "*V", 10);
      StringUtils.center("M)KX4", 10, "*V*@JH@*V*");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "@JH@", (CharSequence) "*V", (-1346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("{}", '\'');
      assertEquals("{}", string0);
      
      String string1 = StringUtils.center("{}", 3, 'l');
      assertEquals("{}l", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "{}";
      objectArray0[1] = (Object) "{}l";
      objectArray0[2] = (Object) "{}";
      String string2 = StringUtils.join(objectArray0, " in an array of ");
      assertEquals("{} in an array of {}l in an array of {}", string2);
      
      StringUtils.startsWith("{} in an array of {}l in an array of {}", " in an array of ");
      boolean boolean0 = StringUtils.containsAny((CharSequence) " in an array of ", (CharSequence) "{}");
      StringUtils.center("{}", 0, 'I');
      Integer integer0 = new Integer(3);
      StringUtils.difference("{} in an array of {}l in an array of {}", "srQ/");
      StringUtils.isAllUpperCase(" in an array of ");
      String string3 = StringUtils.difference("", "Q:+\"ti!L3bRU&");
      assertEquals("Q:+\"ti!L3bRU&", string3);
      
      String string4 = StringUtils.overlay(";:", ", Length: 0", (int) integer0, 0);
      String string5 = StringUtils.stripStart(", Length: 0", (String) null);
      assertTrue(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isNotBlank("{}");
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.deleteWhitespace(", Length: 0");
      assertEquals(",Length:0", string6);
      
      StringUtils.lastIndexOf((CharSequence) null, Integer.MAX_VALUE, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Q:+\"ti!L3bRU&";
      stringArray0[1] = "Q:+\"ti!L3bRU&";
      stringArray0[2] = "{}l";
      stringArray0[3] = ", Length: 0";
      stringArray0[4] = ", Length: 0";
      stringArray0[5] = "{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*vMaPz");
      assertNotSame(stringArray1, stringArray0);
  }
}
