/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:17:14 GMT 2023
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.Writer;
import java.nio.Buffer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) strBuilder2;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) stringBuffer0;
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators(objectArray0, "");
      assertEquals(7, objectArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(176, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(176, strBuilder0.length());
      assertEquals(176, strBuilder0.size());
      assertEquals(176, strBuilder3.length());
      assertEquals(176, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(176, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder3.lastIndexOf(strMatcher0, 2900);
      assertEquals(7, objectArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(176, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(176, strBuilder0.length());
      assertEquals(176, strBuilder0.size());
      assertEquals(176, strBuilder3.length());
      assertEquals(176, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(176, strBuilder3.size());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadLeft((-1), 2900, 'e');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3076, strBuilder0.capacity());
      assertEquals(3076, strBuilder0.length());
      assertEquals(3076, strBuilder0.size());
      assertEquals(3076, strBuilder1.capacity());
      assertEquals(3076, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3076, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3076, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(3076, strBuilder4.size());
      assertEquals(3076, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.append(false);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder5.getNewLineText());
      assertEquals(3081, strBuilder5.length());
      assertEquals(3081, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(3081, strBuilder5.capacity());
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertNotNull(strBuilder5);
      
      String string0 = strBuilder5.toString();
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder5.getNewLineText());
      assertEquals(3081, strBuilder5.length());
      assertEquals(3081, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(3081, strBuilder5.capacity());
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertNotNull(string0);
      
      StrBuilder strBuilder6 = strBuilder0.append((String) null);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(3081, strBuilder6.capacity());
      assertEquals(3081, strBuilder6.length());
      assertNotNull(strBuilder6);
      
      int int1 = strBuilder6.capacity();
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(3081, strBuilder6.capacity());
      assertEquals(3081, strBuilder6.length());
      assertEquals(3081, int1);
      
      StrBuilder strBuilder7 = strBuilder1.deleteFirst((String) null);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder1.size());
      assertEquals(3081, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3081, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3081, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(3081, strBuilder7.capacity());
      assertEquals(3081, strBuilder7.length());
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder1.setNewLineText((String) null);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder1.size());
      assertEquals(3081, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3081, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(3081, strBuilder8.size());
      assertEquals(3081, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(3081, strBuilder8.capacity());
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder2.replaceFirst((StrMatcher) null, "");
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder1.size());
      assertEquals(3081, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3081, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(3081, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3081, strBuilder2.size());
      assertEquals(3081, strBuilder2.length());
      assertEquals(3081, strBuilder9.capacity());
      assertEquals(3081, strBuilder9.size());
      assertEquals(3081, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder9.deleteFirst('b');
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder10);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder1.size());
      assertEquals(3081, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3081, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(3081, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3081, strBuilder2.size());
      assertEquals(3081, strBuilder2.length());
      assertEquals(3081, strBuilder9.capacity());
      assertEquals(3081, strBuilder9.size());
      assertEquals(3081, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(3081, strBuilder10.capacity());
      assertNull(strBuilder10.getNullText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(3081, strBuilder10.length());
      assertEquals(3081, strBuilder10.size());
      assertNotNull(strBuilder10);
      
      String string1 = strBuilder2.substring(3081);
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder1.size());
      assertEquals(3081, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3081, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(3081, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3081, strBuilder2.size());
      assertEquals(3081, strBuilder2.length());
      assertEquals("", string1);
      assertNotNull(string1);
      
      StrBuilder strBuilder11 = strBuilder10.ensureCapacity(684);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder10);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder11);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder6);
      assertEquals(3081, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3081, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3081, strBuilder0.size());
      assertEquals(3081, strBuilder1.size());
      assertEquals(3081, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3081, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(3081, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3081, strBuilder2.size());
      assertEquals(3081, strBuilder2.length());
      assertEquals(3081, strBuilder9.capacity());
      assertEquals(3081, strBuilder9.size());
      assertEquals(3081, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(3081, strBuilder10.capacity());
      assertNull(strBuilder10.getNullText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(3081, strBuilder10.length());
      assertEquals(3081, strBuilder10.size());
      assertEquals(3081, strBuilder11.size());
      assertNull(strBuilder11.getNullText());
      assertEquals(3081, strBuilder11.capacity());
      assertEquals(3081, strBuilder11.length());
      assertFalse(strBuilder11.isEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertNotNull(strBuilder11);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'e';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      // Undeclared exception!
      try { 
        strBuilder11.getChars(2505, 2505, charArray0, 2505);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(13, 97.0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(19, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(19, strBuilder2.size());
      assertEquals(47, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.capacity());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(121, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(121, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(121, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder3.indexOf(strMatcher0, (-446));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.capacity());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(121, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(121, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(121, strBuilder3.capacity());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder4 = strBuilder1.ensureCapacity(0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.capacity());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.capacity());
      assertEquals(121, strBuilder1.length());
      assertEquals(121, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(121, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(121, strBuilder4.size());
      assertEquals(121, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.replaceFirst('w', 'm');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.capacity());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.capacity());
      assertEquals(121, strBuilder1.length());
      assertEquals(121, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(121, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(121, strBuilder5.size());
      assertEquals(121, strBuilder5.length());
      assertNotNull(strBuilder5);
      
      char char0 = strBuilder1.charAt(0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.capacity());
      assertEquals(121, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(121, strBuilder1.capacity());
      assertEquals(121, strBuilder1.length());
      assertEquals(121, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals('[', char0);
      
      StrBuilder strBuilder6 = strBuilder0.append((float) 0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(124, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(124, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(124, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(124, strBuilder6.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(124, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(124, strBuilder7.size());
      assertEquals(124, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      
      int int1 = strBuilder1.lastIndexOf("", (-1));
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(124, strBuilder1.capacity());
      assertEquals(124, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(124, strBuilder1.size());
      assertEquals((-1), int1);
      
      int int2 = strBuilder5.indexOf('[', 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(124, strBuilder1.capacity());
      assertEquals(124, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(124, strBuilder1.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(124, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(124, strBuilder5.length());
      assertEquals(124, strBuilder5.capacity());
      assertEquals(0, int2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(124, strBuilder2.capacity());
      assertEquals(124, strBuilder2.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      Object object0 = strBuilder_StrBuilderTokenizer0.next();
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(124, strBuilder2.capacity());
      assertEquals(124, strBuilder2.length());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(object0);
      
      StrBuilder strBuilder8 = strBuilder1.appendFixedWidthPadRight((Object) "[q9vDLA7X}qlQ97.0Lqmwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwjava.lang.String@00000000020.0", (-446), '\'');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(124, strBuilder1.capacity());
      assertEquals(124, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(124, strBuilder1.size());
      assertEquals(124, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(124, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(124, strBuilder8.capacity());
      assertNotNull(strBuilder8);
      
      int int3 = strBuilder0.lastIndexOf("", 0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder0.size());
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(2, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, 39, '.');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(39, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(39, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(39, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.insert(39, 5);
      assertEquals(2, charArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(40, strBuilder3.length());
      assertEquals(40, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll('8', '8');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(40, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(40, strBuilder4.capacity());
      assertEquals(40, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.setLength(0);
      assertEquals(2, charArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder5.size());
      assertEquals(40, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, 39, '.');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(39, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(39, strBuilder2.size());
      assertEquals(39, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.insert(39, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(40, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(40, strBuilder3.size());
      assertEquals(40, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll('8', '8');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(40, strBuilder4.capacity());
      assertEquals(40, strBuilder4.length());
      assertEquals(40, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.setLength(0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder5.size());
      assertEquals(40, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      
      String string0 = strBuilder4.toString();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(40, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 181, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 181
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer[not tokenized yet]");
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(63, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(63, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(63, strBuilder1.capacity());
      assertEquals(31, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) "n&^*_N,]XwD[Z", 2928, ')');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2959, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2959, strBuilder0.capacity());
      assertEquals(2959, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2959, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2959, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder2.midString(119, 2928);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2959, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2959, strBuilder0.capacity());
      assertEquals(2959, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2959, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2959, strBuilder2.length());
      assertNotNull(string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(2959, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2959, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      StrBuilder strBuilder3 = new StrBuilder((String) null);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = 'C';
      charArray0[6] = ')';
      charArray0[7] = ')';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 2928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang.text.StrMatcher$CharSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(117, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder2.indexOf(strMatcher0, (-446));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(117, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.length());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(117, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(117, strBuilder3.length());
      assertEquals(117, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst('w', 'm');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder4.capacity());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      
      char char0 = strBuilder1.charAt('m');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals('0', char0);
      
      StrBuilder strBuilder5 = strBuilder0.append((float) 'w');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(122, strBuilder0.capacity());
      assertEquals(122, strBuilder0.size());
      assertEquals(122, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(122, strBuilder5.length());
      assertEquals(122, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(122, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertEquals(122, strBuilder0.capacity());
      assertEquals(122, strBuilder0.size());
      assertEquals(122, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(122, strBuilder5.length());
      assertEquals(122, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(122, strBuilder5.capacity());
      assertEquals(122, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(122, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(122, strBuilder6.size());
      assertNotNull(strBuilder6);
      
      int int1 = new Integer(102);
      assertFalse(int1 == int0);
      assertEquals(102, int1);
      
      int int2 = strBuilder4.indexOf('0', 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertEquals(122, strBuilder0.capacity());
      assertEquals(122, strBuilder0.size());
      assertEquals(122, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(122, strBuilder1.capacity());
      assertEquals(122, strBuilder1.size());
      assertEquals(122, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(122, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(122, strBuilder4.size());
      assertEquals(122, strBuilder4.length());
      assertEquals(107, int2);
      
      int int3 = strBuilder3.indexOf((String) null);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(122, strBuilder0.capacity());
      assertEquals(122, strBuilder0.size());
      assertEquals(122, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(122, strBuilder1.capacity());
      assertEquals(122, strBuilder1.size());
      assertEquals(122, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(122, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(122, strBuilder3.capacity());
      assertEquals(122, strBuilder3.length());
      assertEquals((-1), int3);
      
      int int4 = strBuilder4.lastIndexOf('X');
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertEquals(122, strBuilder0.capacity());
      assertEquals(122, strBuilder0.size());
      assertEquals(122, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(122, strBuilder1.capacity());
      assertEquals(122, strBuilder1.size());
      assertEquals(122, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(122, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(122, strBuilder4.size());
      assertEquals(122, strBuilder4.length());
      assertEquals(8, int4);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 1513;
      StrBuilder strBuilder0 = new StrBuilder(1513);
      assertEquals(0, strBuilder0.size());
      assertEquals(1513, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(1513);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1513, strBuilder0.capacity());
      assertEquals(1513, strBuilder0.length());
      assertEquals(1513, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1513, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1513, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(1513, strBuilder0.capacity());
      assertEquals(1513, strBuilder0.length());
      assertEquals(1513, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1513, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1513, strBuilder1.size());
      assertEquals(1513, strBuilder2.size());
      assertEquals(1513, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1513, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.trim();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(1513, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(1513, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertEquals(1513, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder2.contains(strMatcher0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(1513, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(1513, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(boolean0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('F');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder4 = strBuilder1.append(1513);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(4, strBuilder0.length());
      assertEquals(1513, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder4.length());
      assertEquals(1513, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      
      int int1 = strBuilder4.lastIndexOf(strMatcher0);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(4, strBuilder0.length());
      assertEquals(1513, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder4.length());
      assertEquals(1513, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals((-1), int1);
      
      StrBuilder strBuilder5 = strBuilder0.append((-1438.46097282989));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(1513, strBuilder0.capacity());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(21, strBuilder5.length());
      assertEquals(1513, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      int int2 = strBuilder1.indexOf("", 81);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertEquals(1513, strBuilder0.capacity());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(21, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertEquals(21, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), int2);
      
      int int3 = 108;
      String string0 = "";
      StrBuilder strBuilder6 = strBuilder4.clear();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertEquals(0, strBuilder0.size());
      assertEquals(1513, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1513, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(1513, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertEquals(1513, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder5.insert(1513, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1513
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(117, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.capacity());
      assertEquals(117, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(117, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(117, strBuilder3.length());
      assertEquals(117, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      char char0 = strBuilder1.charAt('m');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.length());
      assertEquals('0', char0);
      
      StrBuilder strBuilder4 = strBuilder0.append((float) 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(122, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(122, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(122, strBuilder0.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(122, strBuilder4.capacity());
      assertEquals(122, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(122, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      int int0 = strBuilder0.indexOf('0', 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(122, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(122, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(122, strBuilder0.length());
      assertEquals(107, int0);
      
      int int1 = strBuilder3.indexOf("");
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(122, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(122, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(122, strBuilder0.length());
      assertEquals(122, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(122, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(122, strBuilder1.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(122, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(122, strBuilder3.length());
      assertEquals(122, strBuilder3.capacity());
      assertEquals(0, int1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder5 = strBuilder4.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(122, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(122, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(122, strBuilder0.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(122, strBuilder4.capacity());
      assertEquals(122, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(122, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(122, strBuilder5.capacity());
      assertEquals(122, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(122, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = strBuilder0.charAt(4);
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.size());
      assertEquals(',', char0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(',');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.rightString((-1939));
      assertSame(strBuilder0, strBuilder1);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 32;
      StrBuilder strBuilder2 = strBuilder0.ensureCapacity(32);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(18, strBuilder2.length());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(18, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.endsWith("'H]t,2vFypKA%nhMf=");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertFalse(boolean0);
      
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        strBuilder2.setCharAt(167, ',');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 167
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}ql<Qq");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.capacity());
      assertEquals(117, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('w');
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_CharMatcher0, (-446));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.capacity());
      assertEquals(117, strBuilder2.size());
      assertEquals(15, int0);
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(117, strBuilder3.size());
      assertEquals(117, strBuilder3.length());
      assertEquals(117, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst('w', 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(117, strBuilder4.capacity());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      char char0 = strBuilder1.charAt(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.capacity());
      assertEquals('[', char0);
      
      StrBuilder strBuilder5 = strBuilder0.append((float) 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder5.size());
      assertEquals(120, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(120, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.deleteFirst((StrMatcher) strMatcher_CharMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(119, strBuilder0.length());
      assertEquals(119, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(119, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(120, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(120, strBuilder6.capacity());
      assertEquals(119, strBuilder6.length());
      assertEquals(119, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNotNull(strBuilder6);
      
      int int1 = strBuilder1.lastIndexOf("", 15);
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(119, strBuilder0.length());
      assertEquals(119, strBuilder1.size());
      assertEquals(119, strBuilder1.length());
      assertEquals(120, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, int1);
      
      int int2 = strBuilder4.indexOf('[', 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(119, strBuilder0.length());
      assertEquals(119, strBuilder1.size());
      assertEquals(119, strBuilder1.length());
      assertEquals(120, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(119, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(120, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(119, strBuilder4.length());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = (-1939);
      int int1 = 4;
      char char0 = strBuilder0.charAt(4);
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(',', char0);
      
      String string0 = strBuilder0.rightString((-1939));
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(32);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(19, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.endsWith("'H]t,2vFypKA%nhMf=");
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("'H]t,2vFypKA%nhMf=");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(32, (-1L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = strBuilder0.charAt(4);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertEquals(',', char0);
      
      String string0 = strBuilder0.rightString((-1939));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 32;
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(32);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer("'H]t,2vFypKA%nhMf=");
      assertEquals(19, stringBuffer0.length());
      assertEquals("'H]t,2vFypKA%nhMf=", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(38, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(38, strBuilder0.length());
      assertEquals(19, stringBuffer0.length());
      assertEquals("'H]t,2vFypKA%nhMf=", stringBuffer0.toString());
      assertEquals(51, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(38, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(38, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.endsWith("'H]t,2vFypKA%nhMf=");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(38, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(38, strBuilder0.length());
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("'H]t,2vFypKA%nhMf="));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = "L";
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = '@';
      // Undeclared exception!
      try { 
        strBuilder2.getChars(32, 2896, charArray0, (-1138));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2896
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = null;
      strBuilder_StrBuilderWriter0.write((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      char char0 = 'Z';
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-1), 'Z');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Invalid startIndex: ");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(70, strBuilder0.length());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(70, strBuilder0.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(70, strBuilder1.capacity());
      assertEquals(70, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(70, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("org.apache.commons.lang.text.StrBuilder", "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(31, strBuilder0.size());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(31, strBuilder2.length());
      assertEquals(70, strBuilder2.capacity());
      assertEquals(31, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'J';
      charArray0[2] = '>';
      charArray0[3] = ']';
      charArray0[4] = ' ';
      charArray0[5] = 'w';
      char[] charArray1 = strBuilder1.getChars(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(31, charArray1.length);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', 'J', '>', ']', ' ', 'w'}, charArray0);
      assertEquals(31, strBuilder0.size());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(31, strBuilder1.length());
      assertEquals(70, strBuilder1.capacity());
      assertEquals(31, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(charArray1);
      
      int int0 = strBuilder1.lastIndexOf('*');
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(31, strBuilder0.size());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals(31, strBuilder1.length());
      assertEquals(70, strBuilder1.capacity());
      assertEquals(31, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, 39, '.');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(39, strBuilder2.size());
      assertEquals(39, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.insert(39, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder3.capacity());
      assertEquals(40, strBuilder3.length());
      assertEquals(40, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder3.substring(0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder3.capacity());
      assertEquals(40, strBuilder3.length());
      assertEquals(40, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(string0);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll('8', '8');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(40, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(40, strBuilder4.capacity());
      assertEquals(40, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.setLength(0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertEquals(40, strBuilder5.capacity());
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, 39, '.');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(39, strBuilder0.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(39, strBuilder3.length());
      assertEquals(39, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(39, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.insert(39, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(40, strBuilder2.capacity());
      assertEquals(40, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(40, strBuilder2.size());
      assertEquals(40, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(40, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(40, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.replaceAll('8', '8');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(40, strBuilder5.length());
      assertEquals(40, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(40, strBuilder5.size());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder2.setLength(0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(40, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder6.size());
      assertEquals(40, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNotNull(strBuilder6);
      
      int int0 = strBuilder0.indexOf('8');
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(writer0);
      
      Reader reader0 = strBuilder0.asReader();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(reader0.ready());
      assertTrue(reader0.markSupported());
      assertNotNull(reader0);
      
      StrBuilder strBuilder1 = new StrBuilder("Windows");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertFalse(boolean0);
      
      int int0 = 1561;
      Integer integer0 = new Integer(1561);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1561, (int)integer0);
      assertNotNull(integer0);
      
      char char0 = ':';
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft((Object) integer0, 6, ':');
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(13, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(13, strBuilder1.size());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(13, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((-519), (-212), '~');
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(13, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(13, strBuilder1.size());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(13, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(13, strBuilder3.length());
      assertEquals(13, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(39, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder3.append("Windows", 6, (-2698));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setCharAt(4, 'x');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      char char0 = strBuilder0.charAt(4);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals('x', char0);
      
      String string0 = strBuilder0.rightString((-1939));
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 32;
      StrBuilder strBuilder2 = strBuilder0.ensureCapacity(32);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(19, strBuilder2.size());
      assertEquals(51, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(19, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.endsWith("'H]t,2vFypKA%nhMf=");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder2.insert(32, (-1L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(70, strBuilder0.length());
      assertEquals(70, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(70, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(70, strBuilder1.size());
      assertEquals(70, strBuilder1.length());
      assertEquals(70, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("org.apache.commons.lang.text.StrBuilder", "");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder2.size());
      assertEquals(70, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(31, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder2.indexOf("", 89);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder2.size());
      assertEquals(70, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(31, strBuilder2.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"'@:0nZUS\"");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 4959;
      int int1 = strBuilder0.lastIndexOf((String) null, 4959);
      assertFalse(int1 == int0);
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertEquals((-1), int1);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('{');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 20
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r\"j{e >KyxW");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('L', 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      StrBuilder strBuilder2 = strBuilder0.append("r\"j{e >KyxW");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(43, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(22, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(22, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('L');
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder1.indexOf(strMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(22, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(22, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1), int0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher1 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher1);
      
      int int1 = strBuilder0.indexOf(strMatcher1, (-917));
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      objectArray0[0] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(50, strBuilder3.length());
      assertEquals(50, strBuilder3.size());
      assertEquals(50, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      
      char char0 = 'a';
      StrMatcher strMatcher0 = StrMatcher.charMatcher('a');
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder4 = strBuilder1.deleteFirst(strMatcher0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(49, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(49, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(49, strBuilder4.size());
      assertEquals(49, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(50, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, (-1017), (-1017));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = 97;
      strBuilder0.size = 97;
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(97, strBuilder0.size());
      assertEquals(97, strBuilder0.length());
      
      char char0 = '9';
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) "", Integer.MAX_VALUE, '9');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("cqJ GR`[5(\"ND4UAu ");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(117, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.capacity());
      assertEquals(117, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder2.indexOf(strMatcher0, (-446));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(117, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.capacity());
      assertEquals(117, strBuilder2.length());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      
      int int1 = strBuilder3.validateRange(0, 102);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(int1 == int0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, int1);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst('w', 'm');
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.insert(0, (float) 0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(3, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(3, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      
      char char0 = strBuilder1.charAt(0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals('0', char0);
      
      StrBuilder strBuilder6 = strBuilder0.append((float) 0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder6.capacity());
      assertEquals(120, strBuilder6.length());
      assertEquals(120, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.deleteFirst(strMatcher0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder6.capacity());
      assertEquals(120, strBuilder6.length());
      assertEquals(120, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(120, strBuilder7.size());
      assertEquals(120, strBuilder7.length());
      assertEquals(120, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      
      int int2 = strBuilder1.lastIndexOf("", (-1));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals((-1), int2);
      
      int int3 = strBuilder4.indexOf('0', 0);
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[3];
      int int1 = (-2057);
      StrBuilder strBuilder1 = new StrBuilder("9>aXJkb?{^/w6!A");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(48, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      strBuilder_StrBuilderWriter0.write((-2057));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder3 = strBuilder1.append('\"');
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertEquals(17, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(48, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(17, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder4 = strBuilder3.deleteAll(strMatcher0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(48, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.size());
      assertEquals(16, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(48, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      
      int int2 = (-178);
      StrBuilder strBuilder5 = new StrBuilder("9>aXJkb?{^/w6!A");
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertEquals(16, strBuilder5.length());
      assertEquals(16, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(48, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      boolean boolean0 = strBuilder3.contains(strMatcher1);
      assertTrue(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strMatcher1, strMatcher0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(48, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", (-2057), (-745));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("z1d");
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("z1d"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(176);
      assertEquals(176, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertFalse(linkedList0.contains("z1d"));
      assertTrue(linkedList0.contains(176));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "wq9^AP;-9UVJ");
      assertFalse(linkedList0.contains("wq9^AP;-9UVJ"));
      assertTrue(linkedList0.contains(176));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(31, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, linkedList0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(31, strBuilder1.length());
      assertEquals(31, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char char0 = strBuilder0.charAt(4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(',', char0);
      
      int int0 = 32;
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(32);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertEquals(51, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1939));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1939
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = strBuilder0.charAt(4);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(',', char0);
      
      String string0 = strBuilder0.rightString(2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertEquals("f=", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(17);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.endsWith("'H]t,2vFypKA%nhMf=");
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertTrue(boolean0);
      
      StrBuilder strBuilder2 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.isEmpty());
      assertEquals(19, strBuilder2.size());
      assertEquals(19, strBuilder2.length());
      assertEquals(51, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, 39, '.');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(39, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(39, strBuilder2.length());
      assertEquals(39, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.insert(39, 39);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(41, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(41, strBuilder1.length());
      assertEquals(41, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(41, strBuilder3.capacity());
      assertEquals(41, strBuilder3.size());
      assertEquals(41, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll('8', '8');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(41, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(41, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(41, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.setLength(0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(41, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.append(charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(41, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.length());
      assertEquals(41, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertTrue(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer[not tokenized yet]");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertEquals(63, strBuilder0.capacity());
      assertEquals(31, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(2928);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertEquals(63, strBuilder0.capacity());
      assertEquals(31, strBuilder0.size());
      assertEquals(63, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(31, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0, 0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertEquals(63, strBuilder0.capacity());
      assertEquals(31, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(63, strBuilder2.capacity());
      assertEquals(31, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) "n&^*_N,]XwD[Z", 2928, ')');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2959, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.length());
      assertEquals(2959, strBuilder0.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(2959, strBuilder3.capacity());
      assertEquals(2959, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2959, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2959, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.length());
      assertEquals(2959, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      StrBuilder strBuilder4 = new StrBuilder((String) null);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = 'C';
      charArray0[6] = ')';
      charArray0[7] = ')';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 2928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang.text.StrMatcher$CharSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"'@:0nZUS\"");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 4959;
      int int1 = strBuilder0.lastIndexOf("\"'@:0nZUS\"", 4959);
      assertFalse(int1 == int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 20
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder2.indexOf(strMatcher0, (-446));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.capacity());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder3.length());
      assertEquals(117, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(117, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst('w', 'm');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      char char0 = strBuilder1.charAt(8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals('X', char0);
      
      StrBuilder strBuilder5 = strBuilder0.append((float) 8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(120, strBuilder5.length());
      assertEquals(120, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(120, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.appendNewLine();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(121, strBuilder0.size());
      assertEquals(121, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(121, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(121, strBuilder5.length());
      assertEquals(121, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(121, strBuilder5.capacity());
      assertEquals(121, strBuilder6.size());
      assertEquals(121, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(121, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder6.insert(8, 102);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder0.length());
      assertEquals(124, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(124, strBuilder5.length());
      assertEquals(124, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(124, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(124, strBuilder6.size());
      assertEquals(124, strBuilder6.length());
      assertEquals(124, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(124, strBuilder7.length());
      assertEquals(124, strBuilder7.capacity());
      assertEquals(124, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder5.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder0.length());
      assertEquals(124, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(124, strBuilder5.length());
      assertEquals(124, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(124, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(124, strBuilder8.capacity());
      assertEquals(124, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(124, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNotNull(strBuilder8);
      
      int int1 = strBuilder1.lastIndexOf("", (-1));
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder0.length());
      assertEquals(124, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(124, strBuilder1.size());
      assertEquals(124, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(124, strBuilder1.length());
      assertEquals((-1), int1);
      
      int int2 = strBuilder4.indexOf('X', 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertEquals(124, strBuilder0.size());
      assertEquals(124, strBuilder0.length());
      assertEquals(124, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(124, strBuilder1.size());
      assertEquals(124, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(124, strBuilder1.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(124, strBuilder4.size());
      assertEquals(124, strBuilder4.length());
      assertEquals(124, strBuilder4.capacity());
      assertEquals(11, int2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('<');
      assertNotNull(strMatcher_CharMatcher0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher0);
      
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '\u0000', '<', '<'}, charArray0);
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strMatcher2.equals((Object)strMatcher1));
      assertFalse(strMatcher2.equals((Object)strMatcher0));
      assertNotSame(strMatcher2, strMatcher1);
      assertNotSame(strMatcher2, strMatcher0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '\u0000', '<', '<'}, charArray0);
      assertNotNull(strMatcher2);
      
      StrMatcher strMatcher3 = StrMatcher.charMatcher('<');
      assertFalse(strMatcher3.equals((Object)strMatcher_CharMatcher0));
      assertNotSame(strMatcher3, strMatcher_CharMatcher0);
      assertNotNull(strMatcher3);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
      assertFalse(strMatcher_CharMatcher0.equals((Object)strMatcher3));
      assertNotSame(strMatcher_CharMatcher0, strMatcher3);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      StrMatcher strMatcher4 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher4);
      
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = 'n';
      charArray1[4] = '<';
      char[] charArray2 = strBuilder0.getChars(charArray1);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K', '<', '<', 'n', '<'}, charArray2);
      assertArrayEquals(new char[] {'K', '<', '<', 'n', '<'}, charArray1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(charArray2);
      
      Integer integer0 = new Integer(1316);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1316, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(28, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("pH~#GeT", "pH~#GeT");
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(28, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.length());
      assertEquals(28, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(28, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterMatcher(strMatcher0);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(strMatcher0.equals((Object)strMatcher2));
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(strMatcher0, strMatcher2);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '\u0000', '<', '<'}, charArray0);
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(28, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Iterator) strTokenizer0, "");
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(strMatcher0.equals((Object)strMatcher2));
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(strMatcher0, strMatcher2);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '\u0000', '<', '<'}, charArray0);
      assertEquals(55, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(55, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(55, strBuilder1.size());
      assertEquals(55, strBuilder1.length());
      assertEquals(55, strBuilder2.size());
      assertEquals(55, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(55, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(55, strBuilder3.length());
      assertEquals(55, strBuilder3.size());
      assertEquals(55, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      
      boolean boolean1 = strBuilder1.contains(strMatcher1);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(strMatcher1.equals((Object)strMatcher2));
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertTrue(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strMatcher1, strMatcher2);
      assertNotSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '\u0000', '<', '<'}, charArray0);
      assertEquals(55, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(55, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(55, strBuilder1.size());
      assertEquals(55, strBuilder1.length());
      assertFalse(boolean1);
      
      StrBuilder strBuilder4 = strBuilder2.setLength(1516);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(1516, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1516, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1516, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1516, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1516, strBuilder1.capacity());
      assertEquals(1516, strBuilder1.length());
      assertEquals(1516, strBuilder2.size());
      assertEquals(1516, strBuilder2.length());
      assertEquals(1516, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1516, strBuilder4.capacity());
      assertEquals(1516, strBuilder4.length());
      assertEquals(1516, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.replaceAll('<', 'K');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(1516, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1516, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1516, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1516, strBuilder5.length());
      assertEquals(1516, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(1516, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.trim();
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1516, strBuilder6.capacity());
      assertEquals(55, strBuilder6.size());
      assertEquals(55, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1516, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.insert(0, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, 39, '.');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(39, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(39, strBuilder3.size());
      assertEquals(39, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.insert(39, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(40, strBuilder4.length());
      assertEquals(40, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(40, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.replaceAll('8', '8');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(40, strBuilder5.size());
      assertEquals(40, strBuilder5.length());
      assertEquals(40, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder1.setLength(0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder6.length());
      assertEquals(40, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder4.setNullText("!(ly:kl0iZV>");
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals("!(ly:kl0iZV>", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("!(ly:kl0iZV>", strBuilder1.getNullText());
      assertEquals(40, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals("!(ly:kl0iZV>", strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals("!(ly:kl0iZV>", strBuilder7.getNullText());
      assertEquals(40, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      
      boolean boolean0 = strBuilder1.endsWith("!(ly:kl0iZV>");
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals("!(ly:kl0iZV>", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("!(ly:kl0iZV>", strBuilder1.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[9];
      String string0 = strBuilder_StrBuilderTokenizer0.previousToken();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(string0);
      
      charArray0[0] = 'm';
      charArray0[1] = '\'';
      charArray0[2] = '`';
      charArray0[3] = ',';
      charArray0[4] = 'l';
      charArray0[5] = '.';
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertEquals(9, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      charArray0[6] = 'w';
      charArray0[7] = 'H';
      charArray0[8] = 'h';
      int int0 = 1717;
      int int1 = strMatcher0.isMatch(charArray0, 1717, 0, 101);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', 'w', 'H', 'h'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, int1);
      
      int int2 = strBuilder0.lastIndexOf(strMatcher0, 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), int2);
      
      int int3 = strBuilder0.lastIndexOf("`?d^=c@jraB?~;tI");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int3);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1717, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1717
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      charArray0[0] = '?';
      charArray0[1] = 'C';
      charArray0[2] = '$';
      charArray0[3] = 'Q';
      charArray0[4] = 'R';
      charArray0[5] = '#';
      charArray0[6] = '!';
      charArray0[7] = 'X';
      charArray0[8] = ']';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'?', 'C', '$', 'Q', 'R', '#', '!', 'X', ']'}, charArray0);
      assertArrayEquals(new char[] {'?', 'C', '$', 'Q', 'R', '#', '!', 'X', ']'}, charArray1);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray1);
      
      // Undeclared exception!
      try { 
        strBuilder1.getChars(3835, 0, charArray1, (-4459));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[9];
      String string0 = strBuilder_StrBuilderTokenizer0.previousToken();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(string0);
      
      charArray0[0] = 'm';
      charArray0[1] = '\'';
      charArray0[2] = '`';
      charArray0[3] = ',';
      charArray0[4] = 'l';
      charArray0[5] = '.';
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertEquals(9, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      charArray0[6] = 'w';
      charArray0[7] = 'H';
      charArray0[8] = 'h';
      int int0 = strMatcher0.isMatch(charArray0, 1717, 0, 101);
      assertEquals(9, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', 'w', 'H', 'h'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, int0);
      
      StrBuilder strBuilder2 = strBuilder0.setLength(4621);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(4621, strBuilder0.length());
      assertEquals(4621, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4621, strBuilder0.size());
      assertEquals(4621, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4621, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4621, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      int int1 = strBuilder0.lastIndexOf(strMatcher0, 0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(4621, strBuilder0.length());
      assertEquals(4621, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4621, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), int1);
      
      int int2 = strBuilder0.lastIndexOf("`?d^=c@jraB?~;tI");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(4621, strBuilder0.length());
      assertEquals(4621, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4621, strBuilder0.size());
      assertEquals((-1), int2);
      
      StrBuilder strBuilder3 = strBuilder0.insert(1717, false);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(4626, strBuilder0.capacity());
      assertEquals(4626, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4626, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4626, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(4626, strBuilder3.length());
      assertEquals(4626, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      List list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 1717, (-864));
      assertEquals(9, charArray0.length);
      assertTrue(list1.equals((Object)list0));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', 'w', 'H', 'h'}, charArray0);
      assertEquals(4626, strBuilder0.capacity());
      assertEquals(4626, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4626, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      StrBuilder strBuilder4 = strBuilder2.replaceFirst('F', 'H');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(4626, strBuilder0.capacity());
      assertEquals(4626, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4626, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4626, strBuilder2.length());
      assertEquals(4626, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4626, strBuilder2.size());
      assertEquals(4626, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4626, strBuilder4.size());
      assertEquals(4626, strBuilder4.length());
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1926));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(884, 884, ':');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(884, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(884, strBuilder0.length());
      assertEquals(884, strBuilder0.size());
      assertEquals(884, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(884, strBuilder1.length());
      assertEquals(884, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append('{');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(885, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(885, strBuilder0.length());
      assertEquals(885, strBuilder0.size());
      assertEquals(885, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(885, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(885, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(885, strBuilder2.capacity());
      assertEquals(885, strBuilder2.size());
      assertEquals(885, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((-1926)));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder3 = strBuilder1.minimizeCapacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(885, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(885, strBuilder0.length());
      assertEquals(885, strBuilder0.size());
      assertEquals(885, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(885, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(885, strBuilder1.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(885, strBuilder3.capacity());
      assertEquals(885, strBuilder3.size());
      assertEquals(885, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.appendWithSeparators((Collection) linkedList0, "0");
      assertFalse(linkedList0.contains((-1926)));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(885, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(885, strBuilder0.length());
      assertEquals(885, strBuilder0.size());
      assertEquals(885, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(885, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(885, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(885, strBuilder2.capacity());
      assertEquals(885, strBuilder2.size());
      assertEquals(885, strBuilder2.length());
      assertEquals(0, linkedList0.size());
      assertEquals(885, strBuilder4.size());
      assertEquals(885, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(885, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder(1);
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(1, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertNotNull(strBuilder5);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder6 = strBuilder5.appendWithSeparators(objectArray0, "Qhj\"F!dPV6AR3rv");
      assertEquals(4, objectArray0.length);
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertEquals(245, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(245, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(245, strBuilder5.length());
      assertEquals(245, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(245, strBuilder6.capacity());
      assertEquals(245, strBuilder6.length());
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder2.append((Object) strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(935, strBuilder0.capacity());
      assertEquals(935, strBuilder0.size());
      assertEquals(935, strBuilder0.length());
      assertEquals(935, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(935, strBuilder1.capacity());
      assertEquals(935, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(935, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(935, strBuilder2.capacity());
      assertEquals(935, strBuilder2.length());
      assertEquals(245, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(245, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(245, strBuilder5.length());
      assertEquals(935, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(935, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(935, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNotNull(strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder7.append((-2782));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertEquals(940, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(940, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(940, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(940, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(940, strBuilder1.size());
      assertEquals(940, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(940, strBuilder2.length());
      assertEquals(940, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(940, strBuilder2.capacity());
      assertEquals(245, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(245, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(245, strBuilder5.length());
      assertEquals(940, strBuilder7.size());
      assertEquals(940, strBuilder7.length());
      assertEquals(940, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(940, strBuilder8.size());
      assertEquals(940, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(940, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder2.appendFixedWidthPadRight((-176), (-4585), '{');
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder6);
      assertEquals(940, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(940, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(940, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(940, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(940, strBuilder1.size());
      assertEquals(940, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(940, strBuilder2.length());
      assertEquals(940, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(940, strBuilder2.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(940, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(940, strBuilder9.size());
      assertEquals(940, strBuilder9.length());
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder2.append("87UH8<\"");
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertNotSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder10);
      assertEquals(947, strBuilder10.capacity());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(947, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(947, strBuilder10.size());
      assertEquals(947, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(947, strBuilder0.size());
      assertEquals(947, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(947, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(947, strBuilder1.length());
      assertEquals(947, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(947, strBuilder2.capacity());
      assertEquals(947, strBuilder2.length());
      assertEquals(947, strBuilder2.size());
      assertNotNull(strBuilder10);
      
      StrBuilder strBuilder11 = strBuilder10.deleteAll("87UH8<\"");
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertNotSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder10);
      assertEquals(947, strBuilder10.capacity());
      assertEquals(940, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(940, strBuilder10.length());
      assertEquals(940, strBuilder0.length());
      assertEquals(947, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(940, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(940, strBuilder11.length());
      assertEquals(947, strBuilder11.capacity());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.isEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(940, strBuilder11.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(940, strBuilder1.size());
      assertEquals(947, strBuilder1.capacity());
      assertEquals(940, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(940, strBuilder2.length());
      assertEquals(940, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(947, strBuilder2.capacity());
      assertNotNull(strBuilder11);
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray((-1926), (-3503));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1926
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder2.indexOf(strMatcher0, (-446));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(117, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(117, strBuilder3.length());
      assertEquals(117, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst('w', 'm');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      char char0 = strBuilder1.charAt(0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals('[', char0);
      
      StrBuilder strBuilder5 = strBuilder0.append((float) 0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(120, strBuilder5.size());
      assertEquals(120, strBuilder5.length());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(120, strBuilder5.size());
      assertEquals(120, strBuilder5.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(120, strBuilder6.capacity());
      assertEquals(120, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(120, strBuilder6.length());
      assertNotNull(strBuilder6);
      
      String string0 = strBuilder4.toString();
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder1.capacity());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(120, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(120, strBuilder4.size());
      assertEquals(120, strBuilder4.length());
      assertNotNull(string0);
      
      int int1 = strBuilder1.lastIndexOf("", (-1));
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder1.capacity());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), int1);
      
      int int2 = strBuilder4.indexOf('[', 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder1.capacity());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(120, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(120, strBuilder4.size());
      assertEquals(120, strBuilder4.length());
      assertEquals(0, int2);
      
      StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(120, strBuilder5.size());
      assertEquals(120, strBuilder5.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(120, strBuilder6.capacity());
      assertEquals(120, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(120, strBuilder6.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(120, strBuilder7.length());
      assertEquals(120, strBuilder7.capacity());
      assertEquals(120, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNotNull(strBuilder7);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "F]L0WvI+um]W6";
      boolean boolean0 = strBuilder0.endsWith("F]L0WvI+um]W6");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
      
      int int0 = 2;
      StrBuilder strBuilder1 = strBuilder0.append("F]L0WvI+um]W6");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(13, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(2, 1L);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = ',';
      charArray0[2] = 'q';
      charArray0[3] = '3';
      char char0 = 'r';
      Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) "F]L0WvI+um]W6");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertSame(writer0, strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(writer0);
      
      StrBuilder strBuilder3 = strBuilder1.append("p(u(|RR?", 2, 2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(29, strBuilder3.length());
      assertEquals(29, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(1199, 'q');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1199
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("5.1");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("5.1", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("5.1", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.getNewLineText();
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("5.1", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(string0);
      
      StrBuilder strBuilder2 = new StrBuilder((String) null);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      boolean boolean0 = strBuilder1.contains(strMatcher0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("5.1", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("5.1", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(boolean0);
      
      StrBuilder strBuilder3 = strBuilder0.append(strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("5.1", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("5.1", strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.deleteAll('E');
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("5.1", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("5.1", strBuilder3.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("5.1", strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      
      String string1 = "Windows";
      StrBuilder strBuilder5 = strBuilder4.setNullText("Windows");
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Windows", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals("Windows", strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("Windows", strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertEquals("Windows", strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNotNull(strBuilder5);
      
      int int0 = strBuilder2.indexOf((String) null, 2605);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder5));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals((-1), int0);
      
      StringBuffer stringBuffer0 = strBuilder3.toStringBuffer();
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder5));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Windows", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals("Windows", strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder6 = strBuilder3.trim();
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder5));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Windows", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals("Windows", strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertEquals("Windows", strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertNotNull(strBuilder6);
      
      StringBuffer stringBuffer1 = stringBuffer0.append("sL>ZsE.X");
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder5));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertTrue(strBuilder2.equals((Object)strBuilder6));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Windows", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals("Windows", strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("sL>ZsE.X", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("sL>ZsE.X", stringBuffer1.toString());
      assertEquals(8, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      
      StrBuilder strBuilder7 = strBuilder1.appendFixedWidthPadRight(29, 29, 'E');
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Windows", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("Windows", strBuilder1.getNullText());
      assertEquals(29, strBuilder1.length());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertEquals("Windows", strBuilder7.getNullText());
      assertEquals(29, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(29, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder7.new StrBuilderReader();
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Windows", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("Windows", strBuilder1.getNullText());
      assertEquals(29, strBuilder1.length());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertEquals("Windows", strBuilder7.getNullText());
      assertEquals(29, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(29, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder8 = strBuilder0.append(stringBuffer0);
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(stringBuffer0, stringBuffer1);
      assertFalse(strBuilder8.isEmpty());
      assertEquals(37, strBuilder8.size());
      assertEquals("Windows", strBuilder8.getNullText());
      assertEquals(37, strBuilder8.length());
      assertEquals(37, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.size());
      assertEquals(37, strBuilder0.length());
      assertEquals("Windows", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(37, strBuilder3.length());
      assertEquals(37, strBuilder3.size());
      assertEquals("Windows", strBuilder3.getNullText());
      assertEquals(37, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("sL>ZsE.X", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertNotNull(strBuilder8);
      
      long long0 = strBuilder_StrBuilderReader0.skip(1L);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.size());
      assertEquals(37, strBuilder0.length());
      assertEquals("Windows", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("Windows", strBuilder1.getNullText());
      assertEquals(37, strBuilder1.size());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(37, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(37, strBuilder7.size());
      assertEquals(37, strBuilder7.length());
      assertEquals("Windows", strBuilder7.getNullText());
      assertEquals(37, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(1L, long0);
      
      StrBuilder strBuilder9 = strBuilder2.append("java.vm.info");
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertEquals(12, strBuilder9.size());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(32, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(12, strBuilder9.length());
      assertEquals(12, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder9);
      
      // Undeclared exception!
      try { 
        strBuilder4.insert((-2031), 'A');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2031
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('<');
      assertNotNull(strMatcher_CharMatcher0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher0);
      
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<', '<'}, charArray0);
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strMatcher2.equals((Object)strMatcher1));
      assertFalse(strMatcher2.equals((Object)strMatcher0));
      assertNotSame(strMatcher2, strMatcher1);
      assertNotSame(strMatcher2, strMatcher0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<', '<'}, charArray0);
      assertNotNull(strMatcher2);
      
      StrMatcher strMatcher3 = StrMatcher.charMatcher('<');
      assertFalse(strMatcher3.equals((Object)strMatcher_CharMatcher0));
      assertNotSame(strMatcher3, strMatcher_CharMatcher0);
      assertNotNull(strMatcher3);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      StrMatcher strMatcher4 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher4);
      
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = 'n';
      charArray1[4] = '<';
      char[] charArray2 = strBuilder0.getChars(charArray1);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertArrayEquals(new char[] {'K', '<', '<', 'n', '<'}, charArray2);
      assertArrayEquals(new char[] {'K', '<', '<', 'n', '<'}, charArray1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray2);
      
      Integer integer0 = new Integer(1316);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1316, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("pH~#GeT", "pH~#GeT");
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.size());
      assertEquals(28, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder1.contains(strMatcher1);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertFalse(strMatcher1.equals((Object)strMatcher2));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strMatcher1, strMatcher0);
      assertNotSame(strMatcher1, strMatcher2);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.size());
      assertFalse(boolean0);
      
      StrBuilder strBuilder3 = strBuilder2.setLength(1516);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1516, strBuilder0.length());
      assertEquals(1516, strBuilder0.capacity());
      assertEquals(1516, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1516, strBuilder1.length());
      assertEquals(1516, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1516, strBuilder1.capacity());
      assertEquals(1516, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1516, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1516, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1516, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(1516, strBuilder3.capacity());
      assertEquals(1516, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll('<', 'K');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1516, strBuilder0.length());
      assertEquals(1516, strBuilder0.capacity());
      assertEquals(1516, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1516, strBuilder4.length());
      assertEquals(1516, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1516, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      boolean boolean1 = strBuilder4.contains('\'');
      assertTrue(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1516, strBuilder0.length());
      assertEquals(1516, strBuilder0.capacity());
      assertEquals(1516, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1516, strBuilder4.length());
      assertEquals(1516, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1516, strBuilder4.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "r\"j{e >KyxW";
      StrBuilder strBuilder0 = new StrBuilder("r\"j{e >KyxW");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 9;
      StrBuilder strBuilder1 = strBuilder0.insert(9, 0.0F);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.insert(9, 0.0F);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertEquals(17, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(43, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.insert(9, false);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(22, strBuilder3.length());
      assertEquals(43, strBuilder3.capacity());
      assertEquals(22, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      char char0 = 'w';
      StrBuilder strBuilder4 = strBuilder0.replaceFirst('L', 'w');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(43, strBuilder4.capacity());
      assertEquals(22, strBuilder4.length());
      assertEquals(22, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher0);
      
      int int1 = strBuilder3.lastIndexOf(strMatcher0, 117);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(22, strBuilder3.length());
      assertEquals(43, strBuilder3.capacity());
      assertEquals(22, strBuilder3.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), int1);
      
      String string1 = null;
      StrBuilder strBuilder5 = strBuilder3.deleteAll((String) null);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(22, strBuilder3.length());
      assertEquals(43, strBuilder3.capacity());
      assertEquals(22, strBuilder3.size());
      assertEquals(22, strBuilder5.length());
      assertEquals(22, strBuilder5.size());
      assertEquals(43, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      
      // Undeclared exception!
      try { 
        strBuilder5.replace((-1), (-1), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-284));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append((StrBuilder) null, (-284), (-284));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder0.leftString((-284));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1482, (long) (-284));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1482
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(4);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder1.size());
      assertEquals(4, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.toString();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder1.size());
      assertEquals(4, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(4, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'g';
      charArray0[2] = 'j';
      charArray0[3] = '0';
      charArray0[4] = '\"';
      charArray0[5] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\"', 'g', 'j', '0', '\"', 'u'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\"gj0\"u", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(6, charArray0.length);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'\"', 'g', 'j', '0', '\"', 'u'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\"gj0\"u", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals((-1), int0);
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(int1 == int0);
      assertNotSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Af1D>yz|[>VCfcld=-,");
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("Af1D>yz|[>VCfcld=-,");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      int int0 = 0;
      StrBuilder strBuilder2 = strBuilder0.insert(0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Collection) null, "<m(ro>)wKc");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(51, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.setNullText("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder2.getNullText());
      assertEquals(1, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(51, strBuilder4.capacity());
      assertEquals(1, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      StrBuilder strBuilder5 = strBuilder1.appendWithSeparators((Iterator) listIterator0, "Invalid length: ");
      assertFalse(linkedList0.contains(0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(1, strBuilder0.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(51, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder5.getNullText());
      assertEquals(1, strBuilder5.length());
      assertEquals(1, strBuilder5.size());
      assertNotNull(strBuilder5);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertEquals(1, strBuilder0.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder2.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[2];
      char char0 = 'Z';
      charArray0[0] = 'Z';
      strBuilder_StrBuilderWriter0.write((String) null, 0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertEquals(57, strBuilder0.capacity());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder0.getNullText());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(57, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.length());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder2.getNullText());
      
      charArray0[1] = '|';
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(2, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertArrayEquals(new char[] {'Z', '|'}, charArray0);
      assertEquals(59, strBuilder0.capacity());
      assertEquals(59, strBuilder0.length());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder0.getNullText());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(59, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(59, strBuilder2.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder2.getNullText());
      assertEquals(59, strBuilder2.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      boolean boolean0 = strBuilder4.contains(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(59, strBuilder0.capacity());
      assertEquals(59, strBuilder0.length());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder0.getNullText());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(59, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(59, strBuilder2.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder2.getNullText());
      assertEquals(59, strBuilder2.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder4.getNullText());
      assertEquals(59, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(59, strBuilder4.length());
      assertEquals(59, strBuilder4.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      strBuilder0.size = (-875);
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-875), strBuilder0.length());
      assertEquals((-875), strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-875), strBuilder0.length());
      assertEquals((-875), strBuilder0.size());
      assertEquals((-875), strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals((-875), strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-875), strBuilder0.length());
      assertEquals((-875), strBuilder0.size());
      assertEquals((-875), strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals((-875), strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strMatcher1);
      
      // Undeclared exception!
      try { 
        strBuilder1.deleteFirst(strMatcher0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "s6H({W[Uw0xi\\";
      StrBuilder strBuilder0 = new StrBuilder("s6H({W[Uw0xi");
      assertEquals(12, strBuilder0.size());
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(12, strBuilder0.size());
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.size());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      int int0 = 0;
      int int1 = 1517;
      // Undeclared exception!
      try { 
        strBuilder1.append("s6H({W[Uw0xi", 0, 1517);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      charArray0[0] = '?';
      charArray0[1] = 'C';
      charArray0[2] = '$';
      charArray0[4] = 'R';
      charArray0[6] = '!';
      charArray0[7] = 'X';
      charArray0[8] = ']';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'?', 'C', '$', '\u0000', 'R', '\u0000', '!', 'X', ']'}, charArray0);
      assertArrayEquals(new char[] {'?', 'C', '$', '\u0000', 'R', '\u0000', '!', 'X', ']'}, charArray1);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      char[] charArray2 = strBuilder0.getChars((char[]) null);
      assertEquals(0, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray2);
      
      char[] charArray3 = new char[7];
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      charArray3[0] = 'Q';
      charArray3[1] = 'Q';
      charArray3[2] = '?';
      charArray3[3] = 'X';
      charArray3[4] = 'g';
      charArray3[5] = ']';
      charArray3[6] = ']';
      StrBuilder strBuilder3 = strBuilder2.append(charArray3);
      assertEquals(7, charArray3.length);
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'Q', 'Q', '?', 'X', 'g', ']', ']'}, charArray3);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(7, strBuilder3.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder2 = strBuilder0.append((Object) integer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(28, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(28, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(28, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.append((-2681L));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(5, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.setNewLineText("gw6~");
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(28, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals("gw6~", strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals("gw6~", strBuilder5.getNewLineText());
      assertEquals(28, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(28, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertEquals(28, charArray0.length);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertEquals(28, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals("gw6~", strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNotNull(charArray0);
      
      StringBuffer stringBuffer0 = strBuilder3.toStringBuffer();
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals("-2681", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder6 = strBuilder0.append(0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertEquals(29, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(29, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(29, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("gw6~", strBuilder6.getNewLineText());
      assertNotNull(strBuilder6);
      
      StrBuilder strBuilder7 = strBuilder0.append((Object) integer0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(57, strBuilder7.capacity());
      assertEquals("gw6~", strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(57, strBuilder7.size());
      assertEquals(57, strBuilder7.length());
      assertNotNull(strBuilder7);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('/');
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder8 = strBuilder2.replaceAll(strMatcher0, "gw6~");
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals("gw6~", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.size());
      assertEquals(57, strBuilder2.length());
      assertEquals(57, strBuilder8.capacity());
      assertEquals("gw6~", strBuilder8.getNewLineText());
      assertEquals(57, strBuilder8.length());
      assertEquals(57, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertNotNull(strBuilder8);
      
      StrBuilder strBuilder9 = strBuilder8.replaceFirst(strMatcher0, "gw6~");
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder1);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals("gw6~", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.size());
      assertEquals(57, strBuilder2.length());
      assertEquals(57, strBuilder8.capacity());
      assertEquals("gw6~", strBuilder8.getNewLineText());
      assertEquals(57, strBuilder8.length());
      assertEquals(57, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(57, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(57, strBuilder9.size());
      assertEquals(57, strBuilder9.capacity());
      assertEquals("gw6~", strBuilder9.getNewLineText());
      assertNotNull(strBuilder9);
      
      StrBuilder strBuilder10 = strBuilder9.append("");
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder10);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals("gw6~", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.size());
      assertEquals(57, strBuilder2.length());
      assertEquals(57, strBuilder8.capacity());
      assertEquals("gw6~", strBuilder8.getNewLineText());
      assertEquals(57, strBuilder8.length());
      assertEquals(57, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(57, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(57, strBuilder9.size());
      assertEquals(57, strBuilder9.capacity());
      assertEquals("gw6~", strBuilder9.getNewLineText());
      assertEquals(57, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(57, strBuilder10.capacity());
      assertEquals("gw6~", strBuilder10.getNewLineText());
      assertEquals(57, strBuilder10.length());
      assertNotNull(strBuilder10);
      
      StrBuilder strBuilder11 = strBuilder1.appendFixedWidthPadLeft((Object) strMatcher1, 0, '<');
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertEquals("gw6~", strBuilder11.getNewLineText());
      assertEquals(57, strBuilder11.length());
      assertEquals(57, strBuilder11.capacity());
      assertEquals(57, strBuilder11.size());
      assertFalse(strBuilder11.isEmpty());
      assertNull(strBuilder11.getNullText());
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder1.capacity());
      assertEquals("gw6~", strBuilder1.getNewLineText());
      assertEquals(57, strBuilder1.length());
      assertEquals(57, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder11);
      
      StrBuilder strBuilder12 = strBuilder2.replaceFirst("", "4;");
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder12.equals((Object)strBuilder3));
      assertFalse(strBuilder12.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder12, strBuilder5);
      assertSame(strBuilder12, strBuilder8);
      assertNotSame(strBuilder12, strBuilder3);
      assertNotSame(strBuilder12, strBuilder4);
      assertSame(strBuilder12, strBuilder10);
      assertSame(strBuilder12, strBuilder11);
      assertSame(strBuilder12, strBuilder0);
      assertSame(strBuilder12, strBuilder2);
      assertSame(strBuilder12, strBuilder9);
      assertSame(strBuilder12, strBuilder1);
      assertSame(strBuilder12, strBuilder6);
      assertSame(strBuilder12, strBuilder7);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder12);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder12.length());
      assertNull(strBuilder12.getNullText());
      assertEquals("gw6~", strBuilder12.getNewLineText());
      assertEquals(57, strBuilder12.capacity());
      assertFalse(strBuilder12.isEmpty());
      assertEquals(57, strBuilder12.size());
      assertEquals("gw6~", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.size());
      assertEquals(57, strBuilder2.length());
      assertNotNull(strBuilder12);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("gw6~"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder13 = strBuilder8.appendWithSeparators((Collection) linkedList0, "user.dir");
      assertFalse(linkedList0.contains("gw6~"));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder13.equals((Object)strBuilder3));
      assertFalse(strBuilder13.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder12);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder13, strBuilder3);
      assertNotSame(strBuilder13, strBuilder4);
      assertSame(strBuilder13, strBuilder1);
      assertSame(strBuilder13, strBuilder2);
      assertSame(strBuilder13, strBuilder9);
      assertSame(strBuilder13, strBuilder8);
      assertSame(strBuilder13, strBuilder10);
      assertSame(strBuilder13, strBuilder7);
      assertSame(strBuilder13, strBuilder11);
      assertSame(strBuilder13, strBuilder12);
      assertSame(strBuilder13, strBuilder6);
      assertSame(strBuilder13, strBuilder0);
      assertSame(strBuilder13, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder12);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder13);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder11);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder13);
      assertSame(strBuilder8, strBuilder12);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(strBuilder13.isEmpty());
      assertEquals("gw6~", strBuilder13.getNewLineText());
      assertEquals(57, strBuilder13.capacity());
      assertNull(strBuilder13.getNullText());
      assertEquals(57, strBuilder13.size());
      assertEquals(57, strBuilder13.length());
      assertEquals("gw6~", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.size());
      assertEquals(57, strBuilder2.length());
      assertEquals(57, strBuilder8.capacity());
      assertEquals("gw6~", strBuilder8.getNewLineText());
      assertEquals(57, strBuilder8.length());
      assertEquals(57, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertNotNull(strBuilder13);
      
      int int0 = strBuilder2.lastIndexOf(strMatcher0, (-512));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder12);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder12);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder13);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals("gw6~", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.size());
      assertEquals(57, strBuilder2.length());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder14 = strBuilder8.replaceFirst((String) null, "");
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder14.equals((Object)strBuilder4));
      assertFalse(strBuilder14.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder12);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder14);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder14);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder12);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder13);
      assertSame(strBuilder14, strBuilder7);
      assertSame(strBuilder14, strBuilder2);
      assertSame(strBuilder14, strBuilder9);
      assertNotSame(strBuilder14, strBuilder4);
      assertNotSame(strBuilder14, strBuilder3);
      assertSame(strBuilder14, strBuilder1);
      assertSame(strBuilder14, strBuilder10);
      assertSame(strBuilder14, strBuilder0);
      assertSame(strBuilder14, strBuilder12);
      assertSame(strBuilder14, strBuilder13);
      assertSame(strBuilder14, strBuilder11);
      assertSame(strBuilder14, strBuilder8);
      assertSame(strBuilder14, strBuilder5);
      assertSame(strBuilder14, strBuilder6);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder11);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder14);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder13);
      assertSame(strBuilder8, strBuilder12);
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals("gw6~", strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals("gw6~", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(57, strBuilder2.size());
      assertEquals(57, strBuilder2.length());
      assertEquals(57, strBuilder14.size());
      assertFalse(strBuilder14.isEmpty());
      assertNull(strBuilder14.getNullText());
      assertEquals(57, strBuilder14.length());
      assertEquals(57, strBuilder14.capacity());
      assertEquals("gw6~", strBuilder14.getNewLineText());
      assertEquals(57, strBuilder8.capacity());
      assertEquals("gw6~", strBuilder8.getNewLineText());
      assertEquals(57, strBuilder8.length());
      assertEquals(57, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertNotNull(strBuilder14);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('~');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher2);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('g');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.replaceAll(strMatcher1, "");
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strMatcher1, strMatcher0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrMatcher strMatcher3 = StrMatcher.stringMatcher("");
      assertSame(strMatcher3, strMatcher2);
      assertNotNull(strMatcher3);
      
      String string0 = strBuilder3.leftString(3158);
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strMatcher1, strMatcher0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder4 = strBuilder0.replaceFirst(strMatcher0, "");
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'SM }A");
      assertEquals(38, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(false);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.size());
      assertEquals(38, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.midString(32, 1166);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = strBuilder0.append(905L);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(14, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(38, strBuilder2.capacity());
      assertEquals(14, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'I';
      charArray0[2] = '\"';
      charArray0[3] = '0';
      // Undeclared exception!
      try { 
        strBuilder2.append(charArray0, 1, 159);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 159
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w{@?n");
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = (-628);
      int int1 = 44;
      char[] charArray0 = new char[0];
      strBuilder0.buffer = charArray0;
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '?';
      charArray1[1] = '~';
      char char0 = 't';
      int int2 = 0;
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder0.contains('A');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
      
      int int1 = strBuilder0.indexOf("", 0);
      assertTrue(int1 == int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ZUvr2");
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(5, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(writer0);
      
      int int0 = (-3018);
      String string0 = "0";
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("0");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("0", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals("0", strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      strBuilder0.size = (-3018);
      assertEquals((-3018), strBuilder0.length());
      assertEquals((-3018), strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("0", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('=');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals((-3018), strBuilder0.length());
      assertEquals((-3018), strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("0", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-3018), strBuilder2.length());
      assertEquals((-3018), strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals("0", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      int int1 = strBuilder0.lastIndexOf("wR0-!@w4Vt?_,6");
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-3018), strBuilder0.length());
      assertEquals((-3018), strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("0", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(1584));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(1584);
      assertEquals(1584, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(1584));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(1584));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertTrue(linkedList0.contains(1584));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertEquals(2, linkedList0.size());
      assertEquals(56, strBuilder1.length());
      assertEquals(56, strBuilder1.size());
      assertEquals(1584, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendPadding(0, 'q');
      assertTrue(linkedList0.contains(1584));
      assertFalse(linkedList0.contains(0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertEquals(2, linkedList0.size());
      assertEquals(56, strBuilder1.length());
      assertEquals(56, strBuilder1.size());
      assertEquals(1584, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1584, strBuilder2.capacity());
      assertEquals(56, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      StrBuilder strBuilder3 = strBuilder0.append((String) null, 3032, (-5670));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1584, strBuilder3.capacity());
      assertEquals(56, strBuilder3.size());
      assertEquals(56, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder5 = strBuilder1.deleteAll(strMatcher0);
      assertTrue(linkedList0.contains(1584));
      assertFalse(linkedList0.contains(0));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertEquals(2, linkedList0.size());
      assertEquals(56, strBuilder1.length());
      assertEquals(56, strBuilder1.size());
      assertEquals(1584, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(56, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(1584, strBuilder5.capacity());
      assertEquals(56, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      
      StrMatcher strMatcher1 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder6 = strBuilder1.deleteAll(strMatcher1);
      assertTrue(linkedList0.contains(1584));
      assertFalse(linkedList0.contains(0));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertEquals(2, linkedList0.size());
      assertEquals(56, strBuilder1.length());
      assertEquals(56, strBuilder1.size());
      assertEquals(1584, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(56, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1584, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      
      charArray0[1] = 'q';
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(2, objectArray0.length);
      assertTrue(linkedList0.contains(1584));
      assertFalse(linkedList0.contains(0));
      assertEquals(2, linkedList0.size());
      assertNotNull(objectArray0);
      
      charArray0[2] = 'q';
      StrBuilder strBuilder7 = strBuilder1.append(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(linkedList0.contains(1584));
      assertFalse(linkedList0.contains(0));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertArrayEquals(new char[] {'q', 'q', 'q'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(59, strBuilder0.length());
      assertEquals(2, linkedList0.size());
      assertEquals(59, strBuilder7.size());
      assertEquals(1584, strBuilder7.capacity());
      assertEquals(59, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(59, strBuilder1.length());
      assertEquals(1584, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(59, strBuilder1.size());
      assertNotNull(strBuilder7);
      
      boolean boolean2 = strBuilder7.contains((String) null);
      assertEquals(3, charArray0.length);
      assertTrue(linkedList0.contains(1584));
      assertFalse(linkedList0.contains(0));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertArrayEquals(new char[] {'q', 'q', 'q'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(59, strBuilder0.length());
      assertEquals(2, linkedList0.size());
      assertEquals(59, strBuilder7.size());
      assertEquals(1584, strBuilder7.capacity());
      assertEquals(59, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(59, strBuilder1.length());
      assertEquals(1584, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(59, strBuilder1.size());
      assertFalse(boolean2);
      
      StrBuilder strBuilder8 = strBuilder0.clear();
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.length());
      assertEquals(1584, strBuilder8.capacity());
      assertEquals(0, strBuilder8.size());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertNotNull(strBuilder8);
      
      StringBuffer stringBuffer0 = strBuilder8.toStringBuffer();
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.length());
      assertEquals(1584, strBuilder8.capacity());
      assertEquals(0, strBuilder8.size());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      strBuilder3.hashCode();
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertEquals(1584, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder3.insert(3032, 1584);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3032
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.length();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(48);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("", 48);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(';');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      String string0 = "org.apache.commons.lang.text.StrBuilder$StrBuilderReader";
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", 0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int0);
      
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-408));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, 39, '.');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(39, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(39, strBuilder2.length());
      assertEquals(39, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(39, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.insert(39, 0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(40, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(40, strBuilder3.length());
      assertEquals(40, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll('8', '8');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(40, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(40, strBuilder4.capacity());
      assertEquals(40, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder1.setLength(0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(0, strBuilder5.length());
      assertEquals(40, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      
      int int0 = strBuilder4.lastIndexOf("path.separator", 83);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(40, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '\'';
      charArray0[2] = 'K';
      charArray0[3] = '|';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 333);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 333
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder1.lastIndexOf(strMatcher0, (-3351));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1), int0);
      
      int int1 = strBuilder1.lastIndexOf("");
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1), int1);
      
      StrBuilder strBuilder2 = strBuilder1.append("");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      int int2 = 31;
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft((Object) strBuilder0, 31, 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(31, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder1.capacity());
      assertEquals(31, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(31, strBuilder2.capacity());
      assertEquals(31, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder2.size());
      assertEquals(31, strBuilder3.length());
      assertEquals(31, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(31, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      int int3 = strBuilder1.indexOf('w', (-1));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(31, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder1.capacity());
      assertEquals(31, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.length());
      assertEquals((-1), int3);
      
      StrBuilder strBuilder4 = strBuilder1.append((-1L));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.appendFixedWidthPadLeft((Object) strBuilder0, (-1), 'E');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(33, strBuilder5.length());
      assertEquals(33, strBuilder5.capacity());
      assertEquals(33, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      
      Reader reader0 = strBuilder5.asReader();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(33, strBuilder5.length());
      assertEquals(33, strBuilder5.capacity());
      assertEquals(33, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(reader0.markSupported());
      assertTrue(reader0.ready());
      assertNotNull(reader0);
      
      int int4 = strBuilder1.capacity();
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, int4);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("9La{>?^%eH<$$");
      assertNotNull(strMatcher1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder5.new StrBuilderTokenizer();
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(33, strBuilder5.length());
      assertEquals(33, strBuilder5.capacity());
      assertEquals(33, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset("");
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(33, strBuilder5.length());
      assertEquals(33, strBuilder5.capacity());
      assertEquals(33, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrBuilder strBuilder6 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(33, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(33, strBuilder6.capacity());
      assertEquals(33, strBuilder6.length());
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(33, strBuilder5.length());
      assertEquals(33, strBuilder5.capacity());
      assertEquals(33, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder6);
      
      String string1 = strBuilder4.midString((-3351), (-1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("", string1);
      assertNotNull(string1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder7 = strBuilder6.deleteAll("");
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(33, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(33, strBuilder6.capacity());
      assertEquals(33, strBuilder6.length());
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(33, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(33, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(33, strBuilder7.capacity());
      assertEquals(33, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.length());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(33, strBuilder5.length());
      assertEquals(33, strBuilder5.capacity());
      assertEquals(33, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder7);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      String string0 = strBuilder0.rightString(0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 1391);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(2);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      
      stringBuffer0.trimToSize();
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertNotSame(stringBuffer0, stringBuffer1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(154, '?');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(154, strBuilder0.capacity());
      assertEquals(154, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(154, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(154, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(154, strBuilder2.size());
      assertEquals(154, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.insert(2, (double) 2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(157, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(157, strBuilder0.length());
      assertEquals(157, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(157, strBuilder1.capacity());
      assertEquals(157, strBuilder1.size());
      assertEquals(157, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(157, strBuilder3.length());
      assertEquals(157, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(157, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      strBuilder3.buffer = null;
      assertFalse(strBuilder0.isEmpty());
      assertEquals(157, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(157, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(157, strBuilder1.size());
      assertEquals(157, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(157, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(157, strBuilder3.size());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        charBuffer0.subSequence(2721, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer[not tokenized yet]");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.capacity());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "n&^*_N,]XwD[Z");
      assertEquals(13, stringBuffer0.length());
      assertEquals("n&^*_N,]XwD[Z", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.capacity());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.size());
      assertEquals(31, strBuilder1.length());
      assertEquals(63, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0, 0, 0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.capacity());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.size());
      assertEquals(13, stringBuffer0.length());
      assertEquals("n&^*_N,]XwD[Z", stringBuffer0.toString());
      assertEquals(31, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(31, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(63, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) "n&^*_N,]XwD[Z", 2928, '(');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2959, strBuilder0.length());
      assertEquals(2959, strBuilder0.size());
      assertEquals(2959, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2959, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(2959, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2959, strBuilder0.length());
      assertEquals(2959, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      StrBuilder strBuilder4 = strBuilder0.replaceAll("", (String) null);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2959, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2959, strBuilder0.length());
      assertEquals(2959, strBuilder0.size());
      assertEquals(2959, strBuilder4.size());
      assertEquals(2959, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2959, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = 'C';
      charArray0[6] = '(';
      charArray0[7] = '(';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 2928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows 9");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '$';
      charArray0[2] = 'm';
      charArray0[3] = 'Q';
      charArray0[4] = 'C';
      charArray0[5] = 'i';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {'k', '$', 'm', 'Q', 'C', 'i'}, charArray0);
      assertNotNull(strMatcher1);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotSame(strMatcher0, strMatcher1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(7, int0);
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('A');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight(2, 0, 'F');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(2, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendNull();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(2, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      String string0 = strBuilder2.leftString(0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(2, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      boolean boolean0 = strBuilder1.endsWith((String) null);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[6];
      StrMatcher strMatcher0 = StrMatcher.charMatcher('|');
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder4 = strBuilder2.replaceFirst(strMatcher0, (String) null);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(2, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(2, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.append("^^");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.capacity());
      assertEquals(2, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(2, strBuilder5.capacity());
      assertEquals(2, strBuilder5.length());
      assertNotNull(strBuilder5);
      
      charArray0[0] = '|';
      charArray0[1] = 'F';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'F';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(6, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertArrayEquals(new char[] {'^', '^', 'A', 'A', 'A', 'F'}, charArray0);
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(2, int0);
      
      strBuilder_StrBuilderReader0.reset();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder6 = strBuilder3.append((String) null);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2, strBuilder3.capacity());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder6.capacity());
      assertEquals(2, strBuilder6.length());
      assertEquals(2, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'^', '^', 'A', 'A', 'A', 'F'}, charArray0);
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder7 = strBuilder3.replaceAll((StrMatcher) strMatcher_StringMatcher0, "Irix");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2, strBuilder3.capacity());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder7.size());
      assertEquals(2, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(2, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertNotNull(strBuilder7);
      
      int int1 = strBuilder2.size();
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.capacity());
      assertEquals(2, int1);
      
      StrBuilder strBuilder8 = strBuilder3.append(false);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder3.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(7, strBuilder8.length());
      assertEquals(7, strBuilder8.capacity());
      assertEquals(7, strBuilder8.size());
      assertNotNull(strBuilder8);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring((-1142), (-1772));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1142
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('V', 3000);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder2 = strBuilder0.setNullText("");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(9);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(9, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*mn;Z\"Up|q4!4`*<C<");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("{");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder1.lastIndexOf(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder2 = strBuilder1.append((-1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(20, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(50, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(20, strBuilder2.length());
      assertEquals(20, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = new StrBuilder("*mn;Z\"Up|q4!4`*<C<");
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertEquals(18, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(50, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertEquals(18, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(50, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean1 = strBuilder_StrBuilderReader0.ready();
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertEquals(18, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(50, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((-1L));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long0);
      
      strBuilder_StrBuilderReader0.mark(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      long long1 = strBuilder_StrBuilderReader0.skip(0L);
      assertTrue(long1 == long0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long1);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "8?Ffx");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('Q');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher1 = StrMatcher.stringMatcher("8?Ffx");
      assertNotNull(strMatcher1);
      
      // Undeclared exception!
      try { 
        strBuilder2.insert(114, "8?Ffx");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 114
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4");
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      int int0 = 0;
      char char0 = strBuilder0.charAt(0);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals('4', char0);
      
      charArray0[0] = '#';
      charArray0[1] = 'W';
      charArray0[2] = 'C';
      charArray0[3] = 'l';
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'4', 'W', 'C', 'l'}, charArray0);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(1, int1);
      
      strBuilder_StrBuilderReader0.mark(120);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "4");
      assertEquals(0, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(boolean0);
      
      String string0 = strBuilder0.toString();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals("4", string0);
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, stringBuffer0.length());
      assertEquals("4", stringBuffer0.toString());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNotNull(stringBuffer0);
      
      int int2 = (-2578);
      StrBuilder strBuilder2 = strBuilder1.append((double) 1);
      assertEquals(0, objectArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(33, strBuilder2.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-2578), (-3018.0155));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2578
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('^');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      StrBuilder strBuilder2 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(6, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertArrayEquals(new char[] {'^', '^', '^', '^', '^', '^'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder3 = strBuilder0.ensureCapacity((-2640));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst(strMatcher0, "&s");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.append(strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
      
      int int0 = 585;
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(585);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 585
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("9Ay", 0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "9Ay");
      assertEquals(3, stringBuffer0.length());
      assertEquals("9Ay", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('<');
      assertNotNull(strMatcher_CharMatcher0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher0);
      
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<', '<'}, charArray0);
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strMatcher2.equals((Object)strMatcher0));
      assertFalse(strMatcher2.equals((Object)strMatcher1));
      assertNotSame(strMatcher2, strMatcher0);
      assertNotSame(strMatcher2, strMatcher1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<', '<'}, charArray0);
      assertNotNull(strMatcher2);
      
      StrMatcher strMatcher3 = StrMatcher.charMatcher('<');
      assertFalse(strMatcher3.equals((Object)strMatcher_CharMatcher0));
      assertNotSame(strMatcher3, strMatcher_CharMatcher0);
      assertNotNull(strMatcher3);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
      assertFalse(strMatcher_CharMatcher0.equals((Object)strMatcher3));
      assertNotSame(strMatcher_CharMatcher0, strMatcher3);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      StrMatcher strMatcher4 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher4);
      
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = 'n';
      charArray1[4] = '<';
      char[] charArray2 = strBuilder0.getChars(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'K', '<', '<', 'n', '<'}, charArray1);
      assertArrayEquals(new char[] {'K', '<', '<', 'n', '<'}, charArray2);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(charArray2);
      
      Integer integer0 = new Integer(1316);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1316, (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.size());
      assertEquals(28, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("pH~#GeT", "pH~#GeT");
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.size());
      assertEquals(28, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(28, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(28, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      boolean boolean1 = strBuilder1.contains(strMatcher1);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertFalse(strMatcher1.equals((Object)strMatcher2));
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strMatcher1, strMatcher2);
      assertNotSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<', '<'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.size());
      assertEquals(28, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(boolean1);
      
      StrBuilder strBuilder3 = strBuilder2.setLength(1516);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(1516, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1516, strBuilder0.size());
      assertEquals(1516, strBuilder0.capacity());
      assertEquals(1516, strBuilder1.length());
      assertEquals(1516, strBuilder1.size());
      assertEquals(1516, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1516, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1516, strBuilder2.capacity());
      assertEquals(1516, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1516, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(1516, strBuilder3.capacity());
      assertEquals(1516, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.replaceAll('<', 'K');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1516, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1516, strBuilder0.size());
      assertEquals(1516, strBuilder0.capacity());
      assertEquals(1516, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1516, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1516, strBuilder4.size());
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(0, 57);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write((String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'w';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = '%';
      charArray0[5] = 'y';
      charArray0[6] = '<';
      charArray0[7] = '+';
      charArray0[8] = 's';
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'T', 'w', 'z', 'z', '%', 'y', '<', '+', 's'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      int int0 = 2577;
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("J\"Z?2<", 2577, 2577);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(193);
      assertEquals(0, strBuilder0.length());
      assertEquals(193, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(193, 193);
      assertEquals(0, strBuilder0.length());
      assertEquals(193, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('8');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(193, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(193, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "java.runtime.name";
      StrBuilder strBuilder0 = new StrBuilder("java.runtime.name");
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = (-383);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(0, 0, 'B');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertEquals(49, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      int int1 = 2;
      StrBuilder strBuilder2 = strBuilder1.setCharAt(2, 'B');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertEquals(49, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder2.length());
      assertEquals(49, strBuilder2.capacity());
      assertEquals(17, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft(object0, 3502, 'B');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(3519, strBuilder0.length());
      assertEquals(3519, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3519, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3519, strBuilder1.capacity());
      assertEquals(3519, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(3519, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3519, strBuilder2.length());
      assertEquals(3519, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(3519, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(3519, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3519, strBuilder3.length());
      assertEquals(3519, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder2.replace(strMatcher0, "java.runtime.name", 796, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder1.endsWith("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.size());
      assertTrue(boolean0);
      
      int int0 = 0;
      StrBuilder strBuilder2 = strBuilder1.insert(0, (double) 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(23, strBuilder2.length());
      assertEquals(52, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append((Object) "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.size());
      assertEquals(50, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder1.size());
      assertEquals(50, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(50, strBuilder2.size());
      assertEquals(50, strBuilder2.length());
      assertEquals(52, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(52, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(50, strBuilder3.length());
      assertEquals(50, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.append('d');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.length());
      assertEquals(51, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(51, strBuilder2.size());
      assertEquals(51, strBuilder2.length());
      assertEquals(52, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(52, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(51, strBuilder3.length());
      assertEquals(51, strBuilder3.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(51, strBuilder4.size());
      assertEquals(52, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(51, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.length());
      assertEquals(51, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) "Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertSame(writer0, strBuilder_StrBuilderWriter0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(71, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(71, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(71, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(71, strBuilder1.size());
      assertEquals(71, strBuilder1.length());
      assertNotNull(writer0);
      
      strBuilder_StrBuilderWriter0.flush();
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(71, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(71, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(71, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(71, strBuilder1.size());
      assertEquals(71, strBuilder1.length());
      
      int int1 = (-872);
      int int2 = strBuilder0.indexOf("Invalid startIndex: ", (-872));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(71, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(71, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, int2);
      
      int int3 = 522;
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      char char0 = '@';
      charArray0[1] = '@';
      // Undeclared exception!
      try { 
        strBuilder1.getChars((-872), 522, charArray0, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -872
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'G';
      charArray0[2] = '\"';
      charArray0[3] = 'a';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'a', 'G', '\"', 'a'}, charArray0);
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("1.6");
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotSame(strMatcher1, strMatcher0);
      assertNotNull(strMatcher1);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 2);
      assertEquals(4, charArray0.length);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotSame(strMatcher0, strMatcher1);
      assertArrayEquals(new char[] {'a', 'G', '\"', 'a'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int0);
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset();
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "q|H(a;@'");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft((-1), (-1), '6');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.replaceAll('\"', 'a');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.append(charArray0);
      assertEquals(4, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertArrayEquals(new char[] {'a', 'G', '\"', 'a'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(4, strBuilder3.size());
      assertEquals(4, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(4, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.appendNewLine();
      assertEquals(4, charArray0.length);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertArrayEquals(new char[] {'a', 'G', '\"', 'a'}, charArray0);
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(5, strBuilder5.size());
      assertEquals(5, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder6.length());
      assertEquals(5, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(5, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder3.toCharArray((-188), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -188
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 32;
      // Undeclared exception!
      try { 
        strBuilder0.delete(32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'s', 'Q'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("sQ", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'s', 'Q'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("sQ", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals((-1), int0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '8';
      charArray1[1] = '$';
      charArray1[2] = 'v';
      charArray1[3] = 'E';
      charArray1[4] = '!';
      charArray1[5] = '0';
      charArray1[6] = '<';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray1, 117, (-371));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.delete(102, (-956));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-1324);
      StrBuilder strBuilder0 = new StrBuilder((-1324));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("F]L0WvI+um]W6");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
      
      int int0 = 2;
      StrBuilder strBuilder1 = strBuilder0.append("F]L0WvI+um]W6");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(13, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(2, 1L);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder2.size());
      assertEquals(14, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = ',';
      charArray0[2] = 'q';
      charArray0[3] = '3';
      char char0 = 'r';
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(1199, 'q');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1199
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, '8');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = (-1);
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = "X%uArmufCYl\\";
      String string1 = "";
      StrBuilder strBuilder1 = strBuilder0.append("");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll(strMatcher0, "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace(strMatcher0, "X%uArmufCYl", (-1), (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[9];
      String string0 = strBuilder_StrBuilderTokenizer0.previousToken();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(string0);
      
      charArray0[0] = 'm';
      charArray0[1] = '\'';
      charArray0[2] = '`';
      charArray0[3] = ',';
      charArray0[4] = 'l';
      charArray0[5] = '.';
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      charArray0[6] = 'w';
      charArray0[7] = 'H';
      charArray0[8] = 'h';
      int int0 = strMatcher0.isMatch(charArray0, 1717, 0, 101);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', 'w', 'H', 'h'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, int0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(4621);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4621, strBuilder1.capacity());
      assertEquals(4621, strBuilder1.length());
      assertEquals(4621, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4621, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4621, strBuilder0.size());
      assertEquals(4621, strBuilder0.length());
      assertNotNull(strBuilder1);
      
      int int1 = strBuilder0.lastIndexOf(strMatcher0, 0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4621, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4621, strBuilder0.size());
      assertEquals(4621, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), int1);
      
      int int2 = strBuilder0.lastIndexOf("`?d^=c@jraB?~;tI");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4621, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4621, strBuilder0.size());
      assertEquals(4621, strBuilder0.length());
      assertEquals((-1), int2);
      
      StrBuilder strBuilder2 = strBuilder0.insert(1717, false);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4626, strBuilder0.length());
      assertEquals(4626, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4626, strBuilder0.capacity());
      assertEquals(4626, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(4626, strBuilder2.length());
      assertEquals(4626, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      List list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 1717, (-864));
      assertEquals(9, charArray0.length);
      assertTrue(list1.equals((Object)list0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'m', '\'', '`', ',', 'l', '.', 'w', 'H', 'h'}, charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4626, strBuilder0.length());
      assertEquals(4626, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4626, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      StrBuilder strBuilder3 = strBuilder1.replaceFirst('F', 'H');
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder1.getNullText());
      assertEquals(4626, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4626, strBuilder1.capacity());
      assertEquals(4626, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4626, strBuilder0.length());
      assertEquals(4626, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4626, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(4626, strBuilder3.size());
      assertEquals(4626, strBuilder3.capacity());
      assertEquals(4626, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = 'R';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 0, 'R');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = "";
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.replace(strMatcher0, "", 0, 1459, 0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.clear();
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      
      String string1 = strBuilder0.rightString(0);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder6));
      assertTrue(strBuilder0.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        strBuilder3.insert(2, (Object) strBuilder5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.capacity();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, int0);
      
      String string0 = "~Jjv=>";
      StrBuilder strBuilder1 = strBuilder0.replaceAll("~Jjv=>", "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("");
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder3 = strBuilder1.replace(strMatcher0, "java.endorsed.dirs", 0, 0, (-1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(32, "~Jjv=>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.rightString(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = strBuilder0.append((-2200.0960478907));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertEquals("Invalid startIndex: ", strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((Object) "", 0, '$');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertEquals("Invalid startIndex: ", strBuilder2.getNullText());
      assertEquals(16, strBuilder3.size());
      assertEquals("Invalid startIndex: ", strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(16, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("org.apache.commons.lang.text.StrMatcher$TrimMatcher");
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('/');
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst(strMatcher0, "org.apache.commons.lang.text.StrMatcher$TrimMatcher");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder1.size());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(16, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(16, strBuilder4.size());
      assertEquals("Invalid startIndex: ", strBuilder4.getNullText());
      assertNotNull(strBuilder4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      Reader reader0 = strBuilder0.asReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(reader0.markSupported());
      assertFalse(reader0.ready());
      assertNotNull(reader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = '+';
      charArray0[2] = '}';
      charArray0[3] = 'G';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = '9';
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(7, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'x', '+', '}', 'G', ']', ']', '9'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Object[]) null, "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      strBuilder0.hashCode();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray1 = strBuilder2.toCharArray();
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'x', '+', '}', 'G', ']', ']', '9'}, charArray1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.length());
      assertNotNull(charArray1);
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("");
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.append(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertArrayEquals(new char[] {'x', '+', '}', 'G', ']', ']', '9'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(14, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(14, strBuilder4.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(14, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.append((-1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(16, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(16, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(16, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(16, strBuilder2.size());
      assertNotNull(strBuilder5);
      
      StringBuffer stringBuffer0 = strBuilder5.toStringBuffer();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(16, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(16, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertEquals("x+}G]]9x+}G]]9-1", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(16, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(16, strBuilder2.size());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(",qL");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(boolean0);
      
      strBuilder0.hashCode();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(44);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("h<");
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains(")=;L_(|seMOm7:");
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = (-2584);
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("", "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-2584), object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2584
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "*";
      StrBuilder strBuilder0 = new StrBuilder("*");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('M');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getIgnoredMatcher();
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher_NoMatcher0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.charMatcher('');
      assertNotNull(strMatcher_CharMatcher0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher1 = (StrMatcher.CharMatcher)StrMatcher.charSetMatcher("*");
      assertFalse(strMatcher_CharMatcher1.equals((Object)strMatcher_CharMatcher0));
      assertNotSame(strMatcher_CharMatcher1, strMatcher_CharMatcher0);
      assertNotNull(strMatcher_CharMatcher1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      StrMatcher.CharMatcher strMatcher_CharMatcher2 = (StrMatcher.CharMatcher)StrMatcher.charSetMatcher(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(strMatcher_CharMatcher2.equals((Object)strMatcher_CharMatcher0));
      assertFalse(strMatcher_CharMatcher2.equals((Object)strMatcher_CharMatcher1));
      assertNotSame(strMatcher_CharMatcher2, strMatcher_CharMatcher0);
      assertNotSame(strMatcher_CharMatcher2, strMatcher_CharMatcher1);
      assertArrayEquals(new char[] {''}, charArray0);
      assertNotNull(strMatcher_CharMatcher2);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), int0);
      
      boolean boolean0 = strBuilder1.equals((Object) strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(boolean0);
      
      boolean boolean1 = strBuilder0.contains("*");
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(boolean1);
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Collection) null, "awt.toolkit");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(33, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder3.asTokenizer();
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(33, strBuilder3.capacity());
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      
      StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadLeft((-1), (-1), '');
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(1, strBuilder4.size());
      assertEquals(1, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(33, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder2.deleteFirst('S');
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder5.size());
      assertEquals(1, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(33, strBuilder5.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder5);
      
      char[] charArray1 = strBuilder1.toCharArray();
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'*'}, charArray1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNotNull(charArray1);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 2855;
      StrBuilder strBuilder0 = new StrBuilder(2855);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = 'V';
      StrBuilder strBuilder1 = strBuilder0.replaceAll('V', 'V');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(2855, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      int int1 = strBuilder1.lastIndexOf("x2*l");
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(2855, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1), int1);
      
      StrBuilder strBuilder2 = strBuilder1.append((double) 2855);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(2855, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2855, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      char char1 = 'z';
      StrTokenizer strTokenizer0 = strBuilder2.asTokenizer();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(2855, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2855, strBuilder2.capacity());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('z');
      assertNotNull(strMatcher1);
      
      int int2 = strBuilder2.lastIndexOf(strMatcher0, (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(2855, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2855, strBuilder2.capacity());
      assertEquals((-1), int2);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertFalse(strMatcher_NoMatcher0.equals((Object)strMatcher0));
      assertNotNull(strMatcher_NoMatcher0);
      
      int int3 = strBuilder2.indexOf((StrMatcher) strMatcher_NoMatcher0);
      assertFalse(strMatcher_NoMatcher0.equals((Object)strMatcher0));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strMatcher_NoMatcher0, strMatcher0);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(2855, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2855, strBuilder2.capacity());
      assertEquals((-1), int3);
      
      char char2 = 'q';
      StrBuilder strBuilder3 = strBuilder1.replaceFirst('q', 'V');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2855, strBuilder0.capacity());
      assertEquals(2855, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder3.size());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2855, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder2.insert((-1881), (Object) strMatcher_NoMatcher0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1881
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2535);
      assertEquals(2535, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('t');
      assertEquals(2535, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('}', 0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 0, '/');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst((StrMatcher) null, "B;Hfj&J");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst((StrMatcher) null);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      int int1 = strBuilder3.lastIndexOf("B;Hfj&J");
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals((-1), int1);
      
      StrBuilder strBuilder4 = strBuilder3.replaceFirst('/', '$');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder4.deleteAll('|');
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '$';
      charArray0[2] = '}';
      charArray0[3] = '$';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', '$', '}', '$'}, charArray0);
      assertArrayEquals(new char[] {'/', '$', '}', '$'}, charArray1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(charArray1);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder3.new StrBuilderWriter();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(4, charArray0.length);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'/', '$', '}', '$'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.length());
      assertEquals(117, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder2.indexOf(strMatcher0, (-446));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.length());
      assertEquals(117, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder3.capacity());
      assertEquals(117, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(117, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst('w', 'm');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.capacity());
      assertEquals(117, strBuilder4.capacity());
      assertEquals(117, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      char char0 = strBuilder1.charAt(0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(117, strBuilder0.capacity());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.capacity());
      assertEquals('[', char0);
      
      StrBuilder strBuilder5 = strBuilder0.append((float) 0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder5.size());
      assertEquals(120, strBuilder5.length());
      assertEquals(120, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      
      StrBuilder strBuilder6 = strBuilder5.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder5.size());
      assertEquals(120, strBuilder5.length());
      assertEquals(120, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(120, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(120, strBuilder6.size());
      assertEquals(120, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      
      int int1 = strBuilder1.lastIndexOf("", (-1));
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.capacity());
      assertEquals((-1), int1);
      
      int int2 = strBuilder4.indexOf('[', 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(120, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(120, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(120, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(120, strBuilder1.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(120, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(120, strBuilder4.size());
      assertEquals(120, strBuilder4.length());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '1';
      charArray0[2] = '3';
      charArray0[3] = 'K';
      charArray0[4] = '9';
      charArray0[5] = 'j';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'|', '1', '3', 'K', '9', 'j'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertTrue(int1 == int0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1379);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1379, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1379, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '\'';
      StrBuilder strBuilder1 = strBuilder0.replace(0, 1379, "!cKI+| >S2,wSPL1]%");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1379, strBuilder0.capacity());
      assertEquals(1379, strBuilder1.capacity());
      assertEquals(19, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '7';
      charArray1[1] = 'w';
      charArray1[2] = 'w';
      charArray1[3] = ']';
      strBuilder_StrBuilderWriter0.write(charArray1);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'7', 'w', 'w', ']'}, charArray1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertEquals(1379, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      
      charArray0[2] = 'k';
      charArray0[3] = 'r';
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder_StrBuilderWriter0, 0, 'r');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertEquals(1379, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1379, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      charArray0[4] = 'y';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 1379, 1379);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1379
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderReader0, (-677), '6');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding((-677), 'K');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equals((Object) "QLFd,MHQ");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.close();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = 2616;
      CharBuffer charBuffer0 = CharBuffer.allocate(2616);
      assertEquals(2616, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2616, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2616, charBuffer0.capacity());
      assertEquals(2616, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      Buffer buffer0 = charBuffer0.flip();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2616, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.remaining());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.position());
      assertEquals(2616, buffer0.capacity());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.arrayOffset());
      assertNotNull(buffer0);
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2616, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = charBuffer0.duplicate();
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer2, charBuffer1);
      assertNotSame(charBuffer2, charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2616, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer2.remaining());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isReadOnly());
      assertTrue(charBuffer2.hasArray());
      assertEquals(2616, charBuffer2.capacity());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.limit());
      assertEquals(0, charBuffer2.arrayOffset());
      assertNotNull(charBuffer2);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertFalse(int1 == int0);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2616, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2616, (Object) "5.0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2616
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = "length must be valid";
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("length must be valid");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      int int0 = 3265;
      StrBuilder strBuilder2 = new StrBuilder(3265);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(3265, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(3265, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(3265, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.stringMatcher("length must be valid");
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst(strMatcher0);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(3265, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(3265, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(3265, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(boolean0);
      
      String string1 = "";
      StrBuilder strBuilder4 = strBuilder1.replaceAll(strMatcher0, "");
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(3265, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      
      StrMatcher strMatcher2 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher2);
      
      // Undeclared exception!
      try { 
        strBuilder1.toCharArray(2605, 2605);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[0];
      int int0 = 190;
      int int1 = 2756;
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 190, 2756);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('~');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      charArray0[0] = 'm';
      StrBuilder strBuilder2 = strBuilder0.insert(0, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder2.indexOf(strMatcher0, 0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals((-1), int0);
      
      int int1 = 102;
      // Undeclared exception!
      try { 
        strBuilder2.validateIndex(102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 102
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = (-561);
      StrBuilder strBuilder0 = new StrBuilder((-561));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("end < start", "end < start");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(3111, (double) (-561));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3111
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strMatcher1, strMatcher0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder3 = strBuilder1.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strMatcher0, strMatcher1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      
      strBuilder2.size = 776;
      assertNull(strBuilder0.getNewLineText());
      assertEquals(776, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(776, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(776, strBuilder1.size());
      assertEquals(776, strBuilder1.length());
      assertEquals(776, strBuilder2.size());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(776, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder4 = strBuilder0.clear();
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.deleteAll(" ;Xw%#c{@u7-q");
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strMatcher0, strMatcher1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder6 = strBuilder1.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      
      // Undeclared exception!
      try { 
        strBuilder2.insert(44, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 440;
      StrBuilder strBuilder0 = new StrBuilder(440);
      assertEquals(440, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int1 = 0;
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(440, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(charArray0);
      
      int int2 = strBuilder0.lastIndexOf('[');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(440, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int2);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(440, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(440, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(440, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((-1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(440, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(440, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(440, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder2.leftString(0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(440, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(440, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(440, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = strBuilder1.replaceAll("", "AFU");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(440, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(440, strBuilder1.capacity());
      assertEquals(2, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(440, strBuilder3.capacity());
      assertEquals(2, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.append((-2960L));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(440, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(440, strBuilder4.capacity());
      assertEquals(7, strBuilder4.length());
      assertEquals(7, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      int int3 = 3537;
      // Undeclared exception!
      try { 
        strBuilder4.validateIndex(3537);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3537
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-284));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-284), (-284));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.leftString((-284));
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1482, (long) (-284));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1482
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.home");
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = 3786;
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      int int1 = strBuilder0.indexOf(strMatcher0, 3786);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int1);
      
      int int2 = 5012;
      int int3 = 3;
      String string0 = strBuilder0.substring(3, 3786);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("r.home", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("java.vendor.url", 3786, 5012);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(845);
      assertEquals(845, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((double) 845);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(845, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(845, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(845, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(845, strBuilder2.capacity());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '\'';
      charArray0[2] = 'V';
      charArray0[3] = 'w';
      charArray0[4] = 'F';
      charArray0[5] = '~';
      charArray0[6] = 'j';
      charArray0[7] = '\'';
      charArray0[8] = '8';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'n', '\'', 'V', 'w', 'F', '~', 'j', '\'', '8'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace((StrMatcher) strMatcher_CharSetMatcher0, "", 117, 117, 845);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((-1L));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, 0.0F);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(5, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertArrayEquals(new char[] {'0', '.', '0', '-', '1'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNotNull(charArray0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setEmptyTokenAsNull(true);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strMatcher0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "3Le_A+48kMV_";
      StrBuilder strBuilder0 = new StrBuilder("3Le_A+48kMV_");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.size());
      assertEquals(12, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("3Le_A+48kMV_");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.size());
      assertEquals(12, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(boolean0);
      
      char[] charArray0 = strBuilder1.toCharArray();
      assertEquals(0, charArray0.length);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(charArray0);
      
      int int0 = 4613;
      int int1 = (-1169);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-1169), '8');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1169
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((Object) strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.length());
      assertEquals(50, strBuilder1.size());
      assertEquals(50, strBuilder2.length());
      assertEquals(50, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(50, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.length());
      assertEquals(50, strBuilder1.size());
      assertFalse(boolean0);
      
      char char0 = '^';
      StrBuilder strBuilder3 = strBuilder1.deleteFirst('^');
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.length());
      assertEquals(50, strBuilder1.size());
      assertEquals(50, strBuilder3.capacity());
      assertEquals(50, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(50, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      char char1 = '@';
      int int0 = strBuilder0.indexOf('@', 969);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int0);
      
      char char2 = 'c';
      StrBuilder strBuilder4 = strBuilder2.append('c');
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      assertEquals(51, strBuilder1.size());
      assertEquals(51, strBuilder2.capacity());
      assertEquals(51, strBuilder2.size());
      assertEquals(51, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(51, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(51, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(51, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder3.replaceFirst(",FA", "FB{YWrS^jo*Wx\"5w>");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      assertEquals(51, strBuilder1.size());
      assertEquals(51, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(51, strBuilder3.size());
      assertEquals(51, strBuilder3.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(51, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(51, strBuilder5.length());
      assertEquals(51, strBuilder5.size());
      assertNotNull(strBuilder5);
      
      int int1 = 1090;
      // Undeclared exception!
      try { 
        strBuilder5.insert(1090, (-1L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1090
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 5;
      StrBuilder strBuilder0 = new StrBuilder(5);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.insert(5, (double) 5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(8, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('B');
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(8, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertEquals(8, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      int int1 = 323;
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'D';
      charArray0[2] = ',';
      char char0 = 'F';
      charArray0[3] = 'F';
      char char1 = 'G';
      charArray0[4] = 'G';
      // Undeclared exception!
      try { 
        strBuilder0.getChars(323, 323, charArray0, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 323
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 3644;
      StrBuilder strBuilder0 = new StrBuilder(3644);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(3644, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(3644);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(3644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3644, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(3644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(3644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(boolean0);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("");
      assertSame(strMatcher1, strMatcher0);
      assertNotNull(strMatcher1);
      
      boolean boolean1 = strBuilder0.contains(strMatcher0);
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strMatcher0, strMatcher1);
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(3644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring(3644, 3644);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        strBuilder0.insert(1956, (double) 1956);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1956
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "file.encoding");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder("u_S02*mhb ");
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertEquals(42, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(42, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("Caught a SecurityException reading the system property '");
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(56, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(88, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(1506);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(60, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(60, strBuilder1.size());
      assertEquals(88, strBuilder1.capacity());
      assertEquals(60, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(60, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder2.indexOf("Caught a SecurityException reading the system property '", (-1655));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(60, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(60, strBuilder1.size());
      assertEquals(88, strBuilder1.capacity());
      assertEquals(60, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(88, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(60, strBuilder2.length());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft((-434), 1506, 'Q');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(1566, strBuilder0.capacity());
      assertEquals(1566, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1566, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1566, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(1566, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1566, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.append(1079.0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(1572, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1572, strBuilder0.length());
      assertEquals(1572, strBuilder0.size());
      assertEquals(1572, strBuilder3.capacity());
      assertEquals(1572, strBuilder3.length());
      assertEquals(1572, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1572, strBuilder4.capacity());
      assertEquals(1572, strBuilder4.length());
      assertEquals(1572, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      
      Integer integer0 = new Integer((-1655));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1655), (int)integer0);
      assertNotNull(integer0);
      
      StrBuilder strBuilder5 = strBuilder2.append((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(1600, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1600, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1600, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1600, strBuilder1.capacity());
      assertEquals(1600, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1600, strBuilder1.size());
      assertEquals(1600, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1600, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1600, strBuilder2.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(1600, strBuilder5.size());
      assertEquals(1600, strBuilder5.length());
      assertEquals(1600, strBuilder5.capacity());
      assertNotNull(strBuilder5);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('?');
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharMatcher0, "N");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      int int0 = 3418;
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight(3418, 3418, '(');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(3418, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3418, strBuilder0.length());
      assertEquals(3418, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3418, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3418, strBuilder2.size());
      assertEquals(3418, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("N");
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder3 = strBuilder2.replaceAll("N", "cc!4-vn|9^I@+8bUR");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(3418, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3418, strBuilder0.length());
      assertEquals(3418, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3418, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3418, strBuilder2.size());
      assertEquals(3418, strBuilder2.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(3418, strBuilder3.length());
      assertEquals(3418, strBuilder3.size());
      assertEquals(3418, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("length must be valid");
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadRight((Object) "", 0, '?');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(3418, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3418, strBuilder0.length());
      assertEquals(3418, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3418, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3418, strBuilder2.size());
      assertEquals(3418, strBuilder2.length());
      assertEquals(3418, strBuilder4.size());
      assertEquals(3418, strBuilder4.length());
      assertEquals(3418, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(3418, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3418, strBuilder0.length());
      assertEquals(3418, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3418, strBuilder1.size());
      assertEquals(3418, strBuilder1.length());
      assertEquals(3418, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertEquals(3418, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3418, strBuilder0.length());
      assertEquals(3418, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3418, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3418, strBuilder2.size());
      assertEquals(3418, strBuilder2.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '?';
      charArray0[3] = '?';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 3418, 3418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.size());
      assertEquals(24, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      char char0 = 'M';
      int int0 = strBuilder1.lastIndexOf((StrMatcher) null, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.size());
      assertEquals(24, strBuilder1.length());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder2 = strBuilder0.append('M');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder0.size());
      assertEquals(25, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(25, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(56, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(25, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher((char[]) null);
      assertNotNull(strMatcher1);
      
      int int1 = 342;
      int int2 = strBuilder1.lastIndexOf(strMatcher0, 342);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder0.size());
      assertEquals(25, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(25, strBuilder1.size());
      assertEquals(25, strBuilder1.length());
      assertEquals(18, int2);
      
      int int3 = (-959);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-959));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2899, (double) 2899);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2899
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows");
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(7, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(1151);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1151
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      char char0 = '+';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(117, 0, '+');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      strBuilder1.buffer = charArray0;
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("gs!hQyV9Uz>>&U", "");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(1, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      String string0 = strBuilder0.toString();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators((Iterator) null, "");
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder3.deleteAll("0Ka,K(S");
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      // Undeclared exception!
      try { 
        strBuilder4.charAt(1043);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1043
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-711));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(1148, 0, 't');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.setCharAt((-711), 't');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -711
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll(strMatcher0, "ML#b2n4^(q#u\"");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher1 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher1);
      
      StringBuffer stringBuffer0 = strBuilder1.toStringBuffer();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder2.replaceFirst(strMatcher1, "-g0+epi,;G,");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder1.append(strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.append(2019.7372F);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(9, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(9, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      
      Writer writer0 = strBuilder1.asWriter();
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder1.size());
      assertNotNull(writer0);
      
      StrBuilder strBuilder6 = strBuilder0.reverse();
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(9, strBuilder6.size());
      assertNotNull(strBuilder6);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder3;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder3;
      objectArray0[3] = (Object) strMatcher0;
      StrBuilder strBuilder7 = strBuilder5.appendWithSeparators(objectArray0, "-g0+epi,;G,");
      assertEquals(4, objectArray0.length);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(254, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(254, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(254, strBuilder7.size());
      assertEquals(254, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(254, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(254, strBuilder0.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(254, strBuilder5.size());
      assertEquals(254, strBuilder5.length());
      assertEquals(254, strBuilder5.capacity());
      assertNotNull(strBuilder7);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "z:RKeWBf4a";
      StrBuilder strBuilder0 = new StrBuilder("z:RKeWBf4a");
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('<');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(42, strBuilder2.capacity());
      assertEquals(10, strBuilder2.length());
      assertNotNull(strBuilder2);
      
      int int0 = 0;
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder1, 0, 'b');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(10, strBuilder3.length());
      assertEquals(42, strBuilder3.capacity());
      assertEquals(10, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      int int1 = strBuilder2.lastIndexOf("z:RKeWBf4a", 4);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(42, strBuilder2.capacity());
      assertEquals(10, strBuilder2.length());
      assertEquals((-1), int1);
      
      StrBuilder strBuilder4 = strBuilder0.append((-475.159509));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(21, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(42, strBuilder4.capacity());
      assertEquals(21, strBuilder4.length());
      assertEquals(21, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertEquals(21, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(21, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(21, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = 'b';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 4, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      assertEquals(0, strBuilder0.size());
      assertEquals(4, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "java.compiler");
      assertFalse(linkedList0.contains("java.compiler"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(4, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(4, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(4, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrTokenizer strTokenizer0 = strBuilder0.asTokenizer();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("{A", "java.awt.headless");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.midString(0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = new StrBuilder("java.awt.headless");
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertEquals(49, strBuilder2.capacity());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertEquals(49, strBuilder2.capacity());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(49, strBuilder2.capacity());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, 0L);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      int int0 = (-4294);
      StrBuilder strBuilder2 = strBuilder0.ensureCapacity((-4294));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      
      int int1 = strBuilder2.indexOf((StrMatcher) null, 3398);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals((-1), int1);
      
      boolean boolean0 = strBuilder2.equals(strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      char[] charArray0 = new char[0];
      int int2 = 550;
      int int3 = 3963;
      // Undeclared exception!
      try { 
        strBuilder2.append(strBuilder1, 3963, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("z1d");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("z1d"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "wq9^AP;-9UVJ");
      assertFalse(linkedList0.contains("wq9^AP;-9UVJ"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(0, linkedList0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.setNullText("");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      
      int int0 = 0;
      StrBuilder strBuilder3 = strBuilder0.insert(0, 'y');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertNotNull(strBuilder3);
      
      int int1 = strBuilder3.validateRange(0, 115);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, int1);
      
      StrBuilder strBuilder4 = strBuilder3.replaceAll(",g", "");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder3.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) "");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertSame(writer0, strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertNotNull(writer0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(" hS+1;U\",#g&K", 115, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.getNullText();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('Y');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'e';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = '9';
      charArray0[6] = 'Y';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-3693), (-3693));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-844);
      StrBuilder strBuilder0 = new StrBuilder((-844));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((double) (-844));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('^');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert((-844), "java.ext.dirs");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -844
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strMatcher0;
      objectArray0[2] = (Object) strMatcher0;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[4] = (Object) strMatcher0;
      objectArray0[5] = (Object) strMatcher0;
      objectArray0[6] = (Object) strMatcher0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "w*Zk1f :5WD-y");
      assertEquals(7, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(508, strBuilder0.size());
      assertEquals(508, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(508, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(508, strBuilder1.size());
      assertEquals(508, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(508, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.indexOf(strMatcher0, (-282));
      assertSame(strBuilder0, strBuilder1);
      assertEquals(508, strBuilder0.size());
      assertEquals(508, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(508, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      int int1 = strBuilder0.indexOf(strMatcher0);
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(508, strBuilder0.size());
      assertEquals(508, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(508, strBuilder0.capacity());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$>G*(EL");
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "$>G*(EL", 2, ' ');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(18, strBuilder2.length());
      assertEquals(18, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(39, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft((Object) strBuilder0, 2, 'K');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(20, strBuilder2.size());
      assertEquals(20, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(39, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(20, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(20, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(39, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      
      char char0 = strBuilder1.charAt(2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals('G', char0);
      
      Reader reader0 = strBuilder0.asReader();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(reader0.markSupported());
      assertTrue(reader0.ready());
      assertNotNull(reader0);
      
      StrBuilder strBuilder4 = strBuilder2.clear();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertEquals(39, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder5 = strBuilder3.appendWithSeparators(objectArray0, "(a&dT[5.S6}[x~");
      assertEquals(0, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(39, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(39, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder5.new StrBuilderTokenizer();
      assertEquals(0, objectArray0.length);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(39, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(39, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      assertEquals(0, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(39, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(39, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'K';
      charArray0[3] = ' ';
      charArray0[4] = 'G';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'K', ' ', 'G'}, charArray0);
      assertNotNull(strMatcher1);
      
      int int0 = strBuilder5.indexOf(strMatcher0, 5);
      assertEquals(0, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(39, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(39, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(39, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4612));
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = 'l';
      StrBuilder strBuilder1 = new StrBuilder("`bX^XL_Gwy9 8GsBT^_");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertEquals(19, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertEquals(19, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(51, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(19, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1123, 'l');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1123
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.library.path");
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 829;
      strBuilder0.size = 1076;
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1076, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1076, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2016, (long) 2016);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2016
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.capacity();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, int0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring(32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("OGw8");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3468);
      assertEquals(3468, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'y';
      charArray0[2] = ';';
      charArray0[3] = 'n';
      charArray0[4] = 'V';
      charArray0[5] = '\'';
      charArray0[6] = 'D';
      charArray0[7] = 'g';
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(8, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertArrayEquals(new char[] {'f', 'y', ';', 'n', 'V', '\'', 'D', 'g'}, charArray0);
      assertEquals(3468, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3468, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "Mi-";
      StrBuilder strBuilder0 = new StrBuilder("Mi-");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("Mi-");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append((Object) strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(62, strBuilder0.capacity());
      assertEquals(62, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(62, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(62, strBuilder1.capacity());
      assertEquals(62, strBuilder1.size());
      assertEquals(62, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(62, strBuilder2.capacity());
      assertEquals(62, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(62, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'i';
      charArray0[2] = '&';
      charArray0[3] = 'e';
      charArray0[4] = '\\';
      charArray0[5] = '%';
      charArray0[6] = '>';
      // Undeclared exception!
      try { 
        strBuilder2.getChars(0, 48, charArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'L';
      charArray0[2] = 'r';
      charArray0[3] = 'h';
      charArray0[4] = 'A';
      charArray0[5] = 'v';
      charArray0[6] = 'r';
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 108
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("\"!NJW,?j", "");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Af1D>yz|[>VCfcld=-,");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("Af1D>yz|[>VCfcld=-,");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(51, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      int int0 = 0;
      StrBuilder strBuilder2 = strBuilder0.insert(0, 0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Collection) null, "<m(ro>)wKc");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(51, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder2.setNullText("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder0.getNullText());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(51, strBuilder4.capacity());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertNotNull(strBuilder4);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(0));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder1.appendWithSeparators((Iterator) listIterator0, "Invalid length: ");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("java.lang.Object");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.startsWith("java.lang.Object");
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      
      int int0 = strBuilder0.lastIndexOf('F', 0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1B1/lA%8;b");
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('o');
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("/");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterMatcher(strMatcher_NoMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals("1B1lA%8;b", string0);
      assertNotNull(string0);
      
      StrBuilder strBuilder2 = strBuilder1.append((-975L));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(13, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(42, strBuilder2.capacity());
      assertEquals(13, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1B1/lA%8;b");
      assertEquals(10, stringBuffer0.length());
      assertEquals("1B1/lA%8;b", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = (-2286);
      String string1 = strBuilder0.midString(0, (-2325));
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuffer0, (-2286), (-2286));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        strBuilder0.insert((-30), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -30
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = (-533);
      StrBuilder strBuilder0 = new StrBuilder((-533));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, (-1289), 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(2082);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 39, 2082);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 9, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char char0 = '^';
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "Invalid startIndex: ", 0, '^');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(52, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append('^');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(52, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(21, strBuilder2.size());
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.append(0.0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(52, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(24, strBuilder2.size());
      assertEquals(24, strBuilder2.length());
      assertEquals(52, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(24, strBuilder3.length());
      assertEquals(24, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid startIndex: ");
      assertEquals("Invalid startIndex: ", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder4 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("Invalid startIndex: ", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(44, strBuilder4.size());
      assertEquals(52, strBuilder4.capacity());
      assertEquals(44, strBuilder4.length());
      assertNotNull(strBuilder4);
      
      int int1 = 48;
      StrBuilder strBuilder5 = strBuilder4.appendFixedWidthPadRight(48, 48, 'i');
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(92, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(92, strBuilder0.size());
      assertEquals(92, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals("Invalid startIndex: ", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(92, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(92, strBuilder4.size());
      assertEquals(92, strBuilder4.length());
      assertEquals(92, strBuilder5.length());
      assertEquals(92, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(92, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      
      // Undeclared exception!
      try { 
        strBuilder4.append("Invalid startIndex: ", 48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2281));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("startIndex must be valid", (-2281), (-2281));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((String) null, 0, (-1141));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-2966));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2966
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      StrMatcher.charMatcher('I');
      StrBuilder strBuilder1 = strBuilder0.deleteAll("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      StrBuilder strBuilder2 = strBuilder1.appendNewLine();
      strBuilder2.appendPadding(0, 'I');
      StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0);
      strBuilder0.size();
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        strBuilder3.insert((-694), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -694
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[2];
      strBuilder0.appendFixedWidthPadRight(0, 0, 's');
      charArray0[0] = '6';
      charArray0[1] = '%';
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-2484), 0, charArray0, (-2484));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2484
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      int int0 = 32;
      char char0 = 'P';
      StrBuilder strBuilder1 = strBuilder0.deleteAll('P');
      int int1 = (-457);
      // Undeclared exception!
      try { 
        strBuilder1.replace(32, (-457), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = new StrBuilder(32);
      strBuilder1.append(true);
      StrBuilder strBuilder2 = strBuilder0.append((Object) strBuilder1);
      strBuilder2.substring(32, 32);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      int int0 = 1860;
      strBuilder_StrBuilderReader0.mark(1860);
      StrBuilder strBuilder3 = strBuilder0.insert(32, (-1L));
      char char0 = '6';
      // Undeclared exception!
      try { 
        strBuilder3.insert((-1226), '6');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1226
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 1816;
      StrBuilder strBuilder0 = new StrBuilder(1816);
      strBuilder0.asWriter();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      strBuilder_StrBuilderReader0.reset();
      strBuilder0.indexOf("'0");
      StrBuilder strBuilder1 = strBuilder0.reverse();
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '0';
      charArray0[2] = ' ';
      charArray0[3] = '#';
      charArray0[4] = 'p';
      charArray0[5] = '2';
      charArray0[6] = 'm';
      charArray0[7] = 'h';
      charArray0[8] = 'W';
      // Undeclared exception!
      try { 
        strBuilder1.getChars((-1), 1816, charArray0, (-1145));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "_";
      StrBuilder strBuilder0 = new StrBuilder("_");
      strBuilder0.rightString(108);
      char[] charArray0 = new char[0];
      strBuilder0.buffer = charArray0;
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      // Undeclared exception!
      try { 
        strBuilder1.appendNewLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.deleteAll('x');
      StrBuilder strBuilder2 = new StrBuilder();
      strBuilder1.appendFixedWidthPadRight((Object) strBuilder2, 0, 'x');
      StrBuilder strBuilder3 = strBuilder0.replace(0, 0, "");
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "f\"Np!s$!\"0n^;o>";
      StrBuilder strBuilder0 = new StrBuilder("f\"Np!s$!\"0n^;o>");
      char[] charArray0 = new char[1];
      char char0 = '%';
      strBuilder0.append((char[]) null);
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, (-603), (-555));
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      strBuilder1.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0);
      charArray0[0] = '%';
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 108, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 108
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.toCharArray(0, 1089);
      StrBuilder strBuilder1 = strBuilder0.setNewLineText(" \t\n\r\f");
      StrBuilder strBuilder2 = strBuilder0.append(false);
      strBuilder0.charAt(0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      strBuilder2.appendNewLine();
      StrBuilder strBuilder3 = strBuilder2.append(0L);
      strBuilder_StrBuilderTokenizer0.next();
      StrBuilder strBuilder4 = strBuilder1.append((Object) "false");
      strBuilder4.substring(0, 0);
      strBuilder1.equals(strBuilder0);
      char[] charArray0 = new char[0];
      strBuilder3.append(charArray0);
      strBuilder0.appendFixedWidthPadRight((Object) "", 0, 'f');
      strBuilder0.setLength(48);
      assertEquals(48, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5510);
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(766, 5510);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      strBuilder0.charAt(4);
      strBuilder0.rightString((-1939));
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(32);
      strBuilder0.endsWith("'H]t,2vFypKA%nhMf=");
      // Undeclared exception!
      try { 
        strBuilder1.insert(32, (-1L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.asReader();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Q\"");
      StrBuilder strBuilder1 = strBuilder0.clear();
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 2903, 112);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      StrBuilder strBuilder2 = strBuilder1.setLength(1098);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('l');
      char[] charArray0 = new char[2];
      int int0 = 1;
      StrMatcher.stringMatcher("");
      strBuilder2.insert(1, charArray0);
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      StrMatcher.charSetMatcher(charArray0);
      strBuilder2.lastIndexOf((StrMatcher) strMatcher_CharMatcher0);
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex((-4034));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4034
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '6';
      charArray0[2] = 'O';
      charArray0[3] = 'e';
      charArray0[4] = 'J';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
      
      strBuilder_StrBuilderReader0.mark(0);
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4612));
      char char0 = 'l';
      // Undeclared exception!
      try { 
        strBuilder0.insert(1123, 'l');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1123
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = 'X';
      charArray0[3] = 'U';
      charArray0[4] = 'x';
      charArray0[5] = '^';
      charArray0[6] = '.';
      charArray0[7] = 'W';
      strBuilder0.appendFixedWidthPadRight(69, 242, 'W');
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 2, 2);
      assertEquals(242, strBuilder0.capacity());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(277);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(277, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = "";
      strBuilder0.indexOf("");
      StrBuilder strBuilder1 = new StrBuilder();
      StrMatcher strMatcher0 = null;
      strBuilder1.replaceAll((StrMatcher) null, "");
      StrBuilder strBuilder2 = new StrBuilder((-1));
      strBuilder0.asWriter();
      strBuilder1.append((Object) strBuilder2);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, (-1), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      strBuilder0.isEmpty();
      StrMatcher strMatcher0 = StrMatcher.charMatcher('*');
      int int0 = (-1195);
      strBuilder1.appendPadding((-1195), '/');
      StrMatcher.charMatcher('u');
      strBuilder1.replaceAll(strMatcher0, "fgg0XqGjy$K(D2poV");
      // Undeclared exception!
      try { 
        strBuilder0.equals((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      strBuilder0.append((-655));
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-655), (-3040), charArray0, (-3040));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -655
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      char char0 = 'I';
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('I', 'G');
      int int1 = 0;
      // Undeclared exception!
      try { 
        strBuilder2.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2289));
      char char0 = 'U';
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity((-36));
      int int0 = 0;
      strBuilder0.indexOf('U', 0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      strBuilder_StrBuilderReader0.ready();
      // Undeclared exception!
      try { 
        strBuilder1.insert((-2289), (float) (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2289
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'e';
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 60, 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 60
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = "startIndex must be valid";
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = (-2477);
      // Undeclared exception!
      try { 
        strBuilder0.insert((-2477), "rvQ#q9al");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2477
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, 724L);
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mac OS X");
      strBuilder0.validateIndex(0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = '=';
      charArray0[2] = 'e';
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.replaceFirst('?', 'x');
      strBuilder0.getNewLineText();
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("user.name");
      StrBuilder strBuilder2 = strBuilder1.replaceAll('W', ',');
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("bPee$@q");
      strBuilder0.midString(0, 0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append(true);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.getContent();
      strBuilder0.replaceFirst('q', 'q');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, (-1), ']');
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.trim();
      StrBuilder strBuilder2 = strBuilder1.ensureCapacity(1660);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('o');
      String string0 = "";
      strBuilder2.replaceAll((StrMatcher) strMatcher_CharMatcher0, "");
      int int0 = 4;
      // Undeclared exception!
      try { 
        strBuilder0.insert(4, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6Q$OInP");
      strBuilder0.append(0.0);
      strBuilder0.append(0.0F);
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8B*TG]t!VT");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'D';
      charArray0[2] = ',';
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.insert(0, "");
      strBuilder0.asTokenizer();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = 116;
      StrBuilder strBuilder0 = new StrBuilder(116);
      int int1 = 0;
      strBuilder0.append("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(116, 0, '?');
      strBuilder1.validateIndex(0);
      char[] charArray0 = new char[0];
      strBuilder0.append(strBuilder1, 0, 0);
      int int2 = (-3575);
      int int3 = 9;
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-3575), 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 9
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrMatcher strMatcher0 = StrMatcher.charMatcher('i');
      StrMatcher.charMatcher('7');
      StrMatcher.charSetMatcher((char[]) null);
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      StrBuilder strBuilder2 = strBuilder0.deleteAll(strMatcher0);
      String string0 = "Mac";
      strBuilder2.appendNewLine();
      strBuilder0.append("Mac");
      strBuilder0.setNullText("");
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder2, 0, 1230);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      long long0 = strBuilder_StrBuilderReader0.skip(33L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrMatcher strMatcher0 = null;
      strBuilder0.lastIndexOf((StrMatcher) null);
      strBuilder0.asReader();
      strBuilder0.indexOf('t');
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(1735);
      strBuilder1.indexOf('z');
      strBuilder1.setNullText("+^Hp\"aiYVxu");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "+^Hp\"aiYVxu");
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt((-1), 'g');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "h<";
      StrBuilder strBuilder0 = new StrBuilder("h<");
      // Undeclared exception!
      try { 
        strBuilder0.insert(3, (float) 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setEmptyTokenAsNull(true);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      strBuilder1.appendFixedWidthPadRight(97, 97, 'r');
      strBuilder1.asWriter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("");
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      strBuilder0.appendWithSeparators((Collection) linkedList1, "0");
      strBuilder0.indexOf('=', 39);
      strBuilder1.getNewLineText();
      StrBuilder strBuilder2 = strBuilder0.append(true);
      int int0 = strBuilder2.lastIndexOf('=', 1);
      assertEquals(129, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(1513);
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0);
      strBuilder2.contains(strMatcher0);
      strBuilder1.replaceAll((String) null, (String) null);
      StrBuilder strBuilder3 = strBuilder1.append(1513);
      strBuilder3.lastIndexOf(strMatcher0);
      StrBuilder strBuilder4 = strBuilder0.append((-1438.46097282989));
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = ' ';
      charArray0[2] = 'z';
      charArray0[3] = '4';
      charArray0[4] = 'R';
      charArray0[5] = 'l';
      strBuilder3.append(charArray0);
      // Undeclared exception!
      try { 
        strBuilder4.replace(1513, 108, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append("");
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder2 = strBuilder1.append(stringBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) strBuilder2;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) stringBuffer0;
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators(objectArray0, "");
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      strBuilder3.lastIndexOf(strMatcher0, 0);
      strBuilder1.appendFixedWidthPadLeft((-1), 0, 'e');
      StrBuilder strBuilder4 = strBuilder0.append(false);
      strBuilder4.toString();
      StrBuilder strBuilder5 = strBuilder0.append((String) null);
      strBuilder5.capacity();
      strBuilder1.deleteFirst((String) null);
      strBuilder1.setNewLineText((String) null);
      StrBuilder strBuilder6 = strBuilder2.replaceFirst((StrMatcher) null, "");
      StrBuilder strBuilder7 = strBuilder6.deleteFirst('b');
      strBuilder2.substring(181);
      StrBuilder strBuilder8 = strBuilder7.ensureCapacity(684);
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'e';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      // Undeclared exception!
      try { 
        strBuilder8.getChars(2505, 2505, charArray0, 2505);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2505
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "r\"j{e >KyxW";
      StrBuilder strBuilder0 = new StrBuilder("r\"j{e >KyxW");
      int int0 = 9;
      StrBuilder strBuilder1 = strBuilder0.insert(9, 0.0F);
      StrBuilder strBuilder2 = strBuilder1.insert(9, false);
      char char0 = 'w';
      strBuilder0.replaceFirst('L', 'w');
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      strBuilder2.lastIndexOf(strMatcher0, 9);
      String string1 = null;
      StrBuilder strBuilder3 = strBuilder2.deleteAll((String) null);
      // Undeclared exception!
      try { 
        strBuilder3.replace((-1), (-1), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer[not tokenized yet]");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "n&^*_N,]XwD[Z");
      strBuilder0.replaceFirst((StrMatcher) null, (String) null);
      strBuilder0.append(stringBuffer0, 0, 0);
      strBuilder0.appendFixedWidthPadRight((Object) "n&^*_N,]XwD[Z", 2928, ')');
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = 'C';
      charArray0[6] = ')';
      charArray0[7] = ')';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 2928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[q9vDLA7X}qlQLq");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Fz<x#p+1cWz:uyr", (String) null);
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      strBuilder2.indexOf(strMatcher0, (-446));
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(0);
      StrBuilder strBuilder4 = strBuilder1.replaceFirst('w', 'm');
      assertEquals(117, strBuilder0.size());
      
      strBuilder1.charAt('m');
      StrBuilder strBuilder5 = strBuilder0.append((float) 'w');
      strBuilder5.deleteFirst(strMatcher0);
      strBuilder1.lastIndexOf("", (-1));
      int int0 = strBuilder4.indexOf('0', 0);
      int int1 = strBuilder3.indexOf((String) null);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = 108;
      StrBuilder strBuilder0 = new StrBuilder(108);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[3];
      String string0 = "><'e6(3mc_DpoM-a";
      int int1 = (-2057);
      StrBuilder strBuilder1 = strBuilder0.replaceAll("><'e6(3mc_DpoM-a", "9>aXJkb?{^/w6!A");
      StrBuilder strBuilder2 = strBuilder1.deleteAll("><'e6(3mc_DpoM-a");
      strBuilder_StrBuilderWriter0.write((-2057));
      StrBuilder strBuilder3 = strBuilder1.append('\"');
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrMatcher.charSetMatcher("><'e6(3mc_DpoM-a");
      StrBuilder strBuilder4 = strBuilder3.deleteAll(strMatcher0);
      int int2 = (-145);
      // Undeclared exception!
      try { 
        strBuilder2.append(strBuilder4, (-145), (-145));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer.getCSVInstance("Invalid startIndex: ");
      StrBuilder strBuilder1 = strBuilder0.append(131);
      strBuilder1.trim();
      Object object0 = strBuilder_StrBuilderTokenizer0.cloneReset();
      strBuilder0.append(object0);
      strBuilder0.replaceFirst("org.apache.commons.lang.text.StrBuilder", "");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'H]t,2vFypKA%nhMf=");
      strBuilder0.charAt(4);
      strBuilder0.rightString((-1939));
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(32);
      strBuilder1.leftString(367);
      strBuilder0.endsWith("'H]t,2vFypKA%nhMf=");
      strBuilder1.append(1492);
      // Undeclared exception!
      try { 
        strBuilder1.insert(32, (-1L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }
}
