/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 03:54:28 GMT 2023
 */

package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      
      fastDateFormat0.init();
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      int[] intArray0 = new int[6];
      String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
      assertEquals("'#", string0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(string0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      List list0 = fastDateFormat0.parsePattern();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(list0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertTrue(boolean0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      assertEquals("GMT-18:00", string0);
      assertNotNull(string0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
      assertEquals(2596, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
      assertEquals(2596, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(timeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
      assertEquals(2596, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("0\"ED.Cahr1Cm/{Vt", timeZone0.getID());
      assertEquals(2596, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertFalse(timeZone0.useDaylightTime());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("IH2", simpleTimeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("IH2", simpleTimeZone0.getID());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(timeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("IH2", simpleTimeZone0.getID());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("IH2", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.getPattern();
      assertEquals("", string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(string0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(0, int0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(3193, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(3193, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(46, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("'XETJC", fastDateFormat0.getPattern());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNull(stringBuffer0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("", string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
      assertNotNull(stringBuffer0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("A:=", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(stringBuffer1);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("A:=2/14/14 8:21 PM", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
      assertEquals("A:=2/14/14 8:21 PM", stringBuffer1.toString());
      assertEquals(18, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(calendar0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      String string0 = fastDateFormat0.format(calendar0);
      assertEquals("", string0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string0 = fastDateFormat0.format(2480L);
      assertEquals("", string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(string0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
      assertNotNull(locale0);
      assertEquals("n;p:<ffkd7dzt1_@'", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("n;p:<ffkd7dzt1_@'", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 13, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 13
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("A:=");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2623, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2623
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("IH2", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 15
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(739, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 739
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 100
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(16, 1668, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1668
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(13, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=-186,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-186), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1667, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1667
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = new Locale("elDq# !hTb");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eldq# !htb", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eldq# !htb", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1502, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1502
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2289
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate(10, 835, 0);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
      assertNotNull(stringBuffer0);
      assertEquals("No date time pattern for locale: ", stringBuffer0.toString());
      assertEquals(33, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      fastDateFormat0.hashCode();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      
      fastDateFormat0.hashCode();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertTrue(boolean0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("UTC", timeZone0.getID());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(stringBuffer1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1105
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h:mm:ss", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = new Locale("", "", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=118,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=7,startTime=2,startTimeMode=3,endMode=0,endMonth=-424,endDay=0,endDayOfWeek=3,endTime=1102,endTimeMode=7]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=118,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=7,startTime=2,startTimeMode=3,endMode=0,endMonth=-424,endDay=0,endDayOfWeek=3,endTime=1102,endTimeMode=7]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 103
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate(1, (-1), (-416));
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(stringBuffer1);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals("Tue Oct 10 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(17, stringBuffer0.length());
      assertEquals("10/10/99 12:00 AM", stringBuffer0.toString());
      assertEquals(17, stringBuffer1.length());
      assertEquals("10/10/99 12:00 AM", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate(4120L);
      assertNotNull(mockDate0);
      
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("1/1/70 12:00 AM", string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(string0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("Friday, February 28, 0122 11:59:00 PM GMT", string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(string0);
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58312224060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=122,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("sa", fastDateFormat0.getPattern());
      assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat1);
      assertEquals("UTC", timeZone0.getID());
      assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("sa", fastDateFormat1.getPattern());
      assertEquals(6, fastDateFormat1.getMaxLengthEstimate());
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("sa", fastDateFormat0.getPattern());
      assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("sa", fastDateFormat1.getPattern());
      assertEquals(6, fastDateFormat1.getMaxLengthEstimate());
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      
      boolean boolean0 = fastDateFormat0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("IH2", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("IH2", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(calendar0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      String string0 = fastDateFormat0.format(calendar0);
      assertEquals("8:21:21 PM GMT+00:00", string0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("IH2", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      Locale locale0 = fastDateFormat0.getLocale();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(locale0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      Long long0 = new Long((-1150L));
      assertEquals((-1150L), (long)long0);
      assertNotNull(long0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(attributedCharacterIterator0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(17, attributedCharacterIterator0.getRunLimit());
      assertEquals(17, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(stringBuffer1);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61614000000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(35, stringBuffer0.length());
      assertEquals("0017\uB144 7\uC6D4 15\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer0.toString());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("0017\uB144 7\uC6D4 15\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer1.toString());
      assertEquals(35, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
      assertNotNull(stringBuffer0);
      assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer0.toString());
      assertEquals(34, stringBuffer0.length());
      
      FieldPosition fieldPosition0 = new FieldPosition((-542));
      assertNotNull(fieldPosition0);
      assertEquals("java.text.FieldPosition[field=-542,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-542), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(3193, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      ParsePosition parsePosition0 = new ParsePosition(1);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(1, parsePosition0.getIndex());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(3193, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("HmEwv:<G%uK-&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("kv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("|~#+%|r<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(".hp7jH`/1_94X/S#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
      assertNotNull(simpleTimeZone0);
      assertEquals("org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<null>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("F|&l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("*y%[}sjm@y", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("$h]hz[im+[", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(".y^g%D]]q!ZT", timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@ye");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&c+c", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
      assertNotNull(locale0);
      assertEquals("IUGG1T[MPMF6/YGLLVX", locale0.getCountry());
      assertEquals("km\"=7X{|rJ", locale0.getVariant());
      assertEquals("4|<9 ,h| do&/_IUGG1T[MPMF6/YGLLVX_km\"=7X{|rJ", locale0.toString());
      assertEquals("4|<9 ,h| do&/", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("km\"=7X{|rJ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("W9", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(")?V4+K`M;J xIF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-kU[P", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("no date time pattern for locale: _S<QO?Y0", locale0.toString());
      assertEquals("S<QO?Y0", locale0.getCountry());
      assertEquals("no date time pattern for locale: ", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("S<qo?y0", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("{363RHP)", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Q\"~ejLg;=`mCF'-$", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" 9JtTd.$cJi'MXwGE", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@I5wyU}+$", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-2446), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2446,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("C/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("B67F8w -");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      List list0 = fastDateFormat0.parsePattern();
      assertEquals(17, list0.size());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
      assertNotNull(fastDateFormat1);
      
      fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateFormat1.parseObject("", parsePosition0);
      fastDateFormat0.format((long) 0);
      String string0 = fastDateFormat0.format((long) 1);
      assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", string0);
      
      fastDateFormat1.getPattern();
      assertEquals(34, fastDateFormat1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ZoneId.getAvailableZoneIds();
      timeZone0.setID("sa");
      zoneOffset0.getRules();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertEquals("HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FastDateFormat.getTimeInstance(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("MMM d, yyyy", fastDateFormat1.getPattern());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`k>PoY=[]c2", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertNotSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
      fastDateFormat0.format((long) 0, stringBuffer0);
      assertEquals(17, stringBuffer0.length());
      assertEquals("sa12:00:00 AM UTC", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1960
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[h:mm:ss a z]", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("\u683C\u6797\u5A01\u6CBB\u65F6\u95F4", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ZoneId.getAvailableZoneIds();
      timeZone0.setID("sa");
      zoneOffset0.getRules();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(10, stringBuffer0.length());
      assertEquals("sa14/02/14", stringBuffer0.toString());
  }
}
