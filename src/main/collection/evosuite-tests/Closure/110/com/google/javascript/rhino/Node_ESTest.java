/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:28:14 GMT 2023
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.siblings();
      assertEquals(630938, node0.getSourcePosition());
      assertEquals(154, node0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber((double) 154, 154, 154);
      node0.putProp(40, node0.NO_SIDE_EFFECTS);
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      assertEquals(630938, node1.getSourcePosition());
      assertTrue(node1.isNumber());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node((-4248), (-4248), 51);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node0.setDirectives(set0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(48);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(46, nodeArray0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("!");
      node0.putProp(4095, "!");
      node_FileLevelJsDocBuilder0.append(",n");
      assertEquals(46, node0.getType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(",n");
      node0.setQuotedString();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING ,n [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString("DEBUGGER");
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node0.setSideEffectFlags(node_SideEffectFlags0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL 37 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-67));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertEquals((-67), node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals(2858, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals(0, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isEquivalentToTyped(node0);
      assertTrue(boolean0);
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber((-476.30970638241644));
      node0.setDouble((-476.30970638241644));
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString(",n");
      InputId inputId0 = new InputId(",n");
      node0.setInputId(inputId0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING ,n [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(172, 172, 172);
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.setWasEmptyNode(true);
      assertTrue(node0.isStringKey());
      assertEquals(630938, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-1920), (-1920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.addChildrenToBack(node0);
      Node node1 = null;
      try {
        node1 = new Node(57, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("Y_AxCFe^0");
      node0.getInputId();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      node0.isSyntheticBlock();
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(49, node0.getType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105, 105, 105);
      Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
      Node node2 = null;
      try {
        node2 = new Node(4, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(36);
      node0.setSourceEncodedPosition(36);
      assertEquals(36, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node((-856), (-856), (-856));
      node0.getAncestors();
      assertEquals((-856), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(155);
      boolean boolean0 = node0.isLocalResultCall();
      assertFalse(boolean0);
      assertTrue(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(29);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertEquals(29, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      node0.setIsSyntheticBlock(false);
      assertEquals(200753, node0.getSourcePosition());
      assertTrue(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(113);
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(1370, 1370, 1370);
      Node node1 = new Node(50, node0, 2, 42);
      Node node2 = node1.copyInformationFrom(node0);
      node1.addChildToFront(node2);
      assertEquals(1370, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(112, 2761, (-18));
      Node node1 = node0.srcrefTree(node0);
      assertTrue(node1.isDefaultCase());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.wasEmptyNode();
      assertEquals(630938, node0.getSourcePosition());
      assertEquals(154, node0.getType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node((-3765), (-3765), (-3765));
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertEquals((-3765), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("g(k9Afw/rYOkc_Q.]J");
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(112, 2761, (-18));
      node0.getDirectives();
      assertEquals((-1), node0.getCharno());
      assertEquals(112, node0.getType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.setChangeTime(1636);
      int int0 = node0.getChangeTime();
      assertEquals(630938, node0.getSourcePosition());
      assertEquals(154, node0.getType());
      assertEquals(1636, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(29, "YPZnfVon", 29, 29);
      int int0 = node0.getSourcePosition();
      assertEquals(29, node0.getType());
      assertEquals(118813, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber((-1558.774296069));
      int int0 = node0.getLength();
      assertEquals(0, int0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(154);
      node0.setCharno(154);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(37);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      boolean boolean0 = node0.isEquivalentTo(node0);
      assertEquals(630938, node0.getSourcePosition());
      assertTrue(boolean0);
      assertTrue(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(154);
      node0.setLength(154);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING_KEY [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node((-72));
      node0.setSourceFileForTesting("1dB~TH'");
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals((-72), node1.getType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber((-1558.774296069));
      int int0 = node0.getSourceOffset();
      assertTrue(node0.isNumber());
      assertEquals((-1), int0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber((-1558.774296069));
      node0.setLineno(31);
      assertEquals(31, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(2771, 2771, 2771);
      Node node1 = new Node(56, node0, node0, 15, 4);
      Node node2 = null;
      try {
        node2 = new Node(52, node1, node0, node1, 4095, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((-460.9471936));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -460.9471936 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(31);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(31, jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
      node0.putProp(32, "}m\"{${/lQS0b5f\"'V");
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING }m\"{${/lQS0b5f\"'V [incrdecr: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("!");
      node0.putProp(33, "!");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("Object#Element");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.putProp(34, jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 34
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
      node0.putProp(35, "}m\"{${/lQS0b5f\"'V");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 35
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(29);
      node0.setIsSyntheticBlock(true);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt ");
      node0.putProp(39, "setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt ");
      node0.toStringTree();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber((double) 154, 154, 154);
      node0.putProp(40, node0.INFERRED_FUNCTION);
      node0.toStringTree();
      assertEquals(154, node0.getLineno());
      assertEquals(630938, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(154);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.putProp(41, jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 41
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("Y_AxDCFX^0");
      node0.putProp(43, "Y_AxDCFX^0");
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(44);
      node0.putProp(44, "g(k9Afw/rYOkc_Q.]J");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 44
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(45);
      Object object0 = new Object();
      node0.putProp(45, object0);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 45
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(46);
      node0.putProp(46, "\\}Gw?L y~f)");
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertEquals(46, node0.getType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
      node0.putProp(47, "}m\"{${/lQS0b5f\"'V");
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.toStringTree();
      assertEquals(154, node0.getLineno());
      assertTrue(node0.isStringKey());
      assertEquals(154, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      node0.putProp(49, "incrdecr");
      assertEquals(49, node0.getType());
      
      node0.toStringTree();
      assertEquals(49, node0.getLineno());
      assertEquals(200753, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("D/;@/@0NG/H<^E4+T");
      node0.putProp(50, "D/;@/@0NG/H<^E4+T");
      node0.toStringTree();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.setSourceFileForTesting("W");
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> 105 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("Y_AxFe^0");
      node0.putProp(54, node0);
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got ");
      node0.putProp(55, "setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got ");
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(13);
      node0.setChangeTime((-135));
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NE [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("!");
      node0.putProp(57, "!");
      node0.toStringTree();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
      node0.putProp(2, "}m\"{${/lQS0b5f\"'V");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105, 105, 105);
      Node node1 = new Node(39);
      node0.checkTreeEqualsImpl(node1);
      assertEquals(430185, node0.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertTrue(node0.isNumber());
      assertTrue(node1.isNumber());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber((-471.31165337815554));
      Node node1 = Node.newNumber((double) 50);
      node0.isEquivalentTo(node1);
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isNumber());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString("D%Dv*");
      node0.setString("D%Dv*");
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString(": ");
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("!", 119, 385);
      Node node1 = Node.newNumber((double) 49, 57, 38);
      String string0 = node0.checkTreeEquals(node1);
      assertNotNull(string0);
      assertEquals(40, node0.getType());
      assertEquals("Node tree inequality:\nTree1:\nSTRING ! 119\n\n\nTree2:\nNUMBER 49.0 57\n\n\nSubtree1: STRING ! 119\n\n\nSubtree2: NUMBER 49.0 57\n", string0);
      assertEquals(385, node0.getCharno());
      assertEquals(38, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("Y_ACFe^0");
      Node node1 = Node.newString("JrUO:U.h");
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertEquals(0, node1.getChildCount());
      assertNotNull(node_NodeMismatch0);
      assertEquals(40, node1.getType());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node((-894));
      Node node1 = new Node(53, node0, node0, node0, 12, 31);
      Node node2 = null;
      try {
        node2 = new Node(39, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node node1 = new Node(48, node0, 53, 37);
      Node node2 = null;
      try {
        node2 = new Node(32, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber((double) 112, 112, 112);
      Node node1 = new Node(112, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(52, node1, node0, 54, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node((-2748), 37, 37);
      Node node1 = new Node((-2748), node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(30, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node((-475), (-475), (-475));
      Node node1 = new Node((-475), node0, node0);
      Node node2 = null;
      try {
        node2 = new Node((-475), node1, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      Node node1 = new Node(47, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(38, node1, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("synh_tc");
      Node node1 = new Node(4095, node0, node0, 52, 30);
      Node node2 = null;
      try {
        node2 = new Node(4095, node1, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(54, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105, 105, 105);
      Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      Node node2 = null;
      try {
        node2 = new Node(2, nodeArray0, 46, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(154);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(32, nodeArray0, 57, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node((-1454));
      assertEquals((-1454), node0.getType());
      assertEquals((-1), node0.getCharno());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0, 29, 29);
      assertEquals(1, node1.getType());
      assertEquals(118813, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = node0.hasChildren();
      assertTrue(node0.isVar());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber(23.15297892960499);
      Node node1 = new Node(85, node0, node0);
      boolean boolean0 = node1.hasChildren();
      assertTrue(boolean0);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(85, node1.getType());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      Node node1 = new Node(0, node0);
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("Object#Element", (-3331), (-3331));
      Node node1 = node0.getChildAtIndex((-3331));
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("ALWAYS_TRUE");
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("FUANCTION_PROTOTYPE");
      node0.addChildrenToFront(node0);
      int int0 = node0.getIndexOfChild(node0);
      assertTrue(node0.hasChildren());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(924, node0, node0, node0, node0);
      int int0 = node1.getIndexOfChild(node1);
      assertEquals(924, node1.getType());
      assertEquals((-1), int0);
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("FUNCTION_PROTOTYPE");
      Node node1 = node0.cloneNode();
      assertNotNull(node1);
      
      Node node2 = new Node(148, node1, node0);
      assertEquals(2, node2.getChildCount());
      assertEquals((-1), node2.getSourcePosition());
      assertTrue(node2.isSetterDef());
      assertTrue(node2.hasMoreThanOneChild());
      
      Node node3 = node1.getLastSibling();
      assertEquals(40, node3.getType());
      assertEquals((-1), node3.getSourcePosition());
      assertNotSame(node3, node1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node((-1718), (-1718), (-1718));
      Node node1 = new Node((-1718), node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((-1558.774296069));
      Node node1 = Node.newString(36, "no next sibling.", 31, 36);
      Node node2 = new Node(18, node0, node0, node1, 49, 53);
      Node node3 = node2.removeChildren();
      // Undeclared exception!
      try { 
        node3.addChildToFront(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node((-3791));
      Node node1 = new Node(57, node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = new Node(48, node0, node0, node0, 54, 4095);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(2635, 3033, 3033);
      Node node1 = new Node(1303, node0, node0, node0, node0);
      node1.addChildrenToFront(node1);
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("5.");
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("5.");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("FUNCKzON)^PR]]OTYP");
      Node node1 = new Node(12, node0, node0, node0, 51, 2);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("FUNCKzON)^PR]]OTYP");
      Node node1 = new Node(51, 2, 51);
      Node node2 = new Node(12, node0, node1, node0, 51, 2);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber(3292.378991876403);
      Node node1 = new Node(4095, node0, node0, node0);
      node1.addChildBefore(node1, node0);
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber(3292.378991876403);
      Node node1 = Node.newNumber(4217.053478921, 2, 29);
      Node node2 = new Node(4095, node0, node0, node1);
      assertEquals(2, node2.getChildCount());
      
      node2.addChildBefore(node2, node1);
      assertEquals(4095, node2.getType());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node((-3752), (-3752), (-3752));
      Node node1 = new Node(103, 30, 42);
      Node node2 = new Node(392, node0, node1, node1, node1, 2545, 52);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1881));
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node((-2411));
      Node node1 = new Node(39, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(38);
      node0.addChildrenToBack(node0);
      Node node1 = Node.newString("b^hA");
      node0.addChildrenToBack(node1);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Key");
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.addChildrenAfter(node0, (Node) null);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(25, 25, 97);
      Node node1 = Node.newString(4095, "8[7b(OV4q;6!`9vOqV");
      Node node2 = new Node(97, node0, node1, 3777, 110);
      node2.removeFirstChild();
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("YimPZnfCVFn");
      Node node1 = Node.newString(47, "YimPZnfCVFn");
      Node node2 = new Node(54, node0, node1, node1, 56, 42);
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(65536);
      Node node1 = new Node(37, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node1 = new Node(40, node0, node0);
      Node node2 = new Node((-3384), node1, 37, 4095);
      assertEquals(4095, node2.getCharno());
      
      node1.replaceChild(node0, node2);
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(40, node0, node1);
      Node node3 = new Node((-3384), node2, 37, 4095);
      node2.replaceChild(node0, node3);
      assertEquals((-1), node3.getCharno());
      assertEquals((-3384), node3.getType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("DEBUGGER");
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(48, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(4);
      Node node2 = new Node(48, node1, node1, node0);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node((-856));
      Node node1 = new Node(12, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.setOptionalArg(true);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      Node node1 = node0.clonePropsFrom(node0);
      assertEquals(630938, node1.getSourcePosition());
      assertEquals(154, node1.getType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = modificationVisitor0.caseFunctionType(functionType0);
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newNumber((double) 31);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 4
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      try { 
        node0.setDouble(118);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VAR 118 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(39, node0, node0, node0, 39, 52);
      // Undeclared exception!
      try { 
        node1.setDouble(29);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(40);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(40, 102, 119);
      // Undeclared exception!
      try { 
        node0.setString("com.google.common.collect.Platform");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(51, 38, 51);
      try { 
        node0.setString("!");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IN 38 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(51, 38, 51);
      Node node1 = new Node(38, node0, node0);
      // Undeclared exception!
      try { 
        node1.setString("!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105, 105, 105);
      Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
      String string0 = node1.toStringTree();
      assertEquals("FUNCTION <invalid> 43\n    NUMBER 105.0 105\n", string0);
      assertEquals(430185, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(176180, node1.getSourcePosition());
      assertEquals(105, node1.getType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = node0.toString(false, false, false);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertEquals("NUMBER 0.0", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[5] = (JSType) templateType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Key");
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(122, "prev is not a child of this node.");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("prev is not a child of this node.", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      String string0 = node0.getSourceFileName();
      assertNotNull(string0);
      assertTrue(node0.isVoid());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(118);
      node0.getSourceFileName();
      assertTrue(node0.isVar());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(2747, 2747, 2747);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("<invalid>", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isFromExterns();
      assertEquals(2747, node0.getType());
      assertEquals(11254459, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.isFromExterns();
      assertEquals(630938, node0.getSourcePosition());
      assertTrue(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node((-3377), (-2084), (-3377));
      node0.setSourceFileForTesting("`J");
      int int0 = node0.getSourceOffset();
      assertEquals((-1), node0.getLineno());
      assertEquals((-3377), node0.getType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(154, 1648, 1648);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Ju?o$?[fjA%S8'! O", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      int int0 = node0.getSourceOffset();
      assertEquals(1648, node0.getLineno());
      assertEquals((-2147482000), int0);
      assertTrue(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.setLineno(33);
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(130);
      Node node1 = new Node(130, node0, node0, node0, node0, 43, 52);
      node1.setSourceEncodedPositionForTree(53);
      assertEquals(53, node0.getCharno());
      assertEquals(130, node0.getType());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(47, 47, 751619276);
      boolean boolean0 = node0.isRegExp();
      assertTrue(boolean0);
      assertEquals(196607, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(1389);
      node0.children();
      assertEquals(1389, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("79AK `an~");
      // Undeclared exception!
      try { 
        node0.getAncestor((-1671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("}m\"{${/l7jQS0b5f\"'V");
      Node node1 = node0.getAncestor(0);
      assertNotNull(node1);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = node0.getAncestor(102);
      assertNull(node1);
      assertTrue(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(113);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      assertTrue(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(113, node0.getType());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = node0.hasOneChild();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(47, node0.getType());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
      boolean boolean0 = node1.hasOneChild();
      assertEquals(217141, node1.getSourcePosition());
      assertTrue(boolean0);
      assertTrue(node0.isGetProp());
      assertEquals(16, node1.getType());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node((-29));
      Node node1 = new Node(38);
      Node node2 = new Node(1023, node1, node0, 2411, 2411);
      node2.hasOneChild();
      assertEquals(38, node1.getType());
      assertEquals(9877867, node2.getSourcePosition());
      assertEquals(1023, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("!", 119, 385);
      node0.hasMoreThanOneChild();
      assertEquals(487809, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[2];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(76);
      node0.addChildrenToBack(node0);
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertTrue(node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      boolean boolean0 = node0.hasChild(node0);
      assertFalse(boolean0);
      assertTrue(node0.isParamList());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber((-474.9454345372132));
      node0.addChildToFront(node0);
      boolean boolean0 = node0.hasChild(node0);
      assertTrue(node0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString(125, "!y/5/Afx");
      String string0 = node0.checkTreeEquals(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isBlock());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(65, 65, 65);
      Node node1 = new Node(52, node0, node0, 12, 0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(49152, node1.getSourcePosition());
      assertEquals(266305, node0.getSourcePosition());
      assertTrue(node1.isInstanceOf());
      assertNull(node_NodeMismatch0);
      assertEquals(65, node0.getType());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-894), (-894), (-894));
      Node node1 = new Node((-894), node0, node0, node0, node0);
      Node node2 = new Node((-894), node1, 56, 57);
      node2.checkTreeEqualsImpl(node1);
      assertEquals((-894), node2.getType());
      assertEquals(229433, node2.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node0.isNumber());
      assertEquals((-894), node1.getType());
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertNotNull(node_NodeMismatch0);
      assertEquals(83, node1.getType());
      assertEquals(3, node1.getChildCount());
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node(29, node0, node0, node0, 43, 53);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertEquals(29, node0.getType());
      assertEquals(29, node1.getType());
      assertNotNull(node_NodeMismatch0);
      assertEquals(176181, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
      assertEquals(417894, node0.getSourcePosition());
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertEquals(421991, node0.getSourcePosition());
      assertNull(node_NodeMismatch0);
      assertEquals(103, node0.getType());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(37);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
      assertEquals(37, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(95, node0, node0, node0, node0);
      boolean boolean0 = node1.isEquivalentToShallow(node1);
      assertEquals(95, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
      assertTrue(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-885), (-885), (-885));
      Node node1 = new Node(15, node0, node0, 38, 50);
      boolean boolean0 = node1.isEquivalentToShallow(node1);
      assertTrue(boolean0);
      assertEquals(1, node1.getChildCount());
      assertEquals(155698, node1.getSourcePosition());
      assertEquals(15, node1.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Element");
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      boolean boolean0 = node0.isEquivalentToTyped(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(83, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 38 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("n");
      node0.setType(38);
      node0.getQualifiedName();
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setType(38);
      node0.getQualifiedName();
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(42, node0, node0);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(16, node0, node0, node0, node0);
      node0.addChildrenToBack(node1);
      assertTrue(node1.hasOneChild());
      assertEquals(16, node1.getType());
      
      node0.getQualifiedName();
      assertEquals((-1), node0.getCharno());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(33, 18, 18);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString(30, "", 30, 30);
      node0.isQualifiedName();
      assertEquals(122910, node0.getSourcePosition());
      assertTrue(node0.isNew());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("");
      assertFalse(node0.isName());
      
      node0.setType(38);
      node0.isQualifiedName();
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      boolean boolean0 = node0.isQualifiedName();
      assertTrue(boolean0);
      assertEquals(172074, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("FUNCTONPROTTYPE");
      assertFalse(node0.isName());
      
      node0.setType(38);
      boolean boolean0 = node0.isQualifiedName();
      assertEquals(38, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString(30, "", 30, 30);
      node0.isUnscopedQualifiedName();
      assertEquals(122910, node0.getSourcePosition());
      assertTrue(node0.isNew());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(38);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString("4");
      assertFalse(node0.isName());
      
      node0.setType(38);
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertEquals(38, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString("");
      assertFalse(node0.isName());
      
      node0.setType(38);
      node0.isUnscopedQualifiedName();
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(16, node0);
      assertEquals(16, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      
      Node node2 = node0.detachFromParent();
      assertEquals(33, node2.getType());
      assertEquals((-1), node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.removeFirstChild();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(2792, 2792, 2792);
      Node node1 = new Node(56, node0, node0, 15, 4);
      assertTrue(node1.hasOneChild());
      
      node1.detachChildren();
      assertEquals(61444, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString("}m\"{${/l7jQS0b5f\"'V");
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString("synh_U");
      Node node1 = new Node(56, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("synh_U");
      Node node1 = Node.newString(57, "synh_U", 12, 0);
      Node node2 = new Node(56, node1, node0, node1);
      assertFalse(node2.hasMoreThanOneChild());
      
      node2.removeChildAfter(node0);
      assertFalse(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("synh_U");
      Node node1 = Node.newString(57, "synh_U", 12, 0);
      Node node2 = new Node(56, node1, node0, node1);
      assertEquals(1, node2.getChildCount());
      
      node2.removeChildren();
      node2.removeChildAfter(node0);
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString("FUNCTION_PROTOTYPE");
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-1695), node0, node1, 57, 31);
      Node node3 = node2.cloneTree();
      assertEquals(233503, node3.getSourcePosition());
      assertEquals((-1695), node3.getType());
      assertTrue(node2.hasChildren());
      assertTrue(node1.isString());
      assertEquals(2, node3.getChildCount());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(2747, 2747, 2747);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("<invalid>", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newNumber(3292.378991876403);
      Node node1 = new Node(4095, node0, node0, node0);
      assertFalse(node1.hasMoreThanOneChild());
      
      Node node2 = node1.copyInformationFromForTree(node0);
      assertEquals(4095, node2.getType());
      assertEquals(39, node0.getType());
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node((-894));
      Node node1 = new Node(53, node0, node0, node0, 12, 31);
      node1.useSourceInfoFromForTree(node0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(95, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      assertEquals(95, node2.getType());
      assertTrue(node2.hasOneChild());
      assertEquals(105, node0.getType());
      assertEquals((-1), node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(619, 619, 619);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.addSuppression("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      assertEquals(619, node0.getType());
      assertEquals(2536043, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(61);
      node0.addSuppression((String) null);
      assertEquals(61, node0.getType());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(30, "", 30, 30);
      assertEquals(30, node0.getType());
      
      node0.setSideEffectFlags(119);
      boolean boolean0 = node0.mayMutateArguments();
      assertEquals(122910, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertFalse(boolean0);
      assertEquals(38, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      boolean boolean0 = node0.mayMutateArguments();
      assertEquals(512125, node0.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(125, node0.getType());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(37, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertEquals(64, node0.getType());
      assertEquals(262208, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber((double) 118, 118, 118);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      boolean boolean0 = node_NodeMismatch0.equals(node0);
      assertEquals(483446, node0.getSourcePosition());
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
      assertEquals(188445, node1.getSourcePosition());
      assertEquals(16, node1.getType());
      assertTrue(boolean0);
      assertEquals(118, node0.getType());
      assertEquals(483446, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(15, node0, node0, (-534), 1);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
      boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isVar());
      assertFalse(boolean0);
      assertEquals((-1), node1.getLineno());
      assertEquals(15, node1.getType());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(15, node0, node0, (-534), 1);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertNotNull(node_NodeMismatch0);
      
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
      boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
      assertFalse(boolean0);
      assertEquals(15, node1.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(98, node0.getType());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = new Node(66, 66, 66);
      boolean boolean0 = node0.isAdd();
      assertEquals(66, node0.getType());
      assertFalse(boolean0);
      assertEquals(270402, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("Number node not created with Node.newNumber");
      node0.setType(21);
      boolean boolean0 = node0.isAdd();
      assertEquals(21, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node((-3765), (-3765), (-3765));
      boolean boolean0 = node0.isAnd();
      assertEquals((-3765), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = node0.isAnd();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(174, 174, 174);
      boolean boolean0 = node0.isArrayLit();
      assertEquals(712878, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(174, node0.getType());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(63, 30, 42);
      boolean boolean0 = node0.isArrayLit();
      assertEquals(122922, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber((-406.6402727316181));
      boolean boolean0 = node0.isAssign();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber((double) 29, 29, 29);
      node0.setType(86);
      boolean boolean0 = node0.isAssign();
      assertEquals(86, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString("NK");
      boolean boolean0 = node0.isAssignAdd();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 43, 43);
      node0.setType(93);
      boolean boolean0 = node0.isAssignAdd();
      assertEquals(93, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString(29, "YPZnfVon", 29, 29);
      node0.isBlock();
      assertEquals(118813, node0.getSourcePosition());
      assertEquals(29, node0.getType());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      boolean boolean0 = node0.isBlock();
      assertEquals(512125, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isBreak();
      assertEquals(139298, node0.getSourcePosition());
      assertEquals(34, node0.getType());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString("YimPZnfCVFn");
      Node node1 = new Node(116, node0, node0);
      boolean boolean0 = node1.isBreak();
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertTrue(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node(51);
      boolean boolean0 = node0.isCall();
      assertFalse(boolean0);
      assertTrue(node0.isIn());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(37);
      boolean boolean0 = node0.isCall();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node((-3765));
      boolean boolean0 = node0.isCase();
      assertEquals((-3765), node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType jSType1 = modificationVisitor0.caseStringType();
      JSType[] jSTypeArray0 = new JSType[7];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = jSType1;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType1;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType1;
      jSTypeArray0[6] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(111, node0, node0, node0);
      boolean boolean0 = node1.isCase();
      assertTrue(boolean0);
      assertTrue(node0.isParamList());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(7, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString(117, "{...}", 891, 891);
      node0.isCast();
      assertEquals(117, node0.getType());
      assertEquals(3650427, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(155);
      boolean boolean0 = node0.isCast();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(126);
      boolean boolean0 = node0.isCatch();
      assertTrue(node0.isLabel());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      boolean boolean0 = node0.isCatch();
      assertEquals(491640, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(30, "", 30, 30);
      boolean boolean0 = node0.isComma();
      assertFalse(boolean0);
      assertTrue(node0.isNew());
      assertEquals(122910, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(118, "\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA");
      node0.setType(85);
      boolean boolean0 = node0.isComma();
      assertEquals(85, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString(30, "", 30, 30);
      boolean boolean0 = node0.isContinue();
      assertEquals(122910, node0.getSourcePosition());
      assertEquals(30, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(117, "{...}", 891, 891);
      boolean boolean0 = node0.isContinue();
      assertEquals(3650427, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString(125, "!y/5/Afx");
      boolean boolean0 = node0.isDebugger();
      assertFalse(boolean0);
      assertEquals(125, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node(152);
      boolean boolean0 = node0.isDebugger();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newNumber((-474.9454345372132));
      boolean boolean0 = node0.isDec();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(103, 30, 42);
      boolean boolean0 = node0.isDec();
      assertEquals(122922, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = node0.isDefaultCase();
      assertEquals(105, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(112, 2761, (-18));
      boolean boolean0 = node0.isDefaultCase();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newNumber((-474.9454345372132));
      boolean boolean0 = node0.isDelProp();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(31, 1547, 31);
      boolean boolean0 = node0.isDelProp();
      assertTrue(boolean0);
      assertEquals(6336543, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      boolean boolean0 = node0.isDo();
      assertFalse(boolean0);
      assertTrue(node0.isThrow());
      assertEquals(200753, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = node0.isDo();
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = node0.isEmpty();
      assertEquals((-1), node0.getCharno());
      assertEquals(105, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(124);
      boolean boolean0 = node0.isEmpty();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node((-3765));
      boolean boolean0 = node0.isExprResult();
      assertFalse(boolean0);
      assertEquals((-3765), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString(130, "~XVY4[/7}", 130, 130);
      boolean boolean0 = node0.isExprResult();
      assertEquals(532610, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber(3292.378991876403);
      boolean boolean0 = node0.isFalse();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(43, 43, 39);
      boolean boolean0 = node0.isFalse();
      assertTrue(boolean0);
      assertEquals(176167, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(29);
      boolean boolean0 = node0.isFor();
      assertFalse(boolean0);
      assertEquals(29, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString(115, "%aNA&O; \"eqvAM]s", 115, 115);
      boolean boolean0 = node0.isFor();
      assertTrue(boolean0);
      assertEquals(471155, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(154);
      boolean boolean0 = node0.isGetterDef();
      assertFalse(boolean0);
      assertTrue(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber((double) 29, 131088, 131088);
      Node node1 = new Node(147, node0, node0, 4, 4095);
      boolean boolean0 = node1.isGetterDef();
      assertEquals(20479, node1.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(536940543, node0.getSourcePosition());
      assertTrue(node1.hasOneChild());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      boolean boolean0 = node0.isGetElem();
      assertFalse(boolean0);
      assertEquals(630938, node0.getSourcePosition());
      assertEquals(154, node0.getType());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber((double) 83, 10, 125);
      Node node1 = new Node(35, node0, node0, node0);
      boolean boolean0 = node1.isGetElem();
      assertEquals(41085, node0.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node((-3765));
      boolean boolean0 = node0.isGetProp();
      assertEquals((-3765), node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString(33, "com.google.common.collect.Maps$ImprovedAbstractMap", 4095, 164);
      boolean boolean0 = node0.isGetProp();
      assertEquals(16773284, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node((-3765));
      boolean boolean0 = node0.isHook();
      assertEquals((-3765), node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node(98, node0, node0, node0);
      boolean boolean0 = node1.isHook();
      assertEquals(37, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      boolean boolean0 = node0.isIf();
      assertEquals(118, node0.getType());
      assertFalse(boolean0);
      assertEquals(483446, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(108, 50, 108);
      boolean boolean0 = node0.isIf();
      assertTrue(boolean0);
      assertEquals(204908, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isIn();
      assertEquals(34, node0.getType());
      assertEquals(139298, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(51);
      boolean boolean0 = node0.isIn();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString("!", 119, 385);
      node0.isInc();
      assertEquals(487809, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(102, 30, 42);
      boolean boolean0 = node0.isInc();
      assertEquals(122922, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = node0.isInstanceOf();
      assertFalse(boolean0);
      assertEquals(105, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(52, 52, 52);
      boolean boolean0 = node0.isInstanceOf();
      assertEquals(213044, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      boolean boolean0 = node0.isLabel();
      assertEquals(125, node0.getType());
      assertEquals(512125, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(126);
      boolean boolean0 = node0.isLabel();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(105);
      boolean boolean0 = node0.isLabelName();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(105, node0.getType());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(153);
      boolean boolean0 = node0.isLabelName();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newNumber((-425.9));
      boolean boolean0 = node0.isName();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString("SFfQ\"0OkEZ}a(E");
      assertFalse(node0.isName());
      
      node0.setType(38);
      boolean boolean0 = node0.isName();
      assertEquals(38, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(985, 985, 985);
      node0.isNE();
      assertEquals(4035545, node0.getSourcePosition());
      assertEquals(985, node0.getType());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(13, 13, 32);
      boolean boolean0 = node0.isNE();
      assertEquals(53280, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("FUANCTION_PROTOTYPE");
      boolean boolean0 = node0.isNew();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = node0.isNew();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("FUNCTION_PROTOTYPE");
      boolean boolean0 = node0.isNot();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      boolean boolean0 = node0.isNot();
      assertEquals(106522, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      boolean boolean0 = node0.isNull();
      assertEquals(172074, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(42, node0.getType());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = node0.isNull();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      boolean boolean0 = node0.isNumber();
      assertEquals(630938, node0.getSourcePosition());
      assertEquals(154, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newNumber((-0.8877167227904719), 131, 131);
      boolean boolean0 = node0.isNumber();
      assertTrue(boolean0);
      assertEquals(536707, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node((-3765), (-3765), (-3765));
      node0.isObjectLit();
      assertEquals((-3765), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      boolean boolean0 = node0.isObjectLit();
      assertEquals(262208, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node((-3765), (-3765), (-3765));
      boolean boolean0 = node0.isOr();
      assertEquals((-3765), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(100);
      boolean boolean0 = node0.isOr();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = node0.isParamList();
      assertEquals(118, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newNumber((double) 29, 29, 29);
      node0.setType(83);
      boolean boolean0 = node0.isParamList();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = node0.isRegExp();
      assertFalse(boolean0);
      assertEquals(118, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(34);
      boolean boolean0 = node0.isReturn();
      assertFalse(boolean0);
      assertEquals(34, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString(4, "Q7nJkxgf&!.MrtG]", 53, 15);
      boolean boolean0 = node0.isReturn();
      assertEquals(217103, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isScript();
      assertEquals(512125, node0.getSourcePosition());
      assertTrue(node0.isBlock());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString(132, "sBc/l", 132, 132);
      boolean boolean0 = node0.isScript();
      assertTrue(boolean0);
      assertEquals(540804, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(33, 18, 18);
      node0.isSetterDef();
      assertEquals(73746, node0.getSourcePosition());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node((-3765));
      Node node1 = new Node(148, node0, node0, 50, 1892);
      boolean boolean0 = node1.isSetterDef();
      assertFalse(node0.isSetterDef());
      assertTrue(boolean0);
      assertTrue(node1.hasOneChild());
      assertEquals(206692, node1.getSourcePosition());
      assertEquals((-3765), node0.getType());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(99);
      boolean boolean0 = node0.isString();
      assertEquals(99, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString("!", 119, 385);
      boolean boolean0 = node0.isString();
      assertEquals(487809, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = node0.isStringKey();
      assertFalse(boolean0);
      assertTrue(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(154);
      boolean boolean0 = node0.isStringKey();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isSwitch();
      assertEquals(42, node0.getType());
      assertEquals(172074, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      boolean boolean0 = node0.isSwitch();
      assertEquals(450670, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString(115, "%aNA&O; \"eqvAM]s", 115, 115);
      node0.isThis();
      assertEquals(471155, node0.getSourcePosition());
      assertEquals(115, node0.getType());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newNumber((-425.92));
      assertFalse(node0.isThis());
      
      node0.setType(42);
      boolean boolean0 = node0.isThis();
      assertEquals(42, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      boolean boolean0 = node0.isThrow();
      assertEquals(512125, node0.getSourcePosition());
      assertFalse(boolean0);
      assertTrue(node0.isBlock());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(49);
      boolean boolean0 = node0.isThrow();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString(30, "", 30, 30);
      boolean boolean0 = node0.isTrue();
      assertEquals(30, node0.getType());
      assertFalse(boolean0);
      assertEquals(122910, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newNumber((-474.9454345372132));
      Node node1 = new Node(44, node0, 2, 54);
      boolean boolean0 = node1.isTrue();
      assertTrue(boolean0);
      assertFalse(node0.isTrue());
      assertEquals(8246, node1.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-894), (-894), (-894));
      boolean boolean0 = node0.isTry();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(77, 9, 77);
      boolean boolean0 = node0.isTry();
      assertEquals(36941, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newNumber((double) 29, 29, 29);
      boolean boolean0 = node0.isTypeOf();
      assertEquals(118813, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(122, "prev is not a child of this node.");
      Node node1 = new Node(32, node0);
      boolean boolean0 = node1.isTypeOf();
      assertFalse(node0.isTypeOf());
      assertTrue(boolean0);
      assertTrue(node0.isVoid());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(1035);
      boolean boolean0 = node0.isVar();
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1035, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(118);
      boolean boolean0 = node0.isVar();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      boolean boolean0 = node0.isVoid();
      assertFalse(boolean0);
      assertEquals(34, node0.getType());
      assertEquals(139298, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString(122, "prev is not a child of this node.");
      boolean boolean0 = node0.isVoid();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      boolean boolean0 = node0.isWhile();
      assertFalse(boolean0);
      assertEquals(152, node0.getType());
      assertEquals(622744, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(113);
      boolean boolean0 = node0.isWhile();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString(30, "", 30, 30);
      node0.isWith();
      assertEquals(122910, node0.getSourcePosition());
      assertTrue(node0.isNew());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(119);
      boolean boolean0 = node0.isWith();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }
}
